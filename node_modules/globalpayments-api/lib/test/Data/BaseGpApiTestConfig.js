"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseGpApiTestConfig = void 0;
const src_1 = require("../../src");
class BaseGpApiTestConfig {
    static PARTNER_SOLUTION_APP_ID = "A1feRdMmEB6m0Y1aQ65H0bDi9ZeAEB2t";
    static PARTNER_SOLUTION_APP_KEY = "5jPt1OpB6LLitgi7";
    static appId = "4gPqnGBkppGYvoE5UX9EWQlotTxGUDbs";
    static appKey = "FQyJA5VuEQfcji2M";
    static UPA_MIC_DEVICE_APP_ID = "83cdNQ0YBmzxzkLpFHpDGn2ir0WKTW0N";
    static UPA_MIC_DEVICE_APP_KEY = "1ASrcQZb0AEqR6ZT";
    static dynamicHeaderEnabled = false;
    static permissionsEnabled = false;
    static logEnabled = true;
    static gpApiSetupConfig(channel) {
        const config = new src_1.GpApiConfig();
        config.appId = BaseGpApiTestConfig.appId;
        config.appKey = BaseGpApiTestConfig.appKey;
        config.environment = src_1.Environment.Test;
        config.channel = channel;
        config.country = "US";
        config.accessTokenInfo = new src_1.AccessTokenInfo();
        config.accessTokenInfo.transactionProcessingAccountName =
            "transaction_processing";
        config.accessTokenInfo.transactionProcessingAccountID =
            "TRA_c9967ad7d8ec4b46b6dd44a61cde9a91";
        config.accessTokenInfo.riskAssessmentAccountName = "EOS_RiskAssessment";
        config.challengeNotificationUrl = "https://ensi808o85za.x.pipedream.net/";
        config.methodNotificationUrl = "https://ensi808o85za.x.pipedream.net/";
        config.merchantContactUrl = "https://ensi808o85za.x.pipedream.net/";
        if (BaseGpApiTestConfig.dynamicHeaderEnabled) {
            config.dynamicHeaders = {
                "x-gp-platform": "prestashop;version=1.7.2",
                "x-gp-extension": "coccinet;version=2.4.1",
            };
        }
        if (BaseGpApiTestConfig.permissionsEnabled) {
            config.permissions = ["TRN_POST_Authorize"];
        }
        if (BaseGpApiTestConfig.logEnabled) {
            config.requestLogger = new src_1.SampleRequestLogger(new src_1.Logger("logs"));
        }
        return config;
    }
    static resetGpApiConfig() {
        src_1.ServicesContainer.removeConfiguration();
        BaseGpApiTestConfig.appId = BaseGpApiTestConfig.appId;
        BaseGpApiTestConfig.appKey = BaseGpApiTestConfig.appKey;
    }
}
exports.BaseGpApiTestConfig = BaseGpApiTestConfig;
//# sourceMappingURL=BaseGpApiTestConfig.js.map
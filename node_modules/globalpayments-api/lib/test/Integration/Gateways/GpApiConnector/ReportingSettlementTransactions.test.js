"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../../src");
const BaseGpApiTestConfig_1 = require("../../../Data/BaseGpApiTestConfig");
const crypto = __importStar(require("crypto"));
beforeAll(() => {
    src_1.ServicesContainer.configureService(BaseGpApiTestConfig_1.BaseGpApiTestConfig.gpApiSetupConfig(src_1.Channel.CardNotPresent));
});
test("report settlement transactions by start date and end date", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date();
    endDate.setHours(0, 0, 0, 0);
    try {
        const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
            .orderBy(src_1.TransactionSortProperty.TIME_CREATED, src_1.SortDirection.Desc)
            .where(src_1.SearchCriteria.StartDate, startDate)
            .andWith(src_1.SearchCriteria.EndDate, endDate)
            .execute();
        for (const transaction of response.result) {
            expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
            expect(new Date(transaction.transactionDate).getTime() < endDate.getTime()).toBe(true);
        }
    }
    catch (err) {
        console.log(err);
    }
});
test("report settlement transactions - order by time created", async () => {
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 25)
        .orderBy(src_1.TransactionSortProperty.TIME_CREATED, src_1.SortDirection.Asc)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    let transactionList = response.result;
    transactionList = transactionList.sort((a, b) => {
        return (new Date(a.transactionDate).getTime() -
            new Date(b.transactionDate).getTime());
    });
    for (const [index, transaction] of response.result.entries()) {
        expect(JSON.stringify(transaction) === JSON.stringify(transactionList[index])).toBe(true);
    }
});
test("report settlement transactions - order by time created descending", async () => {
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 25)
        .orderBy(src_1.TransactionSortProperty.TIME_CREATED, src_1.SortDirection.Desc)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    let transactionList = response.result;
    transactionList = transactionList.sort((a, b) => {
        return (new Date(a.transactionDate).getTime() -
            new Date(b.transactionDate).getTime());
    });
    for (const [index, transaction] of response.result.entries()) {
        expect(JSON.stringify(transaction) === JSON.stringify(transactionList[index])).toBe(true);
    }
});
test("report settlement transactions - order by status", async () => {
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.STATUS, src_1.SortDirection.Asc)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    let transactionList = response.result;
    transactionList = transactionList.sort((a, b) => {
        return (new Date(a.transactionDate).getTime() -
            new Date(b.transactionDate).getTime());
    });
    for (const [index, transaction] of response.result.entries()) {
        expect(JSON.stringify(transaction) === JSON.stringify(transactionList[index])).toBe(true);
    }
});
test("report settlement transactions - order by status descending", async () => {
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.STATUS, src_1.SortDirection.Desc)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    let transactionList = response.result;
    transactionList = transactionList.sort((a, b) => {
        return (new Date(a.transactionDate).getTime() -
            new Date(b.transactionDate).getTime());
    });
    for (const [index, transaction] of response.result.entries()) {
        expect(JSON.stringify(transaction) === JSON.stringify(transactionList[index])).toBe(true);
    }
});
test("report settlement transactions - order by type", async () => {
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    let transactionList = response.result;
    transactionList = transactionList.sort((a, b) => {
        return (new Date(a.transactionDate).getTime() -
            new Date(b.transactionDate).getTime());
    });
    for (const [index, transaction] of response.result.entries()) {
        expect(JSON.stringify(transaction) === JSON.stringify(transactionList[index])).toBe(true);
    }
});
test("report settlement transactions - order by type descending", async () => {
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Desc)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    let transactionList = response.result;
    transactionList = transactionList.sort((a, b) => {
        return (new Date(a.transactionDate).getTime() -
            new Date(b.transactionDate).getTime());
    });
    for (const [index, transaction] of response.result.entries()) {
        expect(JSON.stringify(transaction) === JSON.stringify(transactionList[index])).toBe(true);
    }
});
test("report settlement transactions - order by depositId ascending", async () => {
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.DEPOSIT_ID, src_1.SortDirection.Asc)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    let transactionList = response.result;
    transactionList = transactionList.sort((a, b) => {
        return (new Date(a.transactionDate).getTime() -
            new Date(b.transactionDate).getTime());
    });
    for (const [index, transaction] of response.result.entries()) {
        expect(JSON.stringify(transaction) === JSON.stringify(transactionList[index])).toBe(true);
    }
});
test("report settlement transactions - order by depositId descending", async () => {
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.DEPOSIT_ID, src_1.SortDirection.Desc)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    let transactionList = response.result;
    transactionList = transactionList.sort((a, b) => {
        return (new Date(a.transactionDate).getTime() -
            new Date(b.transactionDate).getTime());
    });
    for (const [index, transaction] of response.result.entries()) {
        expect(JSON.stringify(transaction) === JSON.stringify(transactionList[index])).toBe(true);
    }
});
test("report settlement transactions - filter by ARN", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const arn = "24137550037630153798573";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.AquirerReferenceNumber, arn)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.aquirerReferenceNumber).toBe(arn);
    }
});
test("report settlement transactions - filter by invalid ARN", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const arn = "00000010037624410827527";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.AquirerReferenceNumber, arn)
        .execute();
    expect(response.result.length).toBe(0);
});
test("report settlement transactions - filter by CardNumber First 6 and Last 4", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const firstSix = "543458";
    const lastFour = "7652";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.CardNumberFirstSix, firstSix)
        .andWith(src_1.SearchCriteria.CardNumberLastFour, lastFour)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.maskedCardNumber.startsWith(firstSix) &&
            transaction.maskedCardNumber.endsWith(lastFour)).toBe(true);
    }
});
test("report settlement transactions - filter by card brand", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const cardBrand = "MASTERCARD";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.CardBrand, cardBrand)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.cardType).toBe(cardBrand);
    }
});
test("report settlement transactions - filter by invalid card brand", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const cardBrand = "MIT";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.CardBrand, cardBrand)
        .execute();
    expect(response.result.length).toBe(0);
});
test("report settlement transactions - filter by Deposit Status", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const depositStatus = "SPLIT_FUNDING";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.DepositStatus, depositStatus)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.depositStatus).toBe(depositStatus);
    }
});
test("report settlement transactions - filter by Brand Reference", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const brandReference = "MCF1CZ5ME5405";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.BrandReference, brandReference)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.brandReference).toBe(brandReference);
    }
});
test("report settlement transactions - filter by invalid Brand Reference", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const brandReference = "MCF1CZ5ME5001";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.BrandReference, brandReference)
        .execute();
    expect(response.result.length).toBe(0);
});
test("report settlement transactions - filter by CardBrand and AuthCode", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const cardBrand = "MASTERCARD";
    const authCode = "028010";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.CardBrand, cardBrand)
        .andWith(src_1.SearchCriteria.AuthCode, authCode)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.cardType).toBe(cardBrand);
        expect(transaction.authCode).toBe(authCode);
    }
});
test("report settlement transactions - filter by Reference", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const reference = "50080513769";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.ReferenceNumber, reference)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.referenceNumber).toBe(reference);
    }
});
test("report settlement transactions - filter by random Reference", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.ReferenceNumber, crypto.randomUUID())
        .execute();
    expect(response.result.length).toBe(0);
});
test("report settlement transactions - filter by Status", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.TransactionStatus, src_1.TransactionStatus.FUNDED)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.transactionStatus).toBe(src_1.TransactionStatus.FUNDED);
    }
});
test("report settlement transactions - filter by Deposit Reference", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const depositReference = "DEP_2342423429";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.DataServiceCriteria.DepositReference, depositReference)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(transaction.depositReference).toBe(depositReference);
    }
});
test("report settlement transactions - filter by FromDepositTimeCreated and ToDepositTimeCreated", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date();
    const reference = "50080513769";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.DataServiceCriteria.StartDepositDate, startDate)
        .andWith(src_1.DataServiceCriteria.EndDepositDate, endDate)
        .andWith(src_1.SearchCriteria.ReferenceNumber, reference)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() < endDate.getTime()).toBe(true);
        expect(transaction.referenceNumber).toBe(reference);
    }
});
test("report settlement transactions - filter by FromBatchTimeCreated and ToBatchTimeCreated", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date();
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.DataServiceCriteria.StartBatchDate, startDate)
        .andWith(src_1.DataServiceCriteria.EndBatchDate, endDate)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() < endDate.getTime()).toBe(true);
    }
});
test("report settlement transactions - filter by MerchantId and SystemHierarchy", async () => {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - 29);
    startDate.setHours(0, 0, 0, 0);
    const endDate = new Date();
    const systemMid = "101023947262";
    const systemHierarchy = "055-70-024-011-019";
    const response = await src_1.ReportingService.findSettlementTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TYPE, src_1.SortDirection.Asc)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.DataServiceCriteria.MerchantId, systemMid)
        .andWith(src_1.DataServiceCriteria.SystemHierarchy, systemHierarchy)
        .execute();
    expect(response.result?.length > 0).toBe(true);
    for (const transaction of response.result) {
        expect(transaction instanceof src_1.TransactionSummary).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() >= startDate.getTime()).toBe(true);
        expect(new Date(transaction.transactionDate).getTime() < endDate.getTime()).toBe(true);
        expect(transaction.merchantId).toBe(systemMid);
        expect(transaction.merchantHierarchy).toBe(systemHierarchy);
    }
});
afterAll(() => BaseGpApiTestConfig_1.BaseGpApiTestConfig.resetGpApiConfig());
//# sourceMappingURL=ReportingSettlementTransactions.test.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../../src");
const BaseGpApiTestConfig_1 = require("../../../Data/BaseGpApiTestConfig");
let eCheck;
let address;
let customer;
const amount = 10;
const currency = "USD";
const setup = () => {
    src_1.ServicesContainer.configureService(BaseGpApiTestConfig_1.BaseGpApiTestConfig.gpApiSetupConfig(src_1.Channel.CardNotPresent));
    eCheck = new src_1.ECheck();
    eCheck.accountNumber = "1234567890";
    eCheck.routingNumber = "122000030";
    eCheck.accountType = src_1.AccountType.Savings;
    eCheck.secCode = src_1.SecCode.WEB;
    eCheck.checkReference = "123";
    eCheck.merchantNotes = "123";
    eCheck.bankName = "First Union";
    eCheck.checkHolderName = "Jane Doe";
    const bankAddress = new src_1.Address();
    bankAddress.streetAddress1 = "12000 Smoketown Rd";
    bankAddress.streetAddress2 = "Apt 3B";
    bankAddress.streetAddress3 = "no";
    bankAddress.city = "Mesa";
    bankAddress.postalCode = "22192";
    bankAddress.state = "AZ";
    bankAddress.countryCode = "US";
    eCheck.bankAddress = bankAddress;
    address = new src_1.Address();
    address.streetAddress1 = "Apartment 852";
    address.streetAddress2 = "Complex 741";
    address.streetAddress3 = "no";
    address.city = "Chicago";
    address.postalCode = "5001";
    address.state = "IL";
    address.countryCode = "US";
    customer = new src_1.Customer();
    customer.key = "e193c21a-ce64-4820-b5b6-8f46715de931";
    customer.firstName = "James";
    customer.lastName = "Mason";
    customer.dateOfBirth = "1980-01-01";
    customer.mobilePhone = new src_1.PhoneNumber("+35", "312345678", src_1.PhoneNumberType.MOBILE);
    customer.homePhone = new src_1.PhoneNumber("+1", "12345899", src_1.PhoneNumberType.HOME);
};
beforeAll(() => {
    setup();
});
test("check sale", async () => {
    const response = await eCheck
        .charge(amount + 1)
        .withCurrency(currency)
        .withAddress(address)
        .withCustomerData(customer)
        .execute();
    expect(response).toBeTruthy();
    expect(response.responseCode).toBe("SUCCESS");
    expect(response.responseMessage).toBe(src_1.TransactionStatus.CAPTURED);
});
test("check refund", async () => {
    const response = await eCheck
        .refund(amount + 1)
        .withCurrency(currency)
        .withAddress(address)
        .withCustomerData(customer)
        .execute();
    expect(response).toBeTruthy();
    expect(response.responseCode).toBe("SUCCESS");
    expect(response.responseMessage).toBe(src_1.TransactionStatus.CAPTURED);
});
test("check reauthorize", async () => {
    eCheck.secCode = src_1.SecCode.PPD;
    eCheck.accountNumber = "051904524";
    eCheck.routingNumber = "123456780";
    const startDate = new Date();
    startDate.setFullYear(startDate.getFullYear() - 1);
    const endDate = new Date();
    endDate.setDate(endDate.getDate() - 2);
    const amount = "1.29";
    const response = await src_1.ReportingService.findTransactionsPaged(1, 10)
        .orderBy(src_1.TransactionSortProperty.TIME_CREATED)
        .where(src_1.SearchCriteria.StartDate, startDate)
        .andWith(src_1.SearchCriteria.EndDate, endDate)
        .andWith(src_1.SearchCriteria.PaymentMethodName, src_1.PaymentMethodName.BANK_PAYMENT)
        .andWith(src_1.SearchCriteria.PaymentType, src_1.PaymentType.SALE)
        .andWith(src_1.DataServiceCriteria.Amount, amount)
        .execute();
    expect(response).toBeTruthy();
    if (response.result.length) {
        const transactionSummary = response.result.shift();
        expect(transactionSummary).toBeTruthy();
        expect(transactionSummary.amount).toBe(amount);
        const transaction = src_1.Transaction.fromId(transactionSummary.transactionId, undefined, src_1.PaymentMethodType.ACH);
        const reauthResponse = await transaction
            .reauthorized()
            .withDescription("Resubmitting " + transaction.transactionReference)
            .withBankTransferData(eCheck)
            .execute();
        expect(reauthResponse).toBeTruthy();
        expect(reauthResponse.responseCode).toBe("SUCCESS");
    }
});
test("check sale then refund", async () => {
    const response = await eCheck
        .charge(amount + 1)
        .withCurrency(currency)
        .withAddress(address)
        .withCustomerData(customer)
        .execute();
    expect(response).toBeTruthy();
    expect(response.responseCode).toBe("SUCCESS");
    expect(response.responseMessage).toBe(src_1.TransactionStatus.CAPTURED);
    const refund = await response.refund().withCurrency(currency).execute();
    expect(refund).toBeTruthy();
    expect(refund.responseCode).toBe("SUCCESS");
    expect(refund.responseMessage).toBe(src_1.TransactionStatus.CAPTURED);
    expect(refund.cardIssuerResponse.result).toBe("A0000");
});
afterAll(() => BaseGpApiTestConfig_1.BaseGpApiTestConfig.resetGpApiConfig());
//# sourceMappingURL=Ach.test.js.map
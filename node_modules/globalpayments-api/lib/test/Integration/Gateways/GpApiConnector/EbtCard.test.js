"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Data_1 = require("../../../Data");
const src_1 = require("../../../../src");
const BaseGpApiTestConfig_1 = require("../../../Data/BaseGpApiTestConfig");
let card;
let track;
const amount = 10;
const currency = "USD";
const setup = () => {
    card = Data_1.TestCards.asEBTManual(Data_1.TestCards.visaManual(true), "32539F50C245A6A93D123412324000AA");
    track = Data_1.TestCards.asEBTTrack(Data_1.TestCards.visaSwipe(), "32539F50C245A6A93D123412324000AA");
    src_1.ServicesContainer.configureService(BaseGpApiTestConfig_1.BaseGpApiTestConfig.gpApiSetupConfig(src_1.Channel.CardPresent));
};
beforeAll(() => {
    setup();
});
const assertEbtTransactionResponse = (response, transactionStatus) => {
    expect(response).toBeTruthy();
    expect(response.responseCode).toBe("SUCCESS");
    expect(response.responseMessage).toBe(transactionStatus);
};
test("ebt sale manual", async () => {
    card.cardHolderName = "Jane Doe";
    const response = await card.charge(amount).withCurrency(currency).execute();
    assertEbtTransactionResponse(response, src_1.TransactionStatus.CAPTURED);
});
test("ebt sale swipe", async () => {
    const response = await track
        .charge(amount)
        .withCurrency(currency)
        .withAllowDuplicates(true)
        .execute();
    assertEbtTransactionResponse(response, src_1.TransactionStatus.CAPTURED);
});
test("ebt refund", async () => {
    card.cardHolderName = "Jane Doe";
    const response = await card.refund(amount).withCurrency(currency).execute();
    assertEbtTransactionResponse(response, src_1.TransactionStatus.CAPTURED);
});
test("ebt sale refund swipe", async () => {
    const response = await track
        .refund(amount)
        .withCurrency(currency)
        .withAllowDuplicates(true)
        .execute();
    assertEbtTransactionResponse(response, src_1.TransactionStatus.CAPTURED);
});
test("ebt transaction refund", async () => {
    card.cardHolderName = "Jane Doe";
    const transaction = await card
        .charge(amount)
        .withCurrency(currency)
        .execute();
    assertEbtTransactionResponse(transaction, src_1.TransactionStatus.CAPTURED);
    const response = await transaction.refund().withCurrency(currency).execute();
    assertEbtTransactionResponse(response, src_1.TransactionStatus.CAPTURED);
});
test("ebt sale refund swipe", async () => {
    const transaction = await track
        .charge(amount)
        .withCurrency(currency)
        .execute();
    assertEbtTransactionResponse(transaction, src_1.TransactionStatus.CAPTURED);
    const response = await transaction.refund().withCurrency(currency).execute();
    assertEbtTransactionResponse(response, src_1.TransactionStatus.CAPTURED);
});
test("ebt transaction reverse", async () => {
    card.cardHolderName = "Jane Doe";
    const transaction = await card
        .refund(amount)
        .withCurrency(currency)
        .execute();
    assertEbtTransactionResponse(transaction, src_1.TransactionStatus.CAPTURED);
    const response = await transaction.reverse().withCurrency(currency).execute();
    assertEbtTransactionResponse(response, src_1.TransactionStatus.REVERSED);
});
test("ebt sale reverse track data", async () => {
    const transaction = await track
        .charge(amount)
        .withCurrency(currency)
        .execute();
    assertEbtTransactionResponse(transaction, src_1.TransactionStatus.CAPTURED);
    const response = await transaction.reverse().withCurrency(currency).execute();
    assertEbtTransactionResponse(response, src_1.TransactionStatus.REVERSED);
});
afterAll(() => BaseGpApiTestConfig_1.BaseGpApiTestConfig.resetGpApiConfig());
//# sourceMappingURL=EbtCard.test.js.map
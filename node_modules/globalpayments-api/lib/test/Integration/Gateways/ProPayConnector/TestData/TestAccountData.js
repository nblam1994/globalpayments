"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestAccountData = void 0;
const AccountPermissions_1 = require("../../../../../src/Entities/ProFac/AccountPermissions");
const BankAccountData_1 = require("../../../../../src/Entities/ProFac/BankAccountData");
const BeneficialOwnerData_1 = require("../../../../../src/Entities/ProFac/BeneficialOwnerData");
const BusinessData_1 = require("../../../../../src/Entities/ProFac/BusinessData");
const DeviceData_1 = require("../../../../../src/Entities/ProFac/DeviceData");
const DeviceInfo_1 = require("../../../../../src/Entities/ProFac/DeviceInfo");
const GrossBillingInformation_1 = require("../../../../../src/Entities/ProFac/GrossBillingInformation");
const OwnersData_1 = require("../../../../../src/Entities/ProFac/OwnersData");
const RenewAccountData_1 = require("../../../../../src/Entities/ProFac/RenewAccountData");
const SignificantOwnerData_1 = require("../../../../../src/Entities/ProFac/SignificantOwnerData");
const ThreatRiskData_1 = require("../../../../../src/Entities/ProFac/ThreatRiskData");
const UserPersonalData_1 = require("../../../../../src/Entities/ProFac/UserPersonalData");
const PaymentMethods_1 = require("../../../../../src/PaymentMethods");
const fs = __importStar(require("fs"));
const DeviceAttributeInfo_1 = require("../../../../../src/Entities/ProFac/DeviceAttributeInfo");
const Address_1 = require("../../../../../src/Entities/Address");
const OrderDevice_1 = require("../../../../../src/Entities/ProFac/OrderDevice");
class TestAccountData {
    static GetBankAccountData() {
        const bankAccountInformation = new BankAccountData_1.BankAccountData();
        bankAccountInformation.accountCountryCode = "USA";
        bankAccountInformation.accountName = "MyBankAccount";
        bankAccountInformation.accountNumber = "123456789";
        bankAccountInformation.accountOwnershipType = "C";
        bankAccountInformation.routingNumber = "102000076";
        return bankAccountInformation;
    }
    static GetOrderNewDeviceData() {
        const orderDevice = new OrderDevice_1.OrderDevice();
        orderDevice.accountNum = 718581359;
        orderDevice.shipTo = "Test Company";
        orderDevice.shipToContact = "John Q. Public";
        orderDevice.shipToAddress = "2675 W 600 N";
        orderDevice.shipToAddress2 = "Apt G";
        orderDevice.shipToCity = "Lindon";
        orderDevice.shipToState = "UT";
        orderDevice.shipToZip = "84042";
        orderDevice.shipToPhone = "801-555-1212";
        orderDevice.cardholderName = "Johnny Cage";
        orderDevice.ccNum = "4111111111111111";
        orderDevice.expDate = "0427";
        orderDevice.cVV2 = "999";
        orderDevice.billingZip = "84003";
        return orderDevice;
    }
    static GetDeviceDataForOrderDevice(numDeviceTypes = 1, withAttributes = true) {
        const deviceTypes = ["Secure Submit"];
        const deviceData = new DeviceData_1.DeviceData();
        deviceData.devices = Array();
        for (let i = 0; i < numDeviceTypes; i++) {
            const deviceInfo = new DeviceInfo_1.DeviceInfo();
            if (i >= deviceTypes.length)
                break;
            deviceInfo.name = deviceTypes[i];
            deviceInfo.quantity = 1;
            if (withAttributes) {
                const deviceAtrributeInfo = new DeviceAttributeInfo_1.DeviceAttributeInfo();
                deviceAtrributeInfo.name = "Heartland.AMD.OfficeKey";
                deviceAtrributeInfo.value = "123456";
                deviceInfo.attributes = [deviceAtrributeInfo];
            }
            deviceData.devices = [deviceInfo];
        }
        return deviceData;
    }
    static GetBusinessData() {
        const businessData = new BusinessData_1.BusinessData();
        businessData.businessLegalName = "Twain Enterprises";
        businessData.doingBusinessAs = "Twain Enterprises";
        businessData.employerIdentificationNumber = String(this.getRandomInt(100000000, 999999999));
        businessData.businessDescription = "Accounting Services";
        businessData.websiteURL = "https://www.Propay.com";
        businessData.merchantCategoryCode = "5399";
        businessData.monthlyBankCardVolume = "50000";
        businessData.averageTicket = "100";
        businessData.highestTicket = "300";
        businessData.businessType = "D";
        const businessAddress = new Address_1.Address();
        businessAddress.streetAddress1 = "123 Main St.";
        businessAddress.city = "Downtown";
        businessAddress.state = "NJ";
        businessAddress.postalCode = "12345";
        businessAddress.country = "USA";
        businessData.businessAddress = businessAddress;
        return businessData;
    }
    static GetUserPersonalData() {
        const accountPersonalInformation = new UserPersonalData_1.UserPersonalData();
        accountPersonalInformation.dayPhone = "4464464464";
        accountPersonalInformation.eveningPhone = "4464464464";
        accountPersonalInformation.externalID = String(this.getRandomInt(1000000, 999999999));
        accountPersonalInformation.firstName = "David";
        accountPersonalInformation.lastName = "Tennant";
        accountPersonalInformation.phonePIN = "1234";
        accountPersonalInformation.sourceEmail =
            "user" + this.getRandomInt(1, 10000) + "@user.com";
        accountPersonalInformation.sSN = "123456789";
        accountPersonalInformation.dateOfBirth = "01-01-1981";
        accountPersonalInformation.tier = "TestEIN";
        accountPersonalInformation.ipSignup = "4.14.150.145";
        accountPersonalInformation.uSCitizen = true;
        accountPersonalInformation.bOAttestation = true;
        accountPersonalInformation.termsAcceptanceIP = "4.14.150.145";
        accountPersonalInformation.termsAcceptanceTimeStamp =
            "2022-10-27 12:57:08.2021237";
        accountPersonalInformation.termsVersion = 1;
        const userAddress = new Address_1.Address();
        userAddress.streetAddress1 = "123 Main St.";
        userAddress.city = "Downtown";
        userAddress.state = "NJ";
        userAddress.postalCode = "12345";
        userAddress.country = "USA";
        accountPersonalInformation.userAddress = userAddress;
        const mailingAddress = new Address_1.Address();
        mailingAddress.streetAddress1 = "123 Main St.";
        mailingAddress.city = "Downtown";
        mailingAddress.state = "NJ";
        mailingAddress.postalCode = "12345";
        mailingAddress.country = "USA";
        accountPersonalInformation.mailingAddress = mailingAddress;
        return accountPersonalInformation;
    }
    static GetThreatRiskData() {
        const threatRiskData = new ThreatRiskData_1.ThreatRiskData();
        threatRiskData.merchantSourceIP = "8.8.8.8";
        threatRiskData.threatMetrixPolicy = "Default";
        threatRiskData.threatMetrixSessionID =
            "dad889c1-1ca4-4fq71-8f6f-807eb4408bc7";
        return threatRiskData;
    }
    static GetSignificantOwnerData() {
        const significantOwnerData = new SignificantOwnerData_1.SignificantOwnerData();
        significantOwnerData.authorizedSignerFirstName = "John";
        significantOwnerData.authorizedSignerLastName = "Doe";
        significantOwnerData.authorizedSignerTitle = "Director";
        significantOwnerData.significantOwner.firstName = "John";
        return significantOwnerData;
    }
    static GetBeneficialOwnerData() {
        const ownersInformation = new BeneficialOwnerData_1.BeneficialOwnerData();
        ownersInformation.ownersCount = "2";
        const firstOwner = new OwnersData_1.OwnersData();
        firstOwner.firstName = "First1";
        firstOwner.lastName = "Last1";
        firstOwner.title = "CEO";
        firstOwner.email = "abc@qamail.com";
        firstOwner.DateOfBirth = "11-11-1988";
        firstOwner.sSN = "123545677";
        const firstOwnerAddress = new Address_1.Address();
        firstOwnerAddress.streetAddress1 = "123 Main St.";
        firstOwnerAddress.city = "Downtown";
        firstOwnerAddress.state = "NJ";
        firstOwnerAddress.postalCode = "12345";
        firstOwnerAddress.country = "USA";
        firstOwner.ownerAddress = firstOwnerAddress;
        //Second Owner
        const secondOwner = new OwnersData_1.OwnersData();
        secondOwner.firstName = "First4";
        secondOwner.lastName = "Last4";
        secondOwner.title = "Director";
        secondOwner.email = "abc1@qamail.com";
        secondOwner.DateOfBirth = "11-11-1989";
        secondOwner.sSN = "123545677";
        const secondOwnerAddress = new Address_1.Address();
        secondOwnerAddress.streetAddress1 = "123 Main St.";
        secondOwnerAddress.city = "Downtown";
        secondOwnerAddress.state = "NJ";
        secondOwnerAddress.postalCode = "12345";
        secondOwnerAddress.country = "USA";
        secondOwner.ownerAddress = secondOwnerAddress;
        ownersInformation.ownersList = [firstOwner, secondOwner];
        return ownersInformation;
    }
    static GetCreditCardData() {
        const card = new PaymentMethods_1.CreditCardData();
        card.number = "4111111111111111";
        card.expMonth = "12";
        card.expYear = "2025";
        card.cvn = "123";
        card.cardHolderName = "Joe Smith";
        return card;
    }
    static GetACHData() {
        const bankAccountInformation = new BankAccountData_1.BankAccountData();
        bankAccountInformation.accountNumber = "123456789";
        bankAccountInformation.accountType = "C";
        bankAccountInformation.routingNumber = "102000076";
        return bankAccountInformation;
    }
    static GetMailingAddress() {
        const address = new Address_1.Address();
        address.streetAddress1 = "123 Main St.";
        address.city = "Downtown";
        address.state = "NJ";
        address.postalCode = "12345";
        address.country = "USA";
        return address;
    }
    static GetSecondaryBankAccountData() {
        const bankAccountInformation = new BankAccountData_1.BankAccountData();
        bankAccountInformation.accountCountryCode = "USA";
        bankAccountInformation.accountName = "MyBankAccount";
        bankAccountInformation.accountNumber = "123456788";
        bankAccountInformation.accountOwnershipType = "Personal";
        bankAccountInformation.accountType = "C";
        bankAccountInformation.routingNumber = "102000076";
        bankAccountInformation.bankName = "My Bank";
        return bankAccountInformation;
    }
    static GetGrossBillingSettleData() {
        const grossBillingInformation = new GrossBillingInformation_1.GrossBillingInformation();
        const grossSettleBankData = new BankAccountData_1.BankAccountData();
        grossSettleBankData.accountCountryCode = "USA";
        grossSettleBankData.accountName = "MyBankAccount";
        grossSettleBankData.accountNumber = "123456788";
        grossSettleBankData.accountOwnershipType = "Personal";
        grossSettleBankData.accountType = "C";
        grossSettleBankData.routingNumber = "102000076";
        grossSettleBankData.accountHolderName = "John";
        grossBillingInformation.grossSettleBankData = grossSettleBankData;
        const grossSettleAddress = new Address_1.Address();
        grossSettleAddress.streetAddress1 = "123 Main St.";
        grossSettleAddress.city = "Downtown";
        grossSettleAddress.state = "NJ";
        grossSettleAddress.postalCode = "12345";
        grossSettleAddress.country = "USA";
        grossBillingInformation.grossSettleAddress = grossSettleAddress;
        const grossSettleCreditCardData = new PaymentMethods_1.CreditCardData();
        grossSettleCreditCardData.number = "4111111111111111";
        grossSettleCreditCardData.expMonth = "12";
        grossSettleCreditCardData.expYear = "2025";
        grossSettleCreditCardData.cvn = "123";
        grossSettleCreditCardData.cardHolderName = "Joe Smith";
        grossBillingInformation.grossSettleCreditCardData =
            grossSettleCreditCardData;
        return grossBillingInformation;
    }
    static GetAccountPermissions() {
        const accountPermissions = new AccountPermissions_1.AccountPermissions();
        accountPermissions.cCProcessing = true;
        return accountPermissions;
    }
    static GetRenewAccountDetails() {
        const renewAccountData = new RenewAccountData_1.RenewAccountData();
        renewAccountData.tier = "TestEIN";
        renewAccountData.zipCode = "12345";
        renewAccountData.creditCard = new PaymentMethods_1.CreditCardData();
        renewAccountData.creditCard.number = "4111111111111111";
        renewAccountData.creditCard.expMonth = "12";
        renewAccountData.creditCard.expYear = "2025";
        renewAccountData.creditCard.cvn = "123";
        renewAccountData.paymentBankAccountNumber = "123456789";
        renewAccountData.paymentBankRoutingNumber = "102000076";
        renewAccountData.paymentBankAccountType = "Checking";
        return renewAccountData;
    }
    static GetDeviceData(numDeviceTypes = 1, withAttributes = true) {
        const deviceTypes = ["PAX S500", "Secure Submit"];
        const deviceData = new DeviceData_1.DeviceData();
        deviceData.devices = Array();
        for (let i = 0; i < numDeviceTypes; i++) {
            const deviceInfo = new DeviceInfo_1.DeviceInfo();
            if (i >= deviceTypes.length)
                break;
            deviceInfo.name = deviceTypes[i];
            deviceInfo.quantity = 1;
            if (withAttributes) {
                const deviceAtrributeInfo = new DeviceAttributeInfo_1.DeviceAttributeInfo();
                deviceAtrributeInfo.name = "Heartland.AMD.OfficeKey";
                deviceAtrributeInfo.value = "123456";
                deviceInfo.attributes = [deviceAtrributeInfo];
            }
            deviceData.devices = [deviceInfo];
        }
        return deviceData;
    }
    static GetDocumentBase64String(filepath) {
        return this.getByteArray(filepath);
    }
    static getByteArray(filePath) {
        const fileData = fs.readFileSync(filePath);
        const buff = Buffer.from(fileData);
        const base64data = buff.toString("base64");
        return base64data;
    }
    static getRandomInt(min, max) {
        const floatRandom = Math.random();
        const difference = max - min;
        // random between 0 and the difference
        const random = Math.round(difference * floatRandom);
        const randomWithinRange = random + min;
        return randomWithinRange;
    }
}
exports.TestAccountData = TestAccountData;
//# sourceMappingURL=TestAccountData.js.map
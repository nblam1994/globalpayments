"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const PayFacService_1 = require("../../../../../src/Services/PayFacService");
const src_1 = require("../../../../../src");
const TestAccountData_1 = require("./TestData/TestAccountData");
const BankAccountData_1 = require("../../../../../src/Entities/ProFac/BankAccountData");
const DocumentUploadData_1 = require("../../../../../src/Entities/DocumentUploadData");
const SSORequestData_1 = require("../../../../../src/Entities/SSORequestData");
const config = new src_1.PorticoConfig();
config.serviceUrl = "https://xmltest.propay.com/API/PropayAPI.aspx";
config.certificationStr = "d17d770d4734341aaedab32b7a7763";
config.terminalId = "7a7763";
config.selfSignedCertLocation =
    "test/Integration/Gateways/ProPayConnector/Certifications/TestData/selfSignedCertificate.crt";
const _service = new PayFacService_1.PayFacService();
beforeAll(() => {
    src_1.ServicesContainer.configureService(config);
});
test.failing("create account", async () => {
    const accountPersonalInfo = TestAccountData_1.TestAccountData.GetUserPersonalData();
    const ownersInfo = TestAccountData_1.TestAccountData.GetBeneficialOwnerData();
    const response = await _service
        .createAccount()
        .withUserPersonalData(accountPersonalInfo)
        .withBeneficialOwnerData(ownersInfo)
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
    expect(response.payFacData.accountNumber).toBeTruthy();
    expect(response.payFacData.password).toBeTruthy();
    expect(response.payFacData.sourceEmail).toBeTruthy();
});
test("Order a new device", async () => {
    const orderDeviceInfo = TestAccountData_1.TestAccountData.GetOrderNewDeviceData();
    const deviceData = TestAccountData_1.TestAccountData.GetDeviceDataForPhysicalDevice(1, false);
    const response = await _service
        .orderDevice()
        .withOrderDevice(orderDeviceInfo)
        .withDeviceData(deviceData)
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
});
test.failing("create account Device Order", async () => {
    const bankAccountInfo = TestAccountData_1.TestAccountData.GetBankAccountForBoardingData();
    const accountPersonalInfo = TestAccountData_1.TestAccountData.GetUserPersonalForBoadingData();
    const deviceData = TestAccountData_1.TestAccountData.GetDeviceData(1, false);
    const userBusinessInfo = TestAccountData_1.TestAccountData.GetBusinessForBoardingData();
    const mailingAddressInfo = TestAccountData_1.TestAccountData.GetMailingAddressForBoarding();
    const ownersInfo = TestAccountData_1.TestAccountData.GetBeneficialOwnerData();
    const response = await _service
        .createAccount()
        .withBankAccountData(bankAccountInfo)
        .withUserPersonalData(accountPersonalInfo)
        .withBusinessData(userBusinessInfo)
        .withDeviceData(deviceData)
        .withMailingAddress(mailingAddressInfo)
        .withBeneficialOwnerData(ownersInfo)
        .withTimeZone("UTC")
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
    expect(response.payFacData.accountNumber).toBeTruthy();
    expect(response.payFacData.password).toBeTruthy();
    expect(response.payFacData.sourceEmail).toBeTruthy();
});
test.failing("create account Physical Device", async () => {
    const bankAccountInfo = TestAccountData_1.TestAccountData.GetBankAccountForBoardingData();
    const accountPersonalInfo = TestAccountData_1.TestAccountData.GetUserPersonalForBoadingData();
    const deviceData = TestAccountData_1.TestAccountData.GetDeviceDataForPhysicalDevice(1, false);
    const userBusinessInfo = TestAccountData_1.TestAccountData.GetBusinessForBoardingData();
    const mailingAddressInfo = TestAccountData_1.TestAccountData.GetMailingAddressForBoarding();
    const ownersInfo = TestAccountData_1.TestAccountData.GetBeneficialOwnerData();
    const response = await _service
        .createAccount()
        .withBankAccountData(bankAccountInfo)
        .withUserPersonalData(accountPersonalInfo)
        .withBusinessData(userBusinessInfo)
        .withDeviceData(deviceData)
        .withMailingAddress(mailingAddressInfo)
        .withBeneficialOwnerData(ownersInfo)
        .withTimeZone("UTC")
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
    expect(response.payFacData.accountNumber).toBeTruthy();
    expect(response.payFacData.password).toBeTruthy();
    expect(response.payFacData.sourceEmail).toBeTruthy();
});
test.failing("Test Failed KYC (Status 66)", async () => {
    const bankAccountInfo = TestAccountData_1.TestAccountData.GetBankAccountForBoardingData();
    const accountPersonalInfo = TestAccountData_1.TestAccountData.GetUserPersonalForBoadingData("01-01-1971");
    const deviceData = TestAccountData_1.TestAccountData.GetDeviceData(1, false);
    const userBusinessInfo = TestAccountData_1.TestAccountData.GetBusinessForBoardingData();
    const mailingAddressInfo = TestAccountData_1.TestAccountData.GetMailingAddressForBoarding();
    const ownersInfo = TestAccountData_1.TestAccountData.GetBeneficialOwnerData();
    const response = await _service
        .createAccount()
        .withBankAccountData(bankAccountInfo)
        .withUserPersonalData(accountPersonalInfo)
        .withBusinessData(userBusinessInfo)
        .withDeviceData(deviceData)
        .withMailingAddress(mailingAddressInfo)
        .withBeneficialOwnerData(ownersInfo)
        .withTimeZone("UTC")
        .execute();
    console.log(response);
    expect(response).toBeTruthy();
    expect("66").toBe(response.responseCode);
});
test("edit account information", async () => {
    const bankAccountData = new BankAccountData_1.BankAccountData();
    bankAccountData.accountCountryCode = "USA";
    bankAccountData.accountType = "Checking";
    bankAccountData.accountNumber = "718570634";
    bankAccountData.bankName = "BankName";
    bankAccountData.routingNumber = "104000058";
    bankAccountData.accountOwnershipType = "Business";
    const response = await _service
        .editAccount()
        .withAccountNumber("718570634")
        .withBankAccountData(bankAccountData)
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
});
test("reset password", async () => {
    const response = await _service
        .resetPassword()
        .withAccountNumber("718570758")
        .execute();
    expect(response).toBeTruthy();
});
test("renew account", async () => {
    const response = await _service
        .renewAccount()
        .withRenewalAccountData(TestAccountData_1.TestAccountData.GetRenewAccountDetails())
        .withAccountNumber("718570759")
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
});
test.skip("disown account", async () => {
    const response = await _service
        .disownAccount()
        .withAccountNumber("718570772") // The account being "disowned" needs to have another affiliation set. Contact propayimplementations@tsys.com and they will set one if necessary
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
});
// Note : The transaction number of the chargeback you need to dispute. (can be verify at certification process)
test.failing("upload document chargeback", async () => {
    const docUploadData = new DocumentUploadData_1.DocumentUploadData();
    docUploadData.documentName = "TestDocCB_12345";
    docUploadData.transactionReference = "1";
    docUploadData.documentPath =
        "test/Integration/Gateways/ProPayConnector/Certifications/TestData/TestDocChargeback.docx";
    docUploadData.DocumentPath(docUploadData.documentPath);
    const response = await _service
        .uploadDocumentChargeback()
        .withAccountNumber("718569967") //("718567300")
        .withDocumentUploadData(docUploadData)
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
});
test("upload document", async () => {
    const docUploadData = new DocumentUploadData_1.DocumentUploadData();
    docUploadData.documentName = "TestDoc_12345";
    docUploadData.docCategory = "Verification";
    docUploadData.documentPath =
        "test/Integration/Gateways/ProPayConnector/Certifications/TestData/TestDoc.docx";
    docUploadData.DocumentPath(docUploadData.documentPath);
    const response = await _service
        .uploadDocument()
        .withAccountNumber("718570858")
        .withDocumentUploadData(docUploadData)
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
});
test("obtain sSO key", async () => {
    const ssoRequestData = new SSORequestData_1.SSORequestData();
    ssoRequestData.referrerURL = "https://www.globalpaymentsinc.com/";
    ssoRequestData.iPAddress = "40.81.11.219";
    ssoRequestData.iPSubnetMask = "255.255.255.0";
    const response = await _service
        .obtainSSOKey()
        .withAccountNumber("718570860")
        .withSSORequestData(ssoRequestData)
        .execute();
    expect(response).toBeTruthy();
    expect("00").toBe(response.responseCode);
    expect(response.payFacData.authToken).toBeTruthy();
});
test.failing("update beneficial data", async () => {
    //Owners count shoud not be excedded 6
    const ownersInfo = TestAccountData_1.TestAccountData.GetBeneficialOwnerData();
    const response = await _service
        .updateBeneficialOwnershipInfo()
        .withAccountNumber("718570792")
        .withBeneficialOwnerData(ownersInfo)
        .execute();
    expect(response).toBeTruthy();
});
//# sourceMappingURL=ProPayAccountCertification.test.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../../src");
const address = new src_1.Address();
const check = new src_1.ECheck();
const config = new src_1.PorticoConfig();
beforeAll(() => {
    address.streetAddress1 = "123 Main St.";
    address.city = "Downtown";
    address.province = "NJ";
    address.postalCode = "12345";
    check.accountNumber = "1357902468";
    check.routingNumber = "122000030";
    check.checkType = src_1.CheckType.Personal;
    check.secCode = src_1.SecCode.PPD;
    check.accountType = src_1.AccountType.Checking;
    check.entryMode = src_1.EntryMethod.Manual;
    check.checkHolderName = "John Doe";
    check.driversLicenseNumber = "09876543210";
    check.driversLicenseState = "TX";
    check.phoneNumber = "8003214567";
    check.birthYear = "1997";
    check.ssnLast4 = "4321";
    check.checkName = "Genysis Chamber";
});
beforeEach(() => {
    config.secretApiKey = "skapi_cert_MTyMAQBiHVEAewvIzXVFcmUd2UcyBge_eCpaASUp0A";
    config.serviceUrl = "https://cert.api2.heartlandportico.com";
    src_1.ServicesContainer.configureService(config);
});
test("check sale", async () => {
    const response = await check
        .charge(11)
        .withCurrency("USD")
        .withAddress(address)
        .execute();
    expect(response).toBeTruthy();
    expect(response.responseCode).toBe("00");
});
test("check void from transaction id", async () => {
    const response = await check
        .charge(10)
        .withCurrency("USD")
        .withAddress(address)
        .execute();
    expect(response).toBeTruthy();
    expect(response.responseCode).toBe("00");
    const voidResponse = await src_1.Transaction.fromId(response.transactionId, src_1.PaymentMethodType.ACH)
        .void()
        .execute();
    expect(voidResponse).toBeTruthy();
    expect(voidResponse.responseCode).toBe("00");
});
//# sourceMappingURL=Ach.test.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../../src");
const config = new src_1.PorticoConfig();
const timeForId = new Date().getTime();
beforeAll(() => {
    config.secretApiKey = "skapi_cert_MXDMBQDwa3IAA4GV7NGMqQA_wFR3_TNeamFWoNUu_Q";
    src_1.ServicesContainer.configureService(config);
});
test("allow 5-part credentials", () => {
    const c = new src_1.PorticoConfig();
    c.username = "123456789";
    c.password = "$Test1234";
    c.siteId = "12345";
    c.deviceId = "123456";
    c.licenseId = "12345";
    src_1.ServicesContainer.configureService(c);
    expect(true).toBeTruthy();
});
describe("Recurring Payment Suite", () => {
    test("make PayPlan customer", async () => {
        const customer = new src_1.Customer();
        customer.id = "Customer" + timeForId;
        customer.firstName = "John";
        customer.lastName = "Doe";
        customer.status = "Active";
        customer.email = "john.doe@email.com";
        customer.address = new src_1.Address();
        customer.address.streetAddress1 = "123 Main St.";
        customer.address.city = "Dallas";
        customer.address.state = "TX";
        customer.address.postalCode = "98765";
        customer.address.country = "USA";
        customer.workPhone = "5551112222";
        const createdCustomer = await customer.create();
        expect(createdCustomer).toBeTruthy();
    });
    test("attach CC payment method to customer", async () => {
        const foundCustomer = (await src_1.Customer.find("Customer" + timeForId));
        expect(foundCustomer).toBeTruthy();
        const card = new src_1.CreditCardData();
        card.number = "4111111111111111";
        card.expMonth = "12";
        card.expYear = "2025";
        card.cvn = "123";
        const ccPaymentMethod = await foundCustomer
            .addPaymentMethod("Payment" + timeForId, card)
            .create();
        expect(ccPaymentMethod).toBeTruthy();
    });
    test("attach payment schedule to customer", async () => {
        const foundCcPaymentMethod = (await src_1.RecurringPaymentMethod.find("Payment" + timeForId));
        expect(foundCcPaymentMethod).toBeTruthy();
        const paymentSchedule = await foundCcPaymentMethod
            .addSchedule("Schedule" + timeForId)
            .withStartDate(new Date(2027, 1, 1))
            .withAmount(30.01)
            .withFrequency(src_1.ScheduleFrequency.Weekly)
            .withReprocessingCount(1)
            .withStatus("Active")
            .withEmailReceipt(src_1.EmailReceipt.Never)
            .create();
        expect(paymentSchedule).toBeTruthy();
    });
    test("edit/deactivate the schedule from above test", async () => {
        const foundSchedule = (await src_1.Schedule.find("Schedule" + timeForId));
        expect(foundSchedule).toBeTruthy();
        foundSchedule.status = "Inactive";
        expect(foundSchedule.saveChanges()).toBeTruthy();
    });
    test("find and charge payment method", async () => {
        const foundCcPaymentMethod = (await src_1.RecurringPaymentMethod.find("Payment" + timeForId));
        const chargeResponse = await foundCcPaymentMethod
            .charge(12.34)
            .withCurrency("USD")
            .execute();
        expect(chargeResponse.responseCode == "00").toBe(true);
    });
    test("find transactions from this new payment method", async () => {
        const foundCcPaymentMethod = (await src_1.RecurringPaymentMethod.find("Payment" + timeForId));
        const foundTransactions = await src_1.ReportingService.findTransactions()
            .where("PaymentMethodKey", foundCcPaymentMethod.key)
            .execute();
        expect(foundTransactions.length === 2).toBe(true); // one transaction was the CreditAccountVerify from creating the payment method
    });
});
//# sourceMappingURL=Recurring.test.js.map
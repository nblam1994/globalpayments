"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../../../src");
const Data_1 = require("../../../../Data");
const config = new src_1.PorticoConfig();
config.secretApiKey = "skapi_cert_MTyMAQBiHVEAewvIzXVFcmUd2UcyBge_eCpaASUp0A";
const address = new src_1.Address();
address.streetAddress1 = "123 Main St.";
address.city = "Downtown";
address.province = "NJ";
address.postalCode = "12345";
beforeAll(() => {
    src_1.ServicesContainer.configureService(config);
});
/// ACH Debit - Consumer
test("001 - web personal checking", () => {
    const check = Data_1.TestChecks.certification(src_1.SecCode.WEB, src_1.CheckType.Personal, src_1.AccountType.Checking);
    return new Promise((resolve, reject) => {
        check
            .charge(23.0)
            .withCurrency("USD")
            .withAddress(address)
            .execute()
            .then((response) => {
            expect(response).toBeTruthy();
            expect(response.responseCode).toBe("00");
            resolve();
        })
            .catch(reject);
    });
});
test("002 - web business checking", () => {
    const check = Data_1.TestChecks.certification(src_1.SecCode.WEB, src_1.CheckType.Business, src_1.AccountType.Checking);
    return new Promise((resolve, reject) => {
        check
            .charge(24.0)
            .withCurrency("USD")
            .withAddress(address)
            .execute()
            .then((response) => {
            expect(response).toBeTruthy();
            expect(response.responseCode).toBe("00");
            resolve();
        })
            .catch(reject);
    });
});
test("003 - web personal savings", () => {
    const check = Data_1.TestChecks.certification(src_1.SecCode.WEB, src_1.CheckType.Personal, src_1.AccountType.Savings);
    return new Promise((resolve, reject) => {
        check
            .charge(25.0)
            .withCurrency("USD")
            .withAddress(address)
            .execute()
            .then((response) => {
            expect(response).toBeTruthy();
            expect(response.responseCode).toBe("00");
            resolve();
        })
            .catch(reject);
    });
});
test("004 - web business savings", () => {
    const check = Data_1.TestChecks.certification(src_1.SecCode.WEB, src_1.CheckType.Business, src_1.AccountType.Savings);
    return new Promise((resolve, reject) => {
        check
            .charge(5.0)
            .withCurrency("USD")
            .withAddress(address)
            .execute()
            .then((response) => {
            expect(response).toBeTruthy();
            expect(response.responseCode).toBe("00");
            resolve();
        })
            .catch(reject);
    });
});
//# sourceMappingURL=MotoCheck.test.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../../../../src");
const config = new src_1.PorticoConfig();
config.secretApiKey = "skapi_cert_MTeSAQAfG1UA9qQDrzl-kz4toXvARyieptFwSKP24w";
config.serviceUrl = "https://cert.api2-c.heartlandportico.com";
beforeAll(() => {
    src_1.ServicesContainer.configureService(config);
});
test("report transaction details no transaction id", async () => {
    try {
        await src_1.ReportingService.transactionDetail("").execute();
    }
    catch (error) {
        expect(error).toBeInstanceOf(src_1.BuilderError);
        expect(error?.name).toBe("BuilderError");
        expect(-1 !== error?.message.indexOf("transactionId cannot be empty")).toBe(true);
    }
});
test("report transaction details with device id", async () => {
    try {
        await src_1.ReportingService.transactionDetail("1234567890")
            .withDeviceId("123456")
            .execute();
    }
    catch (error) {
        expect(error).toBeInstanceOf(src_1.BuilderError);
        expect(error?.name).toBe("BuilderError");
        expect(-1 !== error?.message.indexOf("deviceId cannot be set")).toBe(true);
    }
});
test("report transaction details with start date", async () => {
    try {
        await src_1.ReportingService.transactionDetail("1234567890")
            .withStartDate(new Date())
            .execute();
    }
    catch (error) {
        expect(error).toBeInstanceOf(src_1.BuilderError);
        expect(error?.name).toBe("BuilderError");
        expect(-1 !== error?.message.indexOf("startDate cannot be set")).toBe(true);
    }
});
test("report transaction details with end date", async () => {
    try {
        await src_1.ReportingService.transactionDetail("1234567890")
            .withEndDate(new Date())
            .execute();
    }
    catch (error) {
        expect(error).toBeInstanceOf(src_1.BuilderError);
        expect(error?.name).toBe("BuilderError");
        expect(-1 !== error?.message.indexOf("endDate cannot be set")).toBe(true);
    }
});
test("report activity with transaction id", async () => {
    try {
        await src_1.ReportingService.activity().withTransactionId("1234567890").execute();
    }
    catch (error) {
        expect(error).toBeInstanceOf(src_1.BuilderError);
        expect(error?.name).toBe("BuilderError");
        expect(-1 !== error?.message.indexOf("transactionId cannot be set")).toBe(true);
    }
});
//# sourceMappingURL=Validation.test.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GiftCard = void 0;
const __1 = require("../");
const PaymentMethod_1 = require("./PaymentMethod");
class GiftCard extends PaymentMethod_1.PaymentMethod {
    /**
     * Payment method value types
     *
     * @var string[]
     */
    static valueTypes = ["alias", "number", "token", "trackData"];
    /**
     * Payment method type
     *
     * @var PaymentMethodType
     */
    paymentMethodType = __1.PaymentMethodType.Gift;
    /**
     * Payment method PIN
     *
     * @var string
     */
    pin;
    /**
     * Payment method value
     *
     * @internal
     * @var string
     */
    value;
    /**
     * Payment method value type
     *
     * @internal
     * @var string
     */
    valueType;
    /**
     * Creates a new payment method
     *
     * @param string alias Alias to use
     *
     * @return GiftCard
     */
    static create(alias) {
        const card = new GiftCard();
        return new __1.AuthorizationBuilder(__1.TransactionType.Alias, card)
            .withAlias(__1.AliasAction.Create, alias)
            .execute()
            .then((response) => {
            if (response.responseCode === "00") {
                return response.giftCard;
            }
            throw new __1.ApiError(response.responseMessage);
        })
            .catch(() => {
            throw new __1.ApiError("Unable to create gift card alias");
        });
    }
    /**
     * Adds an alias to the payment method
     *
     * @param string alias Alias to add
     *
     * @return AuthorizationBuilder
     */
    addAlias(alias) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Alias, this).withAlias(__1.AliasAction.Add, alias);
    }
    /**
     * Activates the payment method with the given amount
     *
     * @param string|number amount Amount to add
     *
     * @return AuthorizationBuilder
     */
    activate(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Activate, this).withAmount(amount);
    }
    /**
     * Adds value to the payment method
     *
     * @param string|number amount Amount to add
     *
     * @return AuthorizationBuilder
     */
    addValue(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.AddValue, this).withAmount(amount);
    }
    /**
     * Inquires the balance of the payment method
     *
     * @param InquiryType inquiry Type of inquiry
     *
     * @return AuthorizationBuilder
     */
    balanceInquiry(inquiry) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Balance, this).withBalanceInquiryType(inquiry);
    }
    /**
     * Authorizes the payment method and captures the entire authorized amount
     *
     * @param string|number amount Amount to authorize
     *
     * @return AuthorizationBuilder
     */
    charge(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Sale, this).withAmount(amount);
    }
    /**
     * Deactivates the payment method
     *
     * @return AuthorizationBuilder
     */
    deactivate() {
        return new __1.AuthorizationBuilder(__1.TransactionType.Deactivate, this);
    }
    /**
     * Removes an alias to the payment method
     *
     * @param string alias Alias to remove
     *
     * @return AuthorizationBuilder
     */
    removeAlias(alias) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Alias, this).withAlias(__1.AliasAction.Delete, alias);
    }
    /**
     * Replaces the payment method with the given one
     *
     * @param GiftCard newCard Replacement gift card
     *
     * @return AuthorizationBuilder
     */
    replaceWith(newCard) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Replace, this).withReplacementCard(newCard);
    }
    /**
     * Reverses the payment method
     *
     * @param string|number amount Amount to reverse
     *
     * @return AuthorizationBuilder
     */
    reverse(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Reversal, this).withAmount(amount);
    }
    /**
     * Rewards the payment method
     *
     * @param string|number amount Amount to reward
     *
     * @return AuthorizationBuilder
     */
    rewards(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Reward, this).withAmount(amount);
    }
    get alias() {
        return this.value;
    }
    set alias(value) {
        this.value = value;
        this.valueType = "Alias";
    }
    get number() {
        return this.value;
    }
    set number(value) {
        this.value = value;
        this.valueType = "CardNbr";
    }
    get token() {
        return this.value;
    }
    set token(value) {
        this.value = value;
        this.valueType = "TokenValue";
    }
    get trackData() {
        return this.value;
    }
    set trackData(value) {
        this.value = value;
        this.valueType = "TrackData";
    }
}
exports.GiftCard = GiftCard;
//# sourceMappingURL=GiftCard.js.map
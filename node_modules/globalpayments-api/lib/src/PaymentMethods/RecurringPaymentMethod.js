"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecurringPaymentMethod = void 0;
const __1 = require("../");
const Entities_1 = require("../Entities");
class RecurringPaymentMethod extends Entities_1.RecurringEntity {
    address;
    commercialIndicator;
    customerKey;
    expirationDate;
    nameOnAccount;
    paymentMethodType = __1.PaymentMethodType.Recurring;
    paymentType;
    preferredPayment;
    status;
    taxType;
    lastFour;
    cardType;
    _paymentMethod;
    get paymentMethod() {
        return this._paymentMethod;
    }
    set paymentMethod(value) {
        const client = __1.ServicesContainer.instance().getRecurringClient();
        if (!client.supportsUpdatePaymentDetails) {
            throw new __1.UnsupportedTransactionError();
        }
        this._paymentMethod = value;
    }
    constructor(customerIdOrPaymentMethod, paymentId) {
        super();
        this.address = new __1.Address();
        if (customerIdOrPaymentMethod &&
            (typeof customerIdOrPaymentMethod === "string" ||
                customerIdOrPaymentMethod instanceof String)) {
            this.paymentType = "Credit Card";
            this.customerKey = customerIdOrPaymentMethod;
            if (paymentId) {
                this.key = paymentId;
            }
        }
        else if (customerIdOrPaymentMethod) {
            this._paymentMethod = customerIdOrPaymentMethod;
        }
    }
    authorize(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Auth, this)
            .withAmount(amount)
            .withOneTimePayment(true);
    }
    charge(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Sale, this)
            .withAmount(amount)
            .withOneTimePayment(true);
    }
    refund(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Refund, this).withAmount(amount);
    }
    verify() {
        return new __1.AuthorizationBuilder(__1.TransactionType.Verify, this);
    }
    addSchedule(scheduleId) {
        const schedule = new __1.Schedule(this.customerKey, this.key);
        schedule.id = scheduleId;
        return schedule;
    }
}
exports.RecurringPaymentMethod = RecurringPaymentMethod;
//# sourceMappingURL=RecurringPaymentMethod.js.map
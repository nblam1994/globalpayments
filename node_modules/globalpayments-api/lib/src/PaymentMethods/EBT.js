"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EBT = void 0;
const __1 = require("../");
const PaymentMethod_1 = require("./PaymentMethod");
class EBT extends PaymentMethod_1.PaymentMethod {
    paymentMethodType = __1.PaymentMethodType.EBT;
    pinBlock;
    /**
     * Authorizes the payment method and captures the entire authorized amount
     *
     * @param string|number amount Amount to authorize
     *
     * @return AuthorizationBuilder
     */
    charge(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Sale, this).withAmount(amount);
    }
    /**
     * Adds value to the payment method
     *
     * @param string|number amount Amount to add
     *
     * @return AuthorizationBuilder
     */
    addValue(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.AddValue, this).withAmount(amount);
    }
    /**
     * Inquires the balance of the payment method
     *
     * @param InquiryType inquiry Type of inquiry
     *
     * @return AuthorizationBuilder
     */
    balanceInquiry(inquiry = __1.InquiryType.Foodstamp) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Balance, this)
            .withBalanceInquiryType(inquiry)
            .withAmount(0);
    }
    benefitWithdrawal(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.BenefitWithDrawal, this)
            .withAmount(amount)
            .withCashBack(0);
    }
    /**
     * Refunds the payment method
     *
     * @param string|number amount Amount to refund
     *
     * @return AuthorizationBuilder
     */
    refund(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Refund, this).withAmount(amount);
    }
    /**
     * Reverses the payment method
     *
     * @param string|number amount Amount to reverse
     *
     * @return AuthorizationBuilder
     */
    reverse() {
        throw new __1.NotImplementedError();
    }
}
exports.EBT = EBT;
//# sourceMappingURL=EBT.js.map
import { Element } from "@azz/elementtree";
import { AuthorizationBuilder, Customer, HostedPaymentConfig, IPaymentGateway, IRecurringEntity, IRecurringService, ManagementBuilder, RecurringBuilder, Transaction, TransactionType } from "..";
import { XmlGateway } from "./XmlGateway";
import { GpEcomConfig } from "src/ServiceConfigs/Gateways/GpEcomConfig";
export declare class GpEcomConnector extends XmlGateway implements IPaymentGateway, IRecurringService {
    merchantId: string;
    accountId: string;
    sharedSecret: string;
    channel: string;
    rebatePassword: string;
    refundPassword: string;
    supportsHostedPayments: boolean;
    supportsRetrieval: boolean;
    supportsUpdatePaymentDetails: boolean;
    hostedPaymentConfig: HostedPaymentConfig;
    config: GpEcomConfig;
    constructor(config: GpEcomConfig);
    processAuthorization(builder: AuthorizationBuilder): Promise<Transaction>;
    manageTransaction(builder: ManagementBuilder): Promise<Transaction>;
    private executeProcess;
    serializeRequest(builder: AuthorizationBuilder): string;
    oldManageTransaction(builder: ManagementBuilder): Promise<Transaction>;
    processReport<T>(): Promise<T>;
    processRecurring<T extends IRecurringEntity>(builder: RecurringBuilder<T>): Promise<T>;
    protected buildEnvelope(transaction: Element): string;
    protected buildCustomer<T extends IRecurringEntity>(customer: Customer, builder: RecurringBuilder<T>): Element;
    protected mapResponse(rawResponse: string): Transaction;
    protected mapRecurringResponse<T extends IRecurringEntity>(rawResponse: string, builder: RecurringBuilder<T>): T;
    protected checkResponse(root: Element, acceptedCodes?: string[]): void;
    protected generateHash(timestamp: string, orderId: string, amount: string, currency: string, paymentData: string, verify?: boolean): string;
    protected mapAuthRequestType(builder: AuthorizationBuilder): string;
    protected mapManageRequestType(type: TransactionType): string;
    protected mapRecurringRequestType<T extends IRecurringEntity>(builder: RecurringBuilder<T>): "payer-new" | "card-new" | "schedule-new" | "payer-edit" | "card-update-card" | "card-cancel-card" | "schedule-get" | "schedule-search";
    protected numberFormat(amount: number | string): string;
    private mapAcceptedCodes;
}

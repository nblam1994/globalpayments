import { IPayFacProvider } from "./IPayFacProvider";
import { IPaymentGateway } from "./IPaymentGateway";
import { RestGateway } from "./RestGateway";
import { GpApiTokenResponse, Transaction } from "../../src/Entities";
import { AuthorizationBuilder, GpApiConfig, IDictionary, ManagementBuilder, ReportBuilder, Secure3dBuilder } from "../../src";
import { PayFacBuilder } from "src/Builders/PayFacBuilder";
export declare class GpApiConnector extends RestGateway implements IPaymentGateway, IPayFacProvider {
    static GP_API_VERSION: string;
    static IDEMPOTENCY_HEADER: string;
    private gpApiConfig;
    private accessToken;
    private builtInMerchantManagementService;
    supportsHostedPayments: boolean;
    supportsOpenBanking(): boolean;
    hasBuiltInMerchantManagementService(): boolean;
    constructor(config: GpApiConfig);
    /**
     * Get the SDK release version
     *
     * @return string|null
     */
    private getReleaseVersion;
    getVersion(): string;
    /**
     * Serializes and executes authorization transactions
     *
     * @param AuthorizationBuilder builder The transaction's builder
     *
     * @return Transaction
     */
    processAuthorization(builder: AuthorizationBuilder): Promise<Transaction>;
    signIn(): Promise<void>;
    getAccessToken(): Promise<GpApiTokenResponse>;
    manageTransaction(builder: ManagementBuilder): Promise<Transaction>;
    processReport<T>(builder: ReportBuilder<T>): Promise<T>;
    serializeRequest(builder: AuthorizationBuilder): string;
    processPayFac(builder: PayFacBuilder): Promise<Transaction>;
    private executeProcess;
    private getMerchantUrl;
    doTransaction(verb: string, endpoint: string, data?: string, queryStringParams?: IDictionary<string>, idempotencyKey?: string): Promise<any>;
    processPassThrough(jsonRequest: string): Promise<string>;
    processSecure3d(builder: Secure3dBuilder): Promise<Transaction>;
}

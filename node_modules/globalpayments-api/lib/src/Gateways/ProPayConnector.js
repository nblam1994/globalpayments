"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProPayConnector = void 0;
const Enums_1 = require("../Entities/Enums");
const XmlGateway_1 = require("./XmlGateway");
const elementtree_1 = require("@azz/elementtree");
const BusinessData_1 = require("../Entities/ProFac/BusinessData");
const UserPersonalData_1 = require("../Entities/ProFac/UserPersonalData");
const AccountPermissions_1 = require("../Entities/ProFac/AccountPermissions");
const GrossBillingInformation_1 = require("../Entities/ProFac/GrossBillingInformation");
const Entities_1 = require("../Entities");
const PayFacResponseData_1 = require("../Entities/ProFac/PayFacResponseData");
const BankAccountData_1 = require("../Entities/ProFac/BankAccountData");
const AccountBalanceResponseData_1 = require("../Entities/ProFac/AccountBalanceResponseData");
const BeneficialOwnerDataResult_1 = require("../Entities/ProFac/BeneficialOwnerDataResult");
const fs = __importStar(require("fs"));
class ProPayConnector extends XmlGateway_1.XmlGateway {
    config;
    certStr;
    termID;
    x509CertificatePath;
    x509CertStr;
    selfSignedCert;
    processPayFac(builder) {
        const transaction = (0, elementtree_1.Element)("XMLRequest");
        // Credentials
        (0, elementtree_1.SubElement)(transaction, "certStr").append((0, elementtree_1.CData)(this.certStr.toString()));
        (0, elementtree_1.SubElement)(transaction, "termid").append((0, elementtree_1.CData)(this.termID));
        (0, elementtree_1.SubElement)(transaction, "class").append((0, elementtree_1.CData)("partner"));
        //Transaction
        const xmlTrans = (0, elementtree_1.SubElement)(transaction, "XMLTrans");
        (0, elementtree_1.SubElement)(xmlTrans, "transType").append((0, elementtree_1.CData)(this.mapRequestType(builder)));
        this.HydrateAccountDetails(xmlTrans, builder);
        return this.doTransaction(new elementtree_1.ElementTree(transaction).write()).then((response) => this.mapResponse(builder, response));
    }
    HydrateAccountDetails(xmlTrans, builder) {
        this.UpdateGatewaySettings(builder);
        // common fields
        this.hydrateCommonFields(xmlTrans, builder);
        if (builder.password != null) {
            (0, elementtree_1.SubElement)(xmlTrans, "password").append((0, elementtree_1.CData)(builder.password));
        }
        if (builder.accountPermissions != null) {
            this.HydrateAccountPermissions(xmlTrans, builder.accountPermissions);
        }
        if (builder.userPersonalData != null) {
            this.HydrateUserPersonalData(xmlTrans, builder.userPersonalData);
        }
        if (builder.businessData != null) {
            this.HydrateBusinessData(xmlTrans, builder.businessData);
        }
        this.HydrateBankDetails(xmlTrans, builder);
        if (builder.mailingAddressInformation != null ||
            builder.mailingAddressInformation != undefined) {
            this.HydrateMailAddress(xmlTrans, builder.mailingAddressInformation);
        }
        if (builder.threatRiskData != null) {
            this.HydrateThreatRiskData(xmlTrans, builder.threatRiskData);
        }
        if (builder.significantOwnerData != null) {
            this.HydrateSignificantOwnerData(xmlTrans, builder.significantOwnerData);
        }
        if (builder.timeZone && builder.timeZone.trim()) {
            (0, elementtree_1.SubElement)(xmlTrans, "TimeZone").append((0, elementtree_1.CData)(builder.timeZone));
        }
        if (builder.deviceData != null) {
            this.HydrateDeviceData(xmlTrans, builder.deviceData);
        }
        if (builder.beneficialOwnerData != null ||
            builder.beneficialOwnerData != undefined) {
            this.HydrateBeneficialOwnerData(xmlTrans, builder.beneficialOwnerData);
        }
        if (builder.grossBillingInformation != null) {
            this.HydrateGrossBillingData(xmlTrans, builder.grossBillingInformation);
        }
        if (builder.renewalAccountData != null) {
            this.HydrateAccountRenewDetails(xmlTrans, builder.renewalAccountData);
        }
        if (builder.FlashFundsPaymentCardData != null) {
            this.HydrateFlashFundsPaymentCardData(xmlTrans, builder.FlashFundsPaymentCardData);
        }
        if (builder.documentUploadData != null) {
            this.HydrateDocumentUploadData(xmlTrans, builder.TransactionType, builder.documentUploadData);
        }
        if (builder.sSORequestData != null) {
            this.HydrateSSORequestData(xmlTrans, builder.sSORequestData);
        }
        if (builder.orderDevice != null) {
            this.HydrateOrderDeviceData(xmlTrans, builder.orderDevice);
        }
        if (builder.orderDeviceData != null) {
            this.HydrateOrderDeviceDetails(xmlTrans, builder.orderDeviceData);
        }
        this.HydrateBankAccountOwnershipData(xmlTrans, builder);
    }
    hydrateCommonFields(xmlTrans, builder) {
        const elementMap = {
            accountNum: builder.accountNumber ? builder.accountNumber : "",
            amount: builder.amount ? builder.amount : "",
            recAccntNum: builder.receivingAccountNumber
                ? builder.receivingAccountNumber
                : "",
            allowPending: builder.allowPending == true ? "Y" : "",
            ccAmount: builder.cCAmount ? builder.cCAmount : "",
            requireCCRefund: builder.requireCCRefund == true
                ? "Y"
                : builder.requireCCRefund == false
                    ? "N"
                    : "",
            transNum: builder.transNum ? builder.transNum : "",
            gatewayTransactionId: builder.gatewayTransactionId
                ? builder.gatewayTransactionId
                : "",
            globaltransId: builder.globaltransId ? builder.globaltransId : "",
            globalTransSource: builder.globalTransSource
                ? builder.globalTransSource
                : "",
            cardBrandTransactionId: builder.cardBrandTransactionId
                ? builder.cardBrandTransactionId
                : "",
        };
        this.createNewElements(xmlTrans, elementMap);
    }
    HydrateBankAccountOwnershipData(xmlTrans, builder) {
        if (builder.primaryBankAccountOwner != null ||
            builder.secondaryBankAccountOwner != null) {
            const ownersDataTag = (0, elementtree_1.SubElement)(xmlTrans, "BankAccountOwnerData");
            if (builder.primaryBankAccountOwner != null) {
                const primaryOwnerTag = (0, elementtree_1.SubElement)(ownersDataTag, "PrimaryBankAccountOwner");
                (0, elementtree_1.SubElement)(primaryOwnerTag, "FirstName").text =
                    builder.primaryBankAccountOwner.firstName;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "LastName").text =
                    builder.primaryBankAccountOwner.lastName;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "Address1").text =
                    builder.primaryBankAccountOwner.ownerAddress?.streetAddress1;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "Address2").text =
                    builder.primaryBankAccountOwner.ownerAddress.streetAddress2;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "Address3").text =
                    builder.primaryBankAccountOwner.ownerAddress.streetAddress3;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "City").text =
                    builder.primaryBankAccountOwner.ownerAddress.city;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "StateProvince").text =
                    builder.primaryBankAccountOwner.ownerAddress.state;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "PostalCode").text =
                    builder.primaryBankAccountOwner.ownerAddress.postalCode;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "Country").text =
                    builder.primaryBankAccountOwner.ownerAddress.country;
                (0, elementtree_1.SubElement)(primaryOwnerTag, "Phone").text =
                    builder.primaryBankAccountOwner.phoneNumber;
            }
            if (builder.secondaryBankAccountOwner != null) {
                const secondaryOwnerTag = (0, elementtree_1.SubElement)(ownersDataTag, "SecondaryBankAccountOwner");
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "FirstName").text =
                    builder.secondaryBankAccountOwner.firstName;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "LastName").text =
                    builder.secondaryBankAccountOwner.lastName;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "Address1").text =
                    builder.secondaryBankAccountOwner.ownerAddress?.streetAddress1;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "Address2").text =
                    builder.secondaryBankAccountOwner.ownerAddress.streetAddress2;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "Address3").text =
                    builder.secondaryBankAccountOwner.ownerAddress.streetAddress3;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "City").text =
                    builder.secondaryBankAccountOwner.ownerAddress.city;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "StateProvince").text =
                    builder.secondaryBankAccountOwner.ownerAddress.state;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "PostalCode").text =
                    builder.secondaryBankAccountOwner.ownerAddress.postalCode;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "Country").text =
                    builder.secondaryBankAccountOwner.ownerAddress.country;
                (0, elementtree_1.SubElement)(secondaryOwnerTag, "Phone").text =
                    builder.secondaryBankAccountOwner.phoneNumber;
            }
        }
    }
    HydrateMailAddress(xmlTrans, mailingAddressInformation) {
        (0, elementtree_1.SubElement)(xmlTrans, "mailAddr").append((0, elementtree_1.CData)(mailingAddressInformation?.streetAddress1));
        (0, elementtree_1.SubElement)(xmlTrans, "mailApt").append((0, elementtree_1.CData)(mailingAddressInformation?.streetAddress2));
        (0, elementtree_1.SubElement)(xmlTrans, "mailAddr3").append((0, elementtree_1.CData)(mailingAddressInformation?.streetAddress3));
        (0, elementtree_1.SubElement)(xmlTrans, "mailCity").append((0, elementtree_1.CData)(mailingAddressInformation?.city));
        (0, elementtree_1.SubElement)(xmlTrans, "mailCountry").append((0, elementtree_1.CData)(mailingAddressInformation?.country));
        (0, elementtree_1.SubElement)(xmlTrans, "mailState").append((0, elementtree_1.CData)(mailingAddressInformation?.state));
        (0, elementtree_1.SubElement)(xmlTrans, "mailZip").append((0, elementtree_1.CData)(mailingAddressInformation?.postalCode));
    }
    HydrateBankDetails(xmlTrans, builder) {
        if (builder.creditCardInformation != null) {
            (0, elementtree_1.SubElement)(xmlTrans, "NameOnCard").append((0, elementtree_1.CData)(builder.creditCardInformation.cardHolderName));
            (0, elementtree_1.SubElement)(xmlTrans, "ccNum").append((0, elementtree_1.CData)(builder.creditCardInformation.number));
            (0, elementtree_1.SubElement)(xmlTrans, "expDate").append((0, elementtree_1.CData)(builder.creditCardInformation.getShortExpiry()));
        }
        if (builder.aCHInformation != null) {
            (0, elementtree_1.SubElement)(xmlTrans, "PaymentBankAccountNumber").append((0, elementtree_1.CData)(builder.aCHInformation.accountNumber));
            (0, elementtree_1.SubElement)(xmlTrans, "PaymentBankRoutingNumber").append((0, elementtree_1.CData)(builder.aCHInformation.routingNumber));
            (0, elementtree_1.SubElement)(xmlTrans, "PaymentBankAccountType").append((0, elementtree_1.CData)(builder.aCHInformation.accountType));
        }
        if (builder.bankAccountData != null) {
            (0, elementtree_1.SubElement)(xmlTrans, "AccountCountryCode").append((0, elementtree_1.CData)(builder.bankAccountData.accountCountryCode));
            (0, elementtree_1.SubElement)(xmlTrans, "accountName").append((0, elementtree_1.CData)(builder.bankAccountData.accountName));
            (0, elementtree_1.SubElement)(xmlTrans, "AccountNumber").append((0, elementtree_1.CData)(builder.bankAccountData.accountNumber));
            (0, elementtree_1.SubElement)(xmlTrans, "AccountOwnershipType").append((0, elementtree_1.CData)(builder.bankAccountData.accountOwnershipType));
            (0, elementtree_1.SubElement)(xmlTrans, "AccountType").append((0, elementtree_1.CData)(builder.bankAccountData.accountType));
            (0, elementtree_1.SubElement)(xmlTrans, "BankName").append((0, elementtree_1.CData)(builder.bankAccountData.bankName));
            (0, elementtree_1.SubElement)(xmlTrans, "RoutingNumber").append((0, elementtree_1.CData)(builder.bankAccountData.routingNumber));
        }
        if (builder.secondaryBankInformation != null) {
            (0, elementtree_1.SubElement)(xmlTrans, "SecondaryAccountCountryCode").append((0, elementtree_1.CData)(builder.secondaryBankInformation.accountCountryCode));
            (0, elementtree_1.SubElement)(xmlTrans, "SecondaryAccountName").append((0, elementtree_1.CData)(builder.secondaryBankInformation.accountName));
            (0, elementtree_1.SubElement)(xmlTrans, "SecondaryAccountNumber").append((0, elementtree_1.CData)(builder.secondaryBankInformation.accountNumber));
            (0, elementtree_1.SubElement)(xmlTrans, "SecondaryAccountOwnershipType").append((0, elementtree_1.CData)(builder.secondaryBankInformation.accountOwnershipType));
            (0, elementtree_1.SubElement)(xmlTrans, "SecondaryAccountType").append((0, elementtree_1.CData)(builder.secondaryBankInformation.accountType));
            (0, elementtree_1.SubElement)(xmlTrans, "SecondaryBankName").append((0, elementtree_1.CData)(builder.secondaryBankInformation.bankName));
            (0, elementtree_1.SubElement)(xmlTrans, "SecondaryRoutingNumber").append((0, elementtree_1.CData)(builder.secondaryBankInformation.routingNumber));
        }
    }
    HydrateBusinessData(xmlTrans, businessData) {
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessLegalName").append((0, elementtree_1.CData)(businessData.businessLegalName));
        (0, elementtree_1.SubElement)(xmlTrans, "DoingBusinessAs").append((0, elementtree_1.CData)(businessData.doingBusinessAs));
        (0, elementtree_1.SubElement)(xmlTrans, "EIN").append((0, elementtree_1.CData)(businessData.employerIdentificationNumber));
        (0, elementtree_1.SubElement)(xmlTrans, "MCCCode").append((0, elementtree_1.CData)(businessData.merchantCategoryCode));
        (0, elementtree_1.SubElement)(xmlTrans, "WebsiteURL").append((0, elementtree_1.CData)(businessData.websiteURL));
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessDesc").append((0, elementtree_1.CData)(businessData.businessDescription));
        (0, elementtree_1.SubElement)(xmlTrans, "MonthlyBankCardVolume").append((0, elementtree_1.CData)(businessData.monthlyBankCardVolume));
        (0, elementtree_1.SubElement)(xmlTrans, "AverageTicket").append((0, elementtree_1.CData)(businessData.averageTicket));
        (0, elementtree_1.SubElement)(xmlTrans, "HighestTicket").append((0, elementtree_1.CData)(businessData.highestTicket));
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessAddress").append((0, elementtree_1.CData)(businessData.businessAddress?.streetAddress1));
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessAddress2").append((0, elementtree_1.CData)(businessData.businessAddress.streetAddress2));
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessCity").append((0, elementtree_1.CData)(businessData.businessAddress.city));
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessCountry").append((0, elementtree_1.CData)(businessData.businessAddress.country));
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessState").append((0, elementtree_1.CData)(businessData.businessAddress.state));
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessZip").append((0, elementtree_1.CData)(businessData.businessAddress.postalCode));
        (0, elementtree_1.SubElement)(xmlTrans, "BusinessType").append((0, elementtree_1.CData)(businessData.businessType));
    }
    HydrateUserPersonalData(xmlTrans, userPersonalData) {
        (0, elementtree_1.SubElement)(xmlTrans, "firstName").append((0, elementtree_1.CData)(userPersonalData.firstName));
        (0, elementtree_1.SubElement)(xmlTrans, "mInitial").append((0, elementtree_1.CData)(userPersonalData.middleInitial));
        (0, elementtree_1.SubElement)(xmlTrans, "lastName").append((0, elementtree_1.CData)(userPersonalData.lastName));
        (0, elementtree_1.SubElement)(xmlTrans, "dob").append((0, elementtree_1.CData)(userPersonalData.dateOfBirth));
        (0, elementtree_1.SubElement)(xmlTrans, "ssn").append((0, elementtree_1.CData)(userPersonalData.sSN));
        if (userPersonalData.sourceEmail != null)
            (0, elementtree_1.SubElement)(xmlTrans, "sourceEmail").append((0, elementtree_1.CData)(userPersonalData.sourceEmail));
        (0, elementtree_1.SubElement)(xmlTrans, "dayPhone").append((0, elementtree_1.CData)(userPersonalData.dayPhone));
        (0, elementtree_1.SubElement)(xmlTrans, "evenPhone").append((0, elementtree_1.CData)(userPersonalData.eveningPhone));
        (0, elementtree_1.SubElement)(xmlTrans, "NotificationEmail").append((0, elementtree_1.CData)(userPersonalData.notificationEmail));
        (0, elementtree_1.SubElement)(xmlTrans, "currencyCode").append((0, elementtree_1.CData)(userPersonalData.currencyCode));
        (0, elementtree_1.SubElement)(xmlTrans, "tier").append((0, elementtree_1.CData)(userPersonalData.tier));
        if (userPersonalData.externalID != null)
            (0, elementtree_1.SubElement)(xmlTrans, "externalId").append((0, elementtree_1.CData)(userPersonalData.externalID));
        // user address
        if (userPersonalData.userAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "addr").append((0, elementtree_1.CData)(userPersonalData.userAddress.streetAddress1));
        if (userPersonalData.userAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "aptNum").append((0, elementtree_1.CData)(userPersonalData.userAddress.streetAddress2));
        if (userPersonalData.userAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "addr3").append((0, elementtree_1.CData)(userPersonalData.userAddress.streetAddress3));
        if (userPersonalData.userAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "city").append((0, elementtree_1.CData)(userPersonalData.userAddress.city));
        if (userPersonalData.userAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "state").append((0, elementtree_1.CData)(userPersonalData.userAddress.state));
        if (userPersonalData.userAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "zip").append((0, elementtree_1.CData)(userPersonalData.userAddress.postalCode));
        if (userPersonalData.userAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "country").append((0, elementtree_1.CData)(userPersonalData.userAddress.country));
        // mailing address
        if (userPersonalData.mailingAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "mailAddr").append((0, elementtree_1.CData)(userPersonalData.mailingAddress.streetAddress1));
        if (userPersonalData.mailingAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "mailApt").append((0, elementtree_1.CData)(userPersonalData.mailingAddress.streetAddress2));
        if (userPersonalData.mailingAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "mailAddr3").append((0, elementtree_1.CData)(userPersonalData.mailingAddress.streetAddress3));
        if (userPersonalData.mailingAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "mailCity").append((0, elementtree_1.CData)(userPersonalData.mailingAddress.city));
        if (userPersonalData.mailingAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "mailCountry").append((0, elementtree_1.CData)(userPersonalData.mailingAddress.state));
        if (userPersonalData.mailingAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "mailState").append((0, elementtree_1.CData)(userPersonalData.mailingAddress.postalCode));
        if (userPersonalData.mailingAddress != null)
            (0, elementtree_1.SubElement)(xmlTrans, "mailZip").append((0, elementtree_1.CData)(userPersonalData.mailingAddress.country));
        (0, elementtree_1.SubElement)(xmlTrans, "IpSignup").append((0, elementtree_1.CData)(userPersonalData.ipSignup));
        (0, elementtree_1.SubElement)(xmlTrans, "USCitizen").append((0, elementtree_1.CData)(userPersonalData.uSCitizen == true
            ? "true"
            : userPersonalData.uSCitizen == false
                ? "false"
                : ""));
        (0, elementtree_1.SubElement)(xmlTrans, "bOAttestation").append((0, elementtree_1.CData)(userPersonalData.bOAttestation == true
            ? "true"
            : userPersonalData.bOAttestation == false
                ? "false"
                : ""));
        (0, elementtree_1.SubElement)(xmlTrans, "TermsAcceptanceIP").append((0, elementtree_1.CData)(userPersonalData.termsAcceptanceIP));
        (0, elementtree_1.SubElement)(xmlTrans, "TermsAcceptanceTimeStamp").append((0, elementtree_1.CData)(userPersonalData.termsAcceptanceTimeStamp));
        (0, elementtree_1.SubElement)(xmlTrans, "TermsVersion").append((0, elementtree_1.CData)(userPersonalData.termsVersion == null
            ? ""
            : userPersonalData.termsVersion.toString()));
    }
    HydrateThreatRiskData(xmlTrans, threatRiskData) {
        (0, elementtree_1.SubElement)(xmlTrans, "MerchantSourceip").append((0, elementtree_1.CData)(threatRiskData?.merchantSourceIP));
        (0, elementtree_1.SubElement)(xmlTrans, "ThreatMetrixPolicy").append((0, elementtree_1.CData)(threatRiskData?.threatMetrixPolicy));
        (0, elementtree_1.SubElement)(xmlTrans, "ThreatMetrixSessionid").append((0, elementtree_1.CData)(threatRiskData?.threatMetrixSessionID));
    }
    HydrateSignificantOwnerData(xmlTrans, significantOwnerData) {
        (0, elementtree_1.SubElement)(xmlTrans, "AuthorizedSignerFirstName").append((0, elementtree_1.CData)(significantOwnerData?.authorizedSignerFirstName));
        (0, elementtree_1.SubElement)(xmlTrans, "AuthorizedSignerLastName").append((0, elementtree_1.CData)(significantOwnerData?.authorizedSignerLastName));
        (0, elementtree_1.SubElement)(xmlTrans, "AuthorizedSignerTitle").append((0, elementtree_1.CData)(significantOwnerData?.authorizedSignerTitle));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerFirstName").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.firstName));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerLastName").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.lastName));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerSSN").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.sSN));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerDateOfBirth").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.DateOfBirth));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerStreetAddress").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.ownerAddress?.streetAddress1));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerCityName").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.ownerAddress.city));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerRegionCode").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.ownerAddress.state));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerPostalCode").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.ownerAddress.postalCode));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerCountryCode").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.ownerAddress.country));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerTitle").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.title));
        (0, elementtree_1.SubElement)(xmlTrans, "SignificantOwnerPercentage").append((0, elementtree_1.CData)(significantOwnerData?.significantOwner.percentage));
    }
    HydrateAccountPermissions(xmlTrans, accountPermissions) {
        if (accountPermissions.aCHIn != null)
            (0, elementtree_1.SubElement)(xmlTrans, "ACHIn").append((0, elementtree_1.CData)(accountPermissions.aCHIn == true ? "Y" : "N"));
        if (accountPermissions.aCHOut != null)
            (0, elementtree_1.SubElement)(xmlTrans, "ACHOut").append((0, elementtree_1.CData)(accountPermissions.aCHOut == true ? "Y" : "N"));
        if (accountPermissions.cCProcessing != null)
            (0, elementtree_1.SubElement)(xmlTrans, "CCProcessing").append((0, elementtree_1.CData)(accountPermissions.cCProcessing == true ? "Y" : "N"));
        if (accountPermissions.proPayIn != null)
            (0, elementtree_1.SubElement)(xmlTrans, "ProPayIn").append((0, elementtree_1.CData)(accountPermissions.proPayIn == true ? "Y" : "N"));
        if (accountPermissions.proPayOut != null)
            (0, elementtree_1.SubElement)(xmlTrans, "ProPayOut").append((0, elementtree_1.CData)(accountPermissions.proPayOut == true ? "Y" : "N"));
        if (accountPermissions.creditCardMonthLimit != null)
            (0, elementtree_1.SubElement)(xmlTrans, "CreditCardMonthLimit").append((0, elementtree_1.CData)(accountPermissions.creditCardMonthLimit));
        if (accountPermissions.creditCardTransactionLimit != null)
            (0, elementtree_1.SubElement)(xmlTrans, "CreditCardTransactionLimit").append((0, elementtree_1.CData)(accountPermissions.creditCardTransactionLimit));
        if (accountPermissions.merchantOverallStatus != null)
            (0, elementtree_1.SubElement)(xmlTrans, "MerchantOverallStatus").append((0, elementtree_1.CData)(String(accountPermissions.merchantOverallStatus)));
        if (accountPermissions.softLimitEnabled != null)
            (0, elementtree_1.SubElement)(xmlTrans, "SoftLimitEnabled", accountPermissions.softLimitEnabled == true ? "Y" : "N");
        if (accountPermissions.aCHPaymentSoftLimitEnabled != null)
            (0, elementtree_1.SubElement)(xmlTrans, "AchPaymentSoftLimitEnabled", accountPermissions.aCHPaymentSoftLimitEnabled == true ? "Y" : "N");
        if (accountPermissions.softLimitACHOffPercent != null)
            (0, elementtree_1.SubElement)(xmlTrans, "SoftLimitAchOffPercent", accountPermissions.softLimitACHOffPercent);
        if (accountPermissions.aCHPaymentACHOffPercent != null)
            (0, elementtree_1.SubElement)(xmlTrans, "AchPaymentAchOffPercent", accountPermissions.aCHPaymentACHOffPercent);
    }
    HydrateDeviceData(xmlTrans, deviceData) {
        const devices = (0, elementtree_1.SubElement)(xmlTrans, "Devices");
        if (deviceData.devices.length > 0) {
            deviceData.devices.forEach((deviceObj) => {
                const device = (0, elementtree_1.SubElement)(devices, "Device");
                (0, elementtree_1.SubElement)(device, "Name").append((0, elementtree_1.CData)(deviceObj.name));
                (0, elementtree_1.SubElement)(device, "Quantity").append((0, elementtree_1.CData)(deviceObj.quantity == null ? "0" : String(deviceObj.quantity)));
                // if (deviceObj.attributes != null) {
                //     if (deviceObj.attributes.length > 0) {
                //         var attributes = subElement(device, "Attributes");
                //         deviceObj.attributes.forEach(attributeInfo => {
                //             var item = subElement(attributes, "Item");
                //             item.set("Name", attributeInfo.name);
                //             item.set("Value", attributeInfo.value);
                //         })
                //     }
                // }
            });
        }
    }
    HydrateBeneficialOwnerData(xmlTrans, beneficialOwnerData) {
        const ownerDetails = (0, elementtree_1.SubElement)(xmlTrans, "BeneficialOwnerData");
        (0, elementtree_1.SubElement)(ownerDetails, "OwnerCount").text =
            beneficialOwnerData?.ownersCount;
        if (Number(beneficialOwnerData?.ownersCount) > 0) {
            const ownersList = (0, elementtree_1.SubElement)(ownerDetails, "Owners");
            beneficialOwnerData.ownersList.forEach((ownerInfo) => {
                const newOwner = (0, elementtree_1.SubElement)(ownersList, "Owner");
                (0, elementtree_1.SubElement)(newOwner, "FirstName").text = ownerInfo.firstName;
                (0, elementtree_1.SubElement)(newOwner, "LastName").text = ownerInfo.lastName;
                (0, elementtree_1.SubElement)(newOwner, "Email").text = ownerInfo.email;
                (0, elementtree_1.SubElement)(newOwner, "SSN").text = ownerInfo.sSN;
                (0, elementtree_1.SubElement)(newOwner, "DateOfBirth").text = ownerInfo.DateOfBirth;
                (0, elementtree_1.SubElement)(newOwner, "Address").text =
                    ownerInfo.ownerAddress?.streetAddress1;
                (0, elementtree_1.SubElement)(newOwner, "City").text = ownerInfo.ownerAddress.city;
                (0, elementtree_1.SubElement)(newOwner, "State").text = ownerInfo.ownerAddress.state;
                (0, elementtree_1.SubElement)(newOwner, "Zip").text = ownerInfo.ownerAddress.postalCode;
                (0, elementtree_1.SubElement)(newOwner, "Country").text = ownerInfo.ownerAddress.country;
                (0, elementtree_1.SubElement)(newOwner, "Title").text = ownerInfo.title;
                if (ownerInfo.percentage != null)
                    (0, elementtree_1.SubElement)(newOwner, "Percentage").text = ownerInfo.percentage;
            });
        }
    }
    HydrateGrossBillingData(xmlTrans, grossBillingInformation) {
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleAddress").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleAddress?.streetAddress1));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleCity").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleAddress.city));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleState").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleAddress.state));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleZipCode").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleAddress.postalCode));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleCountry").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleAddress.country));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleCreditCardNumber").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleCreditCardData.Number));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleNameOnCard").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleCreditCardData.CardHolderName));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleCreditCardExpDate").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleCreditCardData.getShortExpiry()));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleAccountCountryCode").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleBankData.accountCountryCode));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleAccountHolderName").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleBankData.accountHolderName));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleAccountNumber").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleBankData.accountNumber));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleAccountType").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleBankData.accountType));
        (0, elementtree_1.SubElement)(xmlTrans, "GrossSettleRoutingNumber").append((0, elementtree_1.CData)(grossBillingInformation.grossSettleBankData.routingNumber));
    }
    HydrateAccountRenewDetails(xmlTrans, renewAccountData) {
        const elementMap = {
            tier: renewAccountData.tier,
            CVV2: renewAccountData.creditCard.cvn,
            ccNum: renewAccountData.creditCard.number,
            expDate: renewAccountData.creditCard.getShortExpiry(),
            zip: renewAccountData.zipCode,
            PaymentBankAccountNumber: renewAccountData.paymentBankAccountNumber,
            PaymentBankRoutingNumber: renewAccountData.paymentBankRoutingNumber,
            PaymentBankAccountType: renewAccountData.paymentBankAccountType,
        };
        this.createNewElements(xmlTrans, elementMap);
    }
    HydrateFlashFundsPaymentCardData(xmlTrans, cardData) {
        (0, elementtree_1.SubElement)(xmlTrans, "ccNum").append((0, elementtree_1.CData)(cardData.creditCard.number));
        (0, elementtree_1.SubElement)(xmlTrans, "expDate").append((0, elementtree_1.CData)(cardData.creditCard.getShortExpiry()));
        (0, elementtree_1.SubElement)(xmlTrans, "CVV2").append((0, elementtree_1.CData)(cardData.creditCard.cvn));
        (0, elementtree_1.SubElement)(xmlTrans, "cardholderName").append((0, elementtree_1.CData)(cardData.creditCard.cardHolderName));
        (0, elementtree_1.SubElement)(xmlTrans, "addr").append((0, elementtree_1.CData)(cardData.cardholderAddress?.streetAddress1));
        (0, elementtree_1.SubElement)(xmlTrans, "city").append((0, elementtree_1.CData)(cardData.cardholderAddress.city));
        (0, elementtree_1.SubElement)(xmlTrans, "state").append((0, elementtree_1.CData)(cardData.cardholderAddress.state));
        (0, elementtree_1.SubElement)(xmlTrans, "zip").append((0, elementtree_1.CData)(cardData.cardholderAddress.postalCode));
        (0, elementtree_1.SubElement)(xmlTrans, "country").append((0, elementtree_1.CData)(cardData.cardholderAddress.country));
    }
    HydrateDocumentUploadData(xmlTrans, transType, docUploadData) {
        const docNameTag = transType == Enums_1.TransactionType.UploadDocumentChargeback
            ? "DocumentName"
            : "documentName";
        const docTypeTag = transType == Enums_1.TransactionType.UploadDocumentChargeback
            ? "DocType"
            : "docType";
        (0, elementtree_1.SubElement)(xmlTrans, docNameTag).append((0, elementtree_1.CData)(docUploadData.documentName));
        if (docUploadData.transactionReference) {
            (0, elementtree_1.SubElement)(xmlTrans, "TransactionReference").append((0, elementtree_1.CData)(docUploadData.transactionReference));
        }
        else {
            ("");
        }
        if (docUploadData.docCategory) {
            (0, elementtree_1.SubElement)(xmlTrans, "DocCategory").append((0, elementtree_1.CData)(docUploadData.docCategory));
        }
        else {
            ("");
        }
        (0, elementtree_1.SubElement)(xmlTrans, docTypeTag).append((0, elementtree_1.CData)(docUploadData.docType));
        (0, elementtree_1.SubElement)(xmlTrans, "Document").append((0, elementtree_1.CData)(docUploadData.document));
    }
    HydrateSSORequestData(xmlTrans, ssoRequestData) {
        (0, elementtree_1.SubElement)(xmlTrans, "ReferrerUrl").append((0, elementtree_1.CData)(ssoRequestData.referrerURL));
        (0, elementtree_1.SubElement)(xmlTrans, "IpAddress").append((0, elementtree_1.CData)(ssoRequestData.iPAddress));
        (0, elementtree_1.SubElement)(xmlTrans, "IpSubnetMask").append((0, elementtree_1.CData)(ssoRequestData.iPSubnetMask));
    }
    HydrateOrderDeviceData(xmlTrans, orderDeviceData) {
        (0, elementtree_1.SubElement)(xmlTrans, "accntNum").append((0, elementtree_1.CData)(orderDeviceData.accountNum.toString()));
        (0, elementtree_1.SubElement)(xmlTrans, "shipTo").append((0, elementtree_1.CData)(orderDeviceData.shipTo));
        (0, elementtree_1.SubElement)(xmlTrans, "shipToContact").append((0, elementtree_1.CData)(orderDeviceData.shipToContact));
        (0, elementtree_1.SubElement)(xmlTrans, "shipToAddress").append((0, elementtree_1.CData)(orderDeviceData.shipToAddress));
        (0, elementtree_1.SubElement)(xmlTrans, "shipToAddress2").append((0, elementtree_1.CData)(orderDeviceData.shipToAddress2));
        (0, elementtree_1.SubElement)(xmlTrans, "shipToCity").append((0, elementtree_1.CData)(orderDeviceData.shipToCity));
        (0, elementtree_1.SubElement)(xmlTrans, "shipToState").append((0, elementtree_1.CData)(orderDeviceData.shipToState));
        (0, elementtree_1.SubElement)(xmlTrans, "shipToZip").append((0, elementtree_1.CData)(orderDeviceData.shipToZip));
        (0, elementtree_1.SubElement)(xmlTrans, "shipToPhone").append((0, elementtree_1.CData)(orderDeviceData.shipToPhone));
        (0, elementtree_1.SubElement)(xmlTrans, "cardholderName").append((0, elementtree_1.CData)(orderDeviceData.cardholderName));
        (0, elementtree_1.SubElement)(xmlTrans, "CcNum").append((0, elementtree_1.CData)(orderDeviceData.ccNum));
        (0, elementtree_1.SubElement)(xmlTrans, "ExpDate").append((0, elementtree_1.CData)(orderDeviceData.expDate));
        (0, elementtree_1.SubElement)(xmlTrans, "CVV2").append((0, elementtree_1.CData)(orderDeviceData.cVV2));
        (0, elementtree_1.SubElement)(xmlTrans, "billingZip").append((0, elementtree_1.CData)(orderDeviceData.billingZip));
    }
    HydrateOrderDeviceDetails(xmlTrans, orderDeviceData) {
        const devices = (0, elementtree_1.SubElement)(xmlTrans, "Devices");
        if (orderDeviceData.devices.length > 0) {
            orderDeviceData.devices.forEach((deviceObj) => {
                const device = (0, elementtree_1.SubElement)(devices, "Device");
                (0, elementtree_1.SubElement)(device, "Name").append((0, elementtree_1.CData)(deviceObj.name));
                (0, elementtree_1.SubElement)(device, "Quantity").append((0, elementtree_1.CData)(deviceObj.quantity == null ? "0" : String(deviceObj.quantity)));
                if (deviceObj.attributes != null) {
                    if (deviceObj.attributes.length > 0) {
                        const attributes = (0, elementtree_1.SubElement)(device, "Attributes");
                        deviceObj.attributes.forEach((attributeInfo) => {
                            const item = (0, elementtree_1.SubElement)(attributes, "Item");
                            item.set("Name", attributeInfo.name);
                            item.set("Value", attributeInfo.value);
                        });
                    }
                }
            });
        }
    }
    UpdateGatewaySettings(builder) {
        const certTransactions = [
            Enums_1.TransactionType.EditAccount,
            Enums_1.TransactionType.ObtainSSOKey,
            Enums_1.TransactionType.UpdateBankAccountOwnership,
            Enums_1.TransactionType.AddFunds,
            Enums_1.TransactionType.AddCardFlashFunds,
        ];
        if (certTransactions.includes(builder.transactionType)) {
            this.headers["X509Certificate"] = this.setX509Certificate();
        }
    }
    createNewElements(xmlns, mapping) {
        for (const [key, value] of Object.entries(mapping)) {
            if (value != null && value != "")
                (0, elementtree_1.SubElement)(xmlns, key).append((0, elementtree_1.CData)(`${value}`));
        }
    }
    setX509Certificate() {
        const x509RawData = fs.readFileSync(this.selfSignedCert);
        return x509RawData.toString().replace(/(\r\n|\n|\r)/gm, "");
    }
    mapRequestType(builder) {
        switch (builder.transactionType) {
            case Enums_1.TransactionType.CreateAccount:
                return "01";
            case Enums_1.TransactionType.EditAccount:
                return "42";
            case Enums_1.TransactionType.ResetPassword:
                return "32";
            case Enums_1.TransactionType.RenewAccount:
                return "39";
            case Enums_1.TransactionType.UpdateBeneficialOwnership:
                return "44";
            case Enums_1.TransactionType.DisownAccount:
                return "41";
            case Enums_1.TransactionType.UploadDocumentChargeback:
                return "46";
            case Enums_1.TransactionType.UploadDocument:
                return "47";
            case Enums_1.TransactionType.ObtainSSOKey:
                return "300";
            case Enums_1.TransactionType.UpdateBankAccountOwnership:
                return "210";
            case Enums_1.TransactionType.AddFunds:
                return "37";
            case Enums_1.TransactionType.SweepFunds:
                return "38";
            case Enums_1.TransactionType.AddCardFlashFunds:
                return "209";
            case Enums_1.TransactionType.PushMoneyFlashFunds:
                return "45";
            case Enums_1.TransactionType.DisburseFunds:
                return "02";
            case Enums_1.TransactionType.SpendBack:
                return "11";
            case Enums_1.TransactionType.ReverseSplitPay:
                return "43";
            case Enums_1.TransactionType.SplitFunds:
                return "16";
            case Enums_1.TransactionType.GetAccountDetails:
                // We are using the Additional TransactionModifier to differentiate between GetAccountDetails and GetAccountDetailsEnhanced
                if (builder.transactionModifier == Enums_1.TransactionModifier.Additional) {
                    return "19";
                }
                // If the TransactionModifier isn't "Additional" then it is either "None" or an unsupported value that should be treated as "None"
                return "13";
            case Enums_1.TransactionType.GetAccountBalance:
                return "14";
            case Enums_1.TransactionType.OrderDevice:
                return "430";
            default:
                throw new Error("Unsupported transaction exception.");
        }
    }
    mapResponse(builder, rawResponse) {
        const xmlTransaction = (0, elementtree_1.XML)(rawResponse).find(".//XMLTrans");
        const responseCode = xmlTransaction.findtext(".//status");
        if (responseCode != "00" && responseCode != "66") {
            throw new Error("Unexpected Gateway Response: " + String(responseCode));
        }
        const proPayResponse = this.populateProPayResponse(builder, xmlTransaction);
        const response = new Entities_1.Transaction();
        response.payFacData = proPayResponse;
        response.responseCode = responseCode;
        return response;
    }
    populateProPayResponse(builder, root) {
        if (builder.transactionType == Enums_1.TransactionType.GetAccountDetails &&
            builder.transactionModifier == Enums_1.TransactionModifier.Additional) {
            return this.populateResponseWithEnhancedAccountDetails(root);
        }
        else {
            const responseData = new PayFacResponseData_1.PayFacResponseData();
            responseData.accountNumber = this.getAccountNumberFromResponse(root);
            responseData.recAccountNum = root.findtext(".//recAccntNum");
            responseData.password = root.findtext(".//password");
            responseData.amount = root.findtext(".//amount");
            responseData.transNum = root.findtext(".//transNum");
            responseData.pending = root.findtext(".//pending");
            responseData.secondaryAmount = root.findtext(".//secondaryAmount");
            responseData.secondaryTransNum = root.findtext(".//secondaryTransNum");
            responseData.sourceEmail = root.findtext(".//sourceEmail");
            responseData.authToken = root.findtext(".//AuthToken");
            responseData.beneficialOwnerDataResults =
                this.getBeneficialOwnerDataResultsFromResponse(root);
            responseData.accountStatus = root.findtext(".//accntStatus");
            responseData.physicalAddress = this.getPhysicalAddressFromResponse(root);
            responseData.affiliation = root.findtext(".//affiliation");
            responseData.aPIReady = root.findtext(".//apiReady");
            responseData.currencyCode = root.findtext(".//currencyCode");
            responseData.expiration = root.findtext(".//expiration");
            responseData.signupDate = root.findtext(".//signupDate");
            responseData.tier = root.findtext(".//tier");
            responseData.visaCheckoutMerchantID = root.findtext(".//visaCheckoutMerchantId");
            responseData.creditCardTransactionLimit = root.findtext(".//CreditCardTransactionLimit");
            responseData.creditCardMonthLimit = root.findtext(".//CreditCardMonthLimit");
            responseData.aCHPaymentPerTranLimit = root.findtext(".//ACHPaymentPerTranLimit");
            responseData.aCHPaymentMonthLimit = root.findtext(".//ACHPaymentMonthLimit");
            responseData.creditCardMonthlyVolume = root.findtext(".//CreditCardMonthlyVolume");
            responseData.aCHPaymentMonthlyVolume = root.findtext(".//ACHPaymentMonthlyVolume");
            responseData.reserveBalance = root.findtext(".//ReserveBalance");
            responseData.masterPassCheckoutMerchantID = root.findtext(".//MasterPassCheckoutMerchantId");
            responseData.pendingAmount = root.findtext(".//pendingAmount");
            responseData.reserveAmount = root.findtext(".//reserveAmount>");
            responseData.aCHOut = this.getACHOutBalanceInfoFromResponse(root);
            responseData.flashFunds = this.getFlashFundsBalanceInfoFromResponse(root);
            return responseData;
        }
    }
    populateResponseWithEnhancedAccountDetails(root) {
        const responseResult = new PayFacResponseData_1.PayFacResponseData();
        responseResult.accountNumber = this.getAccountNumberFromResponse(root);
        const personalData = new UserPersonalData_1.UserPersonalData();
        personalData.sourceEmail = root.findtext(".//sourceEmail");
        personalData.firstName = root.findtext(".//firstName");
        personalData.middleInitial = root.findtext(".//middleInitial");
        personalData.lastName = root.findtext(".//lastName");
        personalData.dayPhone = root.findtext(".//dayPhone");
        personalData.eveningPhone = root.findtext(".//evenPhone");
        personalData.externalID = root.findtext(".//externalId");
        personalData.tier = root.findtext(".//tier");
        personalData.currencyCode = root.findtext(".//currencyCode");
        personalData.notificationEmail = root.findtext(".//notificati;onEmail");
        responseResult.personalData = personalData;
        const homeAddress = new Entities_1.Address();
        homeAddress.streetAddress1 = root.findtext(".//addr");
        homeAddress.streetAddress2 = root.findtext(".//aptNum");
        homeAddress.city = root.findtext(".//city");
        homeAddress.state = root.findtext(".//state");
        homeAddress.postalCode = root.findtext(".//postalCode");
        homeAddress.country = root.findtext(".//country");
        responseResult.homeAddress = homeAddress;
        const mailAddress = new Entities_1.Address();
        mailAddress.streetAddress1 = root.findtext(".//mailAddr");
        mailAddress.streetAddress2 = root.findtext(".//mailApt");
        mailAddress.city = root.findtext(".//mailCity");
        mailAddress.state = root.findtext(".//mailState");
        mailAddress.postalCode = root.findtext(".//mailPostalCode");
        mailAddress.country = root.findtext(".//mailCountry");
        responseResult.mailAddress = mailAddress;
        const businessData = new BusinessData_1.BusinessData();
        businessData.businessLegalName = root.findtext(".//businessLegalName");
        businessData.doingBusinessAs = root.findtext(".//doingBusinessAs");
        businessData.employerIdentificationNumber = root.findtext(".//ein");
        businessData.websiteURL = root.findtext(".//websiteURL");
        businessData.averageTicket = root.findtext(".//averageTicket");
        businessData.highestTicket = root.findtext(".//highestTicket");
        responseResult.businessData = businessData;
        const businessAddress = new Entities_1.Address();
        businessAddress.streetAddress1 = root.findtext(".//businessAddress");
        businessAddress.streetAddress2 = root.findtext(".//businessAddress2");
        businessAddress.city = root.findtext(".//businessCity");
        businessAddress.state = root.findtext(".//businessState");
        businessAddress.postalCode = root.findtext(".//businessZip");
        businessData.businessAddress = businessAddress;
        responseResult.businessData = businessData;
        const accountLimits = new AccountPermissions_1.AccountPermissions();
        accountLimits.creditCardTransactionLimit = root.findtext(".//creditCardTransactionLimit");
        accountLimits.creditCardMonthLimit = root.findtext(".//creditCardMonthLimit");
        accountLimits.aCHPaymentSoftLimitEnabled =
            root.findtext(".//achPaymentSoftLimitEnabled")?.toUpperCase() == "Y"
                ? true
                : false;
        accountLimits.aCHPaymentACHOffPercent = root.findtext(".//achPaymentAchOffPercent");
        accountLimits.softLimitEnabled =
            root.findtext(".//softLimitEnabled")?.toUpperCase() == "Y" ? true : false;
        accountLimits.softLimitACHOffPercent = root.findtext(".//softLimitAchOffPercent");
        responseResult.aCHPaymentPerTranLimit = root.findtext(".//achPaymentPerTranLimit");
        responseResult.aCHPaymentMonthLimit = root.findtext(".//achPaymentMonthLimit");
        responseResult.aCHPaymentMonthlyVolume = root.findtext(".//achPaymentMonthlyVolume");
        responseResult.creditCardMonthlyVolume = root.findtext(".//creditCardMonthlyVolume");
        responseResult.availableBalance = root.findtext(".//availableBalance");
        responseResult.pendingBalance = root.findtext(".//pendingBalance");
        responseResult.reserveBalance = root.findtext(".//reserveBalance");
        responseResult.accountLimits = accountLimits;
        const primaryBankAccountData = new BankAccountData_1.BankAccountData();
        primaryBankAccountData.accountCountryCode = root.findtext(".//primaryAccountCountryCode");
        primaryBankAccountData.accountType = root.findtext(".//primaryAccountType");
        primaryBankAccountData.accountOwnershipType = root.findtext(".//primaryAccountOwnershipType");
        primaryBankAccountData.bankName = root.findtext(".//primaryBankName");
        primaryBankAccountData.accountNumber = root.findtext(".//primaryAccountNumberLast4");
        primaryBankAccountData.routingNumber = root.findtext(".//primaryRoutingNumber");
        responseResult.primaryBankAccountData = primaryBankAccountData;
        const secondaryBankAccountData = new BankAccountData_1.BankAccountData();
        secondaryBankAccountData.accountCountryCode = root.findtext(".//secondaryAccountCountryCode");
        secondaryBankAccountData.accountType = root.findtext(".//secondaryAccountType");
        secondaryBankAccountData.accountOwnershipType = root.findtext(".//secondaryAccountOwnershipTy;e");
        secondaryBankAccountData.bankName = root.findtext(".//secondaryBankName");
        secondaryBankAccountData.accountNumber = root.findtext(".//secondaryAccoun;tNumberLast4");
        secondaryBankAccountData.routingNumber = root.findtext(".//secondaryRoutingNumber");
        responseResult.secondaryBankAccountData = secondaryBankAccountData;
        const grossBillingInformation = new GrossBillingInformation_1.GrossBillingInformation();
        const grossSettleBankData = new BankAccountData_1.BankAccountData();
        grossSettleBankData.accountHolderName = root.findtext(".//grossSettleAccountHolderName");
        grossSettleBankData.accountNumber = root.findtext(".//grossSettleAccountNumberLast4");
        grossSettleBankData.routingNumber = root.findtext(".//grossSettleRoutingNumber");
        grossSettleBankData.accountType = root.findtext(".//grossSettleAccountType");
        const grossSettleAddress = new Entities_1.Address();
        grossSettleAddress.streetAddress1 = root.findtext(".//grossSettleAccountAddress");
        grossSettleAddress.city = root.findtext(".//rossSettleAccountCity");
        grossSettleAddress.state = root.findtext(".//grossSettleAccountState");
        grossSettleAddress.country = root.findtext(".//grossSettleAccountCountryCode");
        grossSettleAddress.postalCode = root.findtext(".//grossSettleAccountZipCode");
        grossBillingInformation.grossSettleBankData = grossSettleBankData;
        grossBillingInformation.grossSettleAddress = grossSettleAddress;
        return responseResult;
    }
    getAccountNumberFromResponse(root) {
        // ProPay API 4.1 (Create an account) has the account number specified in the response as "accntNum"
        // All other methods specify it as "accountNum" in the response
        if (root.find(".//accntNum")) {
            return root.findtext(".//accntNum");
        }
        else {
            return root.findtext(".//accountNum");
        }
    }
    getBeneficialOwnerDataResultsFromResponse(root) {
        const beneficialOwnerDataResults = new Array();
        if (root.find("beneficialOwnerDataResult")) {
            root.findall("Owner").forEach((owner) => {
                const beneficialOwner = new BeneficialOwnerDataResult_1.BeneficialOwnerDataResult();
                beneficialOwner.firstName = owner.findtext(".//FirstName");
                beneficialOwner.lastName = owner.findtext(".//LastName");
                beneficialOwner.status = owner.findtext(".//Status");
                beneficialOwnerDataResults.push(beneficialOwner);
            });
        }
        return beneficialOwnerDataResults;
    }
    getPhysicalAddressFromResponse(root) {
        const addr = new Entities_1.Address();
        if (root.find("addr") ||
            root.find("city") ||
            root.find("state") ||
            root.find("zip")) {
            addr.streetAddress1 = root.findtext(".//addr");
            addr.city = root.findtext(".//city");
            addr.state = root.findtext(".//state");
            addr.postalCode = root.findtext(".//zip");
        }
        return addr;
    }
    getACHOutBalanceInfoFromResponse(root) {
        const balanceResponse = new AccountBalanceResponseData_1.AccountBalanceResponseData();
        if (root.find("achOut")) {
            balanceResponse.enabled = root.findtext(".//enabled");
            balanceResponse.limitRemaining = root.findtext(".//limitRemaining");
            balanceResponse.transferFee = root.findtext(".//transferFee");
            balanceResponse.feeType = root.findtext(".//feeType");
            balanceResponse.accountLastFour = root.findtext(".//accountLastFour");
        }
        return balanceResponse;
    }
    getFlashFundsBalanceInfoFromResponse(root) {
        const balanceResponse = new AccountBalanceResponseData_1.AccountBalanceResponseData();
        if (root.find("flashFunds")) {
            balanceResponse.enabled = root.findtext(".//enabled");
            balanceResponse.limitRemaining = root.findtext(".//limitRemaining");
            balanceResponse.transferFee = root.findtext(".//transferFee");
            balanceResponse.feeType = root.findtext(".//feeType");
            balanceResponse.accountLastFour = root.findtext(".//accountLastFour");
        }
        return balanceResponse;
    }
}
exports.ProPayConnector = ProPayConnector;
//# sourceMappingURL=ProPayConnector.js.map
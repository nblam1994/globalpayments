"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Gateway = void 0;
const url = __importStar(require("url"));
const https_wrapper_1 = require("./https-wrapper");
const src_1 = require("../../src");
class Gateway {
    headers;
    timeout;
    serviceUrl;
    contentType;
    maskedRequestData;
    requestLogger;
    environment;
    constructor(contentType) {
        this.contentType = contentType;
        this.headers = {};
        this.headers["Content-Type"] = this.contentType;
    }
    async sendRequest(httpMethod, endpoint, requestId, data, queryStringParams) {
        const uri = url.parse(this.serviceUrl);
        const queryString = this.buildQueryString(queryStringParams);
        const options = {
            headers: this.headers,
            host: uri.host,
            method: httpMethod,
            path: uri.path + endpoint + queryString,
            port: uri.port ? parseInt(uri.port, 10) : 443,
            timeout: this.timeout || 100000,
        };
        if (data !== undefined && options && options.headers) {
            options.headers["Content-Length"] = data.length;
        }
        if (this.requestLogger) {
            const dataLogged = data &&
                this.maskedRequestData &&
                this.environment === src_1.Environment.Production
                ? this.maskSensitiveData(data)
                : data;
            this.requestLogger.requestSent(httpMethod, this.serviceUrl + endpoint + (queryString || ""), requestId, this.headers, dataLogged);
        }
        try {
            const response = await (0, https_wrapper_1.request)(data, options);
            return response;
        }
        catch (e) {
            if (this.requestLogger) {
                this.requestLogger.responseError(e, requestId, e.headers);
            }
            throw e;
        }
    }
    maskSensitiveData(data) {
        // overriden in XmlGateway and RestGateway
        data;
    }
    buildQueryString(queryStringParams) {
        if (queryStringParams === undefined) {
            return "";
        }
        const params = [];
        for (const param in queryStringParams) {
            if (queryStringParams.hasOwnProperty(param) && queryStringParams[param]) {
                params.push(`${encodeURIComponent(param)}=${encodeURIComponent(queryStringParams[param])}`);
            }
        }
        return `?${params.join("&")}`;
    }
}
exports.Gateway = Gateway;
//# sourceMappingURL=Gateway.js.map
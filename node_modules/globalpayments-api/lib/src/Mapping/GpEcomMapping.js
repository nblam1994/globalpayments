"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpEcomMapping = void 0;
const elementtree_1 = require("@azz/elementtree");
const src_1 = require("../../src");
const Entities_1 = require("../../src/Entities");
class GpEcomMapping {
    static mapAuthRequestType(builder) {
        switch (builder.transactionType) {
            case Entities_1.TransactionType.Sale:
            case Entities_1.TransactionType.Auth:
                if (builder.paymentMethod.paymentMethodType === Entities_1.PaymentMethodType.Credit) {
                    if (builder.transactionModifier === Entities_1.TransactionModifier.Offline) {
                        return "offline";
                    }
                    if (builder.transactionModifier === Entities_1.TransactionModifier.EncryptedMobile) {
                        return "auth-mobile";
                    }
                    return "auth";
                }
                return "receipt-in";
            case Entities_1.TransactionType.Capture:
                return "settle";
            case Entities_1.TransactionType.Verify:
                if (builder.paymentMethod.paymentMethodType === Entities_1.PaymentMethodType.Credit) {
                    return "otb";
                }
                return "receipt-in-otb";
            case Entities_1.TransactionType.Refund:
                if (builder.paymentMethod.paymentMethodType === Entities_1.PaymentMethodType.Credit) {
                    return "credit";
                }
                return "payment-out";
            case Entities_1.TransactionType.Reversal:
                throw new Entities_1.UnsupportedTransactionError("The selected gateway does not support this transaction type.");
            default:
                return "unknown";
        }
    }
    static mapResponse(rawResponse, acceptedCodes) {
        const result = new Entities_1.Transaction();
        const root = (0, elementtree_1.XML)(rawResponse);
        this.checkResponse(root, acceptedCodes);
        result.responseCode = root.findtext(".//result");
        result.responseMessage = root.findtext(".//message");
        result.cvnResponseCode = root.findtext(".//cvnresult");
        result.avsResponseCode = root.findtext(".//avspostcoderesponse");
        result.timestamp = root.findtext(".//timestamp");
        result.transactionReference = new src_1.TransactionReference();
        result.transactionReference.authCode = root.findtext(".//authcode");
        result.transactionReference.orderId = root.findtext(".//orderid");
        result.transactionReference.paymentMethodType = Entities_1.PaymentMethodType.Credit;
        result.transactionReference.transactionId = root.findtext(".//pasref");
        return result;
    }
    static checkResponse(root, acceptedCodes) {
        if (!acceptedCodes) {
            acceptedCodes = ["00"];
        }
        const responseCode = root.findtext(".//result");
        const responseMessage = root.findtext(".//message");
        if (acceptedCodes.indexOf(responseCode) === -1) {
            throw new Entities_1.GatewayError(`Unexpected Gateway Response: ${responseCode} - ${responseMessage}`, responseCode);
        }
    }
    static mapManageRequestType(builder) {
        switch (builder.transactionType) {
            case Entities_1.TransactionType.Capture:
                return "settle";
            case Entities_1.TransactionType.Hold:
                return "hold";
            case Entities_1.TransactionType.Refund:
                return "rebate";
            case Entities_1.TransactionType.Release:
                return "release";
            case Entities_1.TransactionType.Void:
            case Entities_1.TransactionType.Reversal:
                return "void";
            default:
                return "unknown";
        }
    }
}
exports.GpEcomMapping = GpEcomMapping;
//# sourceMappingURL=GpEcomMapping.js.map
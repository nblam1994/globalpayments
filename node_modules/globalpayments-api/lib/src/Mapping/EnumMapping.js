"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnumMapping = void 0;
const src_1 = require("../../src");
class EnumMapping {
    static mapAccountType(gateway, accountType) {
        switch (gateway) {
            case src_1.GatewayProvider.GpApi:
                switch (accountType) {
                    case src_1.AccountType.Savings:
                        return "SAVING";
                    case src_1.AccountType.Checking:
                        return "CHECKING";
                    case src_1.AccountType.Credit:
                        return "CREDIT";
                    default:
                        return null;
                }
            default:
                return accountType;
        }
    }
    static mapDigitalWalletType(gateway, type) {
        if (gateway === src_1.GatewayProvider.GpApi) {
            switch (type) {
                case src_1.EncyptedMobileType.ApplePay:
                    return "APPLEPAY";
                case src_1.EncyptedMobileType.GooglePay:
                    return "PAY_BY_GOOGLE";
                case src_1.EncyptedMobileType.ClickToPay:
                    return "CLICK_TO_PAY";
                default:
                    return null;
            }
        }
        return null;
    }
    static mapStoredCredentialInitiator(gateway, value) {
        switch (gateway) {
            case src_1.GatewayProvider.GpApi:
                switch (value) {
                    case src_1.StoredCredentialInitiator.CardHolder:
                        return src_1.StoredCredentialInitiator.Payer.toUpperCase();
                    case src_1.StoredCredentialInitiator.Merchant:
                        return "MERCHANT";
                    default:
                        return value;
                }
            default:
                return value;
        }
    }
    static mapEmvLastChipRead(gateway, value) {
        switch (gateway) {
            case src_1.GatewayProvider.GpApi:
                switch (value) {
                    case src_1.EmvLastChipRead.SUCCESSFUL:
                        return "PREV_SUCCESS";
                    case src_1.EmvLastChipRead.FAILED:
                        return "PREV_FAILED";
                    default:
                        return null;
                }
            default:
                return null;
        }
    }
    static mapCardType(gateway, value) {
        switch (gateway) {
            case src_1.GatewayProvider.GpEcom:
            case src_1.GatewayProvider.GpApi:
                switch (value) {
                    case "DinersClub":
                        return src_1.CardType.DINERS;
                    default:
                        return value;
                }
            default:
                return value;
        }
    }
    static mapSdkUiType(gateway, value) {
        switch (gateway) {
            case src_1.GatewayProvider.GpApi:
                switch (value) {
                    case [src_1.SdkUiType.Oob]:
                        return ["OUT_OF_BAND"];
                    default:
                        return value;
                }
            default:
                return value;
        }
    }
    static mapMessageCategory(gateway, value) {
        switch (gateway) {
            case src_1.GatewayProvider.GpApi:
                switch (value) {
                    case src_1.MessageCategory.PaymentAuthentication:
                        return "PAYMENT";
                    default:
                        return value;
                }
            default:
                return value;
        }
    }
}
exports.EnumMapping = EnumMapping;
//# sourceMappingURL=EnumMapping.js.map
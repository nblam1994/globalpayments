"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GiftService = void 0;
const __1 = require("../");
class GiftService {
    constructor(config, configName = "default") {
        __1.ServicesContainer.configureService(config, configName);
    }
    activate(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Activate).withAmount(amount);
    }
    addValue(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.AddValue).withAmount(amount);
    }
    addAlias(phoneNumber) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Alias).withAlias(__1.AliasAction.Add, phoneNumber);
    }
    balanceInquiry(type) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Balance).withBalanceInquiryType(type);
    }
    charge(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Sale).withAmount(amount);
    }
    create(phoneNumber) {
        return __1.GiftCard.create(phoneNumber);
    }
    deactivate() {
        return new __1.AuthorizationBuilder(__1.TransactionType.Deactivate);
    }
    removeAlias(phoneNumber) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Alias).withAlias(__1.AliasAction.Delete, phoneNumber);
    }
    replaceWith(newCard) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Replace).withReplacementCard(newCard);
    }
    reverse(amount) {
        const ref = new __1.TransactionReference();
        ref.paymentMethodType = __1.PaymentMethodType.Gift;
        return new __1.AuthorizationBuilder(__1.TransactionType.Reversal)
            .withAmount(amount)
            .withPaymentMethod(ref);
    }
    rewards(amount) {
        return new __1.AuthorizationBuilder(__1.TransactionType.Reward).withAmount(amount);
    }
    void(transactionId) {
        const ref = new __1.TransactionReference();
        ref.paymentMethodType = __1.PaymentMethodType.Gift;
        ref.transactionId = transactionId;
        return new __1.ManagementBuilder(__1.TransactionType.Void).withPaymentMethod(ref);
    }
}
exports.GiftService = GiftService;
//# sourceMappingURL=GiftService.js.map
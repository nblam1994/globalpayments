"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayFacService = void 0;
const PayFacBuilder_1 = require("../Builders/PayFacBuilder");
const Enums_1 = require("../Entities/Enums");
class PayFacService {
    constructor() { }
    createAccount() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.CreateAccount);
    }
    editAccount() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.EditAccount);
    }
    resetPassword() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.ResetPassword);
    }
    renewAccount() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.RenewAccount);
    }
    updateBeneficialOwnershipInfo() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.UpdateBeneficialOwnership);
    }
    disownAccount() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.DisownAccount);
    }
    uploadDocumentChargeback() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.UploadDocumentChargeback);
    }
    uploadDocument() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.UploadDocument);
    }
    obtainSSOKey() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.ObtainSSOKey);
    }
    updateBankAccountOwnershipInfo() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.UpdateBankAccountOwnership);
    }
    addFunds() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.AddFunds);
    }
    sweepFunds() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.SweepFunds);
    }
    addCardFlashFunds() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.AddCardFlashFunds);
    }
    pushMoneyToFlashFundsCard() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.PushMoneyFlashFunds);
    }
    disburseFunds() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.DisburseFunds);
    }
    spendBack() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.SpendBack);
    }
    reverseSplitPay() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.ReverseSplitPay);
    }
    splitFunds() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.SplitFunds);
    }
    getAccountDetails() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.GetAccountDetails);
    }
    getAccountDetailsEnhanced() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.GetAccountDetails, Enums_1.TransactionModifier.Additional);
    }
    getAccountBalance() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.GetAccountBalance);
    }
    orderDevice() {
        return new PayFacBuilder_1.PayFacBuilder(Enums_1.TransactionType.OrderDevice);
    }
}
exports.PayFacService = PayFacService;
//# sourceMappingURL=PayFacService.js.map
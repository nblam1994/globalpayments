"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpApiService = void 0;
const src_1 = require("../../src");
class GpApiService {
    static async generateTransactionKey(config) {
        const gateway = new src_1.GpApiConnector(config);
        if (!gateway.serviceUrl) {
            gateway.serviceUrl =
                config.environment == src_1.Environment.Production
                    ? src_1.ServiceEndpoints.GP_API_PRODUCTION
                    : src_1.ServiceEndpoints.GP_API_TEST;
        }
        gateway.requestLogger = config.requestLogger;
        // TODO to be backfilled when implemented
        // gateway.webProxy = config.webProxy;
        // gateway.dynamicHeaders = config.dynamicHeaders;
        const data = await gateway.getAccessToken();
        const accessTokenInfo = new src_1.AccessTokenInfo();
        accessTokenInfo.accessToken = data.token;
        accessTokenInfo.dataAccountName = data.getDataAccountName();
        accessTokenInfo.disputeManagementAccountName =
            data.getDisputeManagementAccountName();
        accessTokenInfo.transactionProcessingAccountName =
            data.getTransactionProcessingAccountName();
        accessTokenInfo.tokenizationAccountName = data.getTokenizationAccountName();
        accessTokenInfo.riskAssessmentAccountName =
            data.getRiskAssessmentAccountName();
        accessTokenInfo.merchantManagementAccountName =
            data.getMerchantManagementAccountName();
        accessTokenInfo.dataAccountID = data.getDataAccountID();
        accessTokenInfo.disputeManagementAccountID =
            data.getDisputeManagementAccountID();
        accessTokenInfo.transactionProcessingAccountID =
            data.getTransactionProcessingAccountID();
        accessTokenInfo.tokenizationAccountID = data.getTokenizationAccountID();
        accessTokenInfo.riskAssessmentAccountID = data.getRiskAssessmentAccountID();
        accessTokenInfo.merchantManagementAccountID =
            data.getMerchantManagementAccountID();
        return accessTokenInfo;
    }
}
exports.GpApiService = GpApiService;
//# sourceMappingURL=GpApiServices.js.map
/// <reference types="node" />
import * as fs from "fs";
export declare class Logger {
    static INFO_LOG_LEVEL: string;
    logLevels: Record<string, string>;
    private options;
    private queue;
    private logFilePath;
    private logLineCount;
    private fileHandleSync;
    private fileHandle;
    private lastLine;
    constructor(logDirectory: string);
    setLogToStdOut(stdOutPath: string): void;
    setLogFilePath(logDirectory: string): void;
    setFileHandleSync(writeMode: fs.Mode): void;
    closeFileHandleSync(): void;
    setFileHandle(writeMode: fs.Mode): Promise<void>;
    closeFileHandle(): Promise<void>;
    setDateFormat(dateFormat: string): void;
    queueLog(level: string | number, requestId: number, message: string, context?: Record<string, any>): void;
    log(requestId: number): Promise<void>;
    private pushToQueueLog;
    write(message: string): Promise<void>;
    getLogFilePath(): string;
    getLastLogLine(): string;
    formatMessage(level: string | number, message: string, context: Record<string, any>): string;
    private getTimestamp;
    private contextToString;
    private indent;
    info(message: string, requestId: number, context: Record<string, any> | undefined, queue: boolean): Promise<void>;
}

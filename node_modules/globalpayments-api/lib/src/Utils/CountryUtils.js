"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountryUtils = void 0;
const src_1 = require("../../src");
class CountryUtils {
    static SIGNIFICANT_COUNTRY_MATCH = 6;
    static SIGNIFICANT_CODE_MATCH = 3;
    static getCountryInfo(country) {
        if (!country) {
            return null;
        }
        const countryCodeMapByCountry = src_1.IsoCountries.allCountries.map((country) => country.name);
        const countryMapByCode = src_1.IsoCountries.allCountries.map((country) => country.alpha2);
        const countryMapByNumericCode = src_1.IsoCountries.allCountries.map((country) => country.numeric);
        let index;
        if ((index = countryCodeMapByCountry.indexOf(country)) !== -1) {
            return src_1.IsoCountries.allCountries[index];
        }
        else {
            if ((index = countryCodeMapByCountry.indexOf(country)) !== -1) {
                return src_1.IsoCountries.allCountries[index];
            }
            else {
                if ((index = countryMapByNumericCode.indexOf(country)) !== -1) {
                    return src_1.IsoCountries.allCountries[index];
                }
                else {
                    const fuzzyCountryMatch = CountryUtils.fuzzyMatch(countryCodeMapByCountry, country, CountryUtils.SIGNIFICANT_COUNTRY_MATCH);
                    if (fuzzyCountryMatch !== null) {
                        return src_1.IsoCountries.allCountries[fuzzyCountryMatch];
                    }
                    else {
                        if (country.length > 3) {
                            return null;
                        }
                        const fuzzyCodeMatch = CountryUtils.fuzzyMatch(countryMapByCode, country, CountryUtils.SIGNIFICANT_CODE_MATCH);
                        if (fuzzyCodeMatch !== null) {
                            return src_1.IsoCountries.allCountries[fuzzyCodeMatch];
                        }
                        return null;
                    }
                }
            }
        }
    }
    static getCountryCodeByCountry(country) {
        if (!country) {
            return null;
        }
        const countryCodeMapByCountry = src_1.IsoCountries.allCountries.map((country) => country.name);
        const countryMapByCode = src_1.IsoCountries.allCountries.map((country) => country.alpha2);
        const countryMapByNumericCode = src_1.IsoCountries.allCountries.map((country) => country.numeric);
        const index = countryCodeMapByCountry.findIndex((name) => name === country);
        if (index !== -1) {
            return src_1.IsoCountries.allCountries[index].alpha2;
        }
        const index2 = countryCodeMapByCountry.findIndex((name) => name === country);
        if (index2 !== -1) {
            return country;
        }
        const index3 = countryMapByNumericCode.findIndex((code) => code === country);
        if (index3 !== -1) {
            return src_1.IsoCountries.allCountries[index3].alpha2;
        }
        const fuzzyCountryMatch = this.fuzzyMatch(countryCodeMapByCountry, country, this.SIGNIFICANT_COUNTRY_MATCH);
        if (fuzzyCountryMatch !== null) {
            return src_1.IsoCountries.allCountries[fuzzyCountryMatch].alpha2;
        }
        if (country.length > 3) {
            return null;
        }
        const fuzzyCodeMatch = this.fuzzyMatch(countryMapByCode, country, this.SIGNIFICANT_CODE_MATCH);
        if (fuzzyCodeMatch !== null) {
            return src_1.IsoCountries.allCountries[fuzzyCodeMatch].alpha2;
        }
        return null;
    }
    static fuzzyMatch(dict, query, significantMatch) {
        let rkey = null;
        let matches = {};
        let highScore = -1;
        dict.forEach((value, key) => {
            const score = this.fuzzyScore(value, query);
            if (score > significantMatch && score > highScore) {
                matches = {};
                highScore = score;
                rkey = key;
                matches[rkey] = value;
            }
            else if (score === highScore) {
                matches[key] = value;
            }
        });
        if (Object.keys(matches).length > 1) {
            return null;
        }
        return rkey;
    }
    static fuzzyScore(term, query) {
        if (!term || !query) {
            throw new Error("Strings must not be null");
        }
        const termLowerCase = term.toLowerCase();
        const queryLowerCase = query.toLowerCase();
        let score = 0;
        let termIndex = 0;
        let previousMatchingCharacterIndex = Number.MIN_SAFE_INTEGER;
        for (let queryIndex = 0; queryIndex < queryLowerCase.length; queryIndex++) {
            const queryChar = queryLowerCase[queryIndex];
            let termCharacterMatchFound = false;
            for (; termIndex < termLowerCase.length && !termCharacterMatchFound; termIndex++) {
                const termChar = termLowerCase[termIndex];
                if (queryChar === termChar) {
                    score++;
                    if (previousMatchingCharacterIndex + 1 === termIndex) {
                        score += 2;
                    }
                    previousMatchingCharacterIndex = termIndex;
                    termCharacterMatchFound = true;
                }
            }
        }
        return score;
    }
    static getNumericCodeByCountry(country) {
        const countryInfo = CountryUtils.getCountryInfo(country);
        return countryInfo && countryInfo.numeric ? countryInfo.numeric : null;
    }
}
exports.CountryUtils = CountryUtils;
//# sourceMappingURL=CountryUtils.js.map
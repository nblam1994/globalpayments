"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenerationUtils = void 0;
const Sha1_1 = require("./Sha1");
const crypto = __importStar(require("crypto"));
const __1 = require("../");
class GenerationUtils {
    static generateHash(toHash, secret) {
        const toHashFirstPass = (0, Sha1_1.hex_sha1)(toHash);
        if (!secret) {
            return toHashFirstPass;
        }
        const toHashSecondPass = `${toHashFirstPass}.${secret}`;
        return (0, Sha1_1.hex_sha1)(toHashSecondPass);
    }
    static generateTimestamp() {
        const date = new Date();
        return (date.getUTCFullYear().toString() +
            __1.StringUtils.leftPad((date.getUTCMonth() + 1).toString(), 2, "0") +
            __1.StringUtils.leftPad(date.getUTCDate().toString(), 2, "0") +
            __1.StringUtils.leftPad(date.getUTCHours().toString(), 2, "0") +
            __1.StringUtils.leftPad(date.getUTCMinutes().toString(), 2, "0") +
            __1.StringUtils.leftPad(date.getUTCSeconds().toString(), 2, "0"));
    }
    static generateOrderId() {
        const id = __1.StringUtils.uuid();
        return Buffer.from(id, "ascii")
            .toString("base64")
            .replace("=", "")
            .replace("+", "-")
            .replace("/", "_");
    }
    static getGuuid() {
        function bin2hex(buffer) {
            return Array.prototype.map
                .call(buffer, (byte) => {
                return ("0" + (byte & 0xff).toString(16)).slice(-2);
            })
                .join("");
        }
        const data = crypto.getRandomValues(new Uint8Array(16));
        data[6] = (data[6] & 0x0f) | 0x40; // set version to 0100
        data[8] = (data[8] & 0x3f) | 0x80; // set bits 6-7 to 10
        const hexString = bin2hex(data);
        const formattedUUID = [
            hexString.slice(0, 8),
            hexString.slice(8, 12),
            hexString.slice(12, 16),
            hexString.slice(16, 20),
            hexString.slice(20),
        ].join("-");
        return formattedUUID;
    }
}
exports.GenerationUtils = GenerationUtils;
//# sourceMappingURL=GenerationUtils.js.map
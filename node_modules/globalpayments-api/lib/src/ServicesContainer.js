"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServicesContainer = void 0;
const _1 = require("./");
const ConfiguredServices_1 = require("./ConfiguredServices");
class ServicesContainer {
    static _instance;
    _configs = {};
    static instance() {
        if (ServicesContainer._instance === undefined) {
            ServicesContainer._instance = new ServicesContainer();
        }
        return ServicesContainer._instance;
    }
    getClient(configName = "default") {
        return this._configs[configName].gatewayConnector;
    }
    getRecurringClient(configName = "default") {
        return this._configs[configName].recurringConnector;
    }
    getXmlClient(configName = "default") {
        return this._configs[configName].getPayFacProvider();
    }
    getDeviceInterface(configName = "default") {
        return this._configs[configName].deviceInterface;
    }
    getDeviceController(configName = "default") {
        return this._configs[configName].deviceController;
    }
    getSecure3d(configName, version) {
        if (this._configs[configName]) {
            const provider = this._configs[configName].getSecure3dProvider(version);
            if (provider !== null) {
                return provider;
            }
            else {
                throw new _1.ConfigurationError(`Secure 3d is not configured for version ${version}.`);
            }
        }
        else {
            throw new _1.ConfigurationError("Secure 3d is not configured on the connector.");
        }
    }
    static configure(config, configName = "default") {
        config.validate();
        ServicesContainer.configureService(config.gatewayConfig, configName);
    }
    static configureService(config, configName = "default") {
        if (config != null) {
            if (!config.validated) {
                config.validate();
            }
            const configuredService = ServicesContainer.instance().getConfiguration(configName);
            config.configureContainer(configuredService);
            ServicesContainer.instance().addConfiguration(configName, configuredService);
        }
    }
    getConfiguration(configName) {
        const instance = ServicesContainer.instance();
        if (instance._configs[configName]) {
            return instance._configs[configName];
        }
        else {
            return new ConfiguredServices_1.ConfiguredServices();
        }
    }
    addConfiguration(configName, configuredService) {
        const instance = ServicesContainer.instance();
        instance._configs[configName] = configuredService;
    }
    static removeConfiguration(configName = "default") {
        const instance = ServicesContainer.instance();
        if (instance._configs[configName]) {
            delete instance._configs[configName];
        }
    }
}
exports.ServicesContainer = ServicesContainer;
//# sourceMappingURL=ServicesContainer.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MethodUrlCompletion = exports.MessageVersion = exports.MessageCategory = exports.ManualEntryMethod = exports.LodgingItemType = exports.IntervalToExpire = exports.InquiryType = exports.HppVersion = exports.GiftEntryMethod = exports.GatewayProvider = exports.FraudFilterMode = exports.ExemptStatus = exports.ExemptionReason = exports.ExceptionCodes = exports.EmvLastChipRead = exports.Environment = exports.EntryMethod = exports.EncyptedMobileType = exports.EmailReceipt = exports.EcommerceChannel = exports.DigitalWalletTokenFormat = exports.DeviceType = exports.DeliveryTimeFrame = exports.DecoupledFlowRequest = exports.DataServiceCriteria = exports.CvnPresenceIndicator = exports.CustomerDocumentType = exports.CustomerAuthenticationMethod = exports.CurrencyType = exports.CreditDebitIndicator = exports.ColorDepth = exports.CheckType = exports.Channel = exports.ChallengeWindowSize = exports.ChallengeRequestIndicator = exports.CaptureMode = exports.CardType = exports.CardHolderAuthenticationEntity = exports.CardHolderAuthenticationCapability = exports.CardDataOutputCapability = exports.CardDataInputCapability = exports.BankPaymentType = exports.AuthenticationSource = exports.AuthenticationRequestType = exports.ApplicationCryptogramType = exports.AlternativePaymentType = exports.AliasAction = exports.AgeIndicator = exports.AddressType = exports.AccountType = void 0;
exports.PropayTermsVersion = exports.PaymentDataSourceType = exports.MobilePaymentMethodType = exports.ProPayAccountStatus = exports.TransactionType = exports.TransactionSortProperty = exports.TransactionModifier = exports.TrackNumber = exports.TimeZoneConversion = exports.TaxType = exports.StoredPaymentMethodSortProperty = exports.StoredCredentialType = exports.StoredCredentialSequence = exports.StoredCredentialReason = exports.StoredCredentialInitiator = exports.SortDirection = exports.ShippingMethod = exports.ShaHashType = exports.SendFileType = exports.Secure3dVersion = exports.Secure3dStatus = exports.SecCode = exports.SearchCriteria = exports.SdkUiType = exports.SdkInterface = exports.ScheduleFrequency = exports.ReportType = exports.ReorderIndicator = exports.RecurringType = exports.RecurringSequence = exports.ReasonCode = exports.PriorAuthenticationMethod = exports.PreOrderIndicator = exports.PhoneNumberType = exports.PaymentType = exports.PaymentSchedule = exports.PaymentProvider = exports.PaymentMethodUsageMode = exports.PaymentMethodType = exports.PaymentMethodProgram = exports.PaymentMethodName = exports.PaymentEntryMode = exports.PayByLinkStatus = exports.OrderTransactionType = exports.NetGrossIndicator = void 0;
var AccountType;
(function (AccountType) {
    AccountType["Checking"] = "CHECKING";
    AccountType["Savings"] = "SAVINGS";
    AccountType["Credit"] = "Credit";
})(AccountType || (exports.AccountType = AccountType = {}));
var AddressType;
(function (AddressType) {
    AddressType[AddressType["Billing"] = 0] = "Billing";
    AddressType[AddressType["Shipping"] = 1] = "Shipping";
})(AddressType || (exports.AddressType = AddressType = {}));
var AgeIndicator;
(function (AgeIndicator) {
    AgeIndicator["NoAccount"] = "NO_ACCOUNT";
    AgeIndicator["NoChange"] = "NO_CHANGE";
    AgeIndicator["ThisTransaction"] = "THIS_TRANSACTION";
    AgeIndicator["LessThanThirtyDays"] = "LESS_THAN_THIRTY_DAYS";
    AgeIndicator["ThirtyToSixtyDays"] = "THIRTY_TO_SIXTY_DAYS";
    AgeIndicator["MoreThanSixtyDays"] = "MORE_THAN_SIXTY_DAYS";
})(AgeIndicator || (exports.AgeIndicator = AgeIndicator = {}));
var AliasAction;
(function (AliasAction) {
    AliasAction["Create"] = "CREATE";
    AliasAction["Add"] = "ADD";
    AliasAction["Delete"] = "DELETE";
})(AliasAction || (exports.AliasAction = AliasAction = {}));
var AlternativePaymentType;
(function (AlternativePaymentType) {
    AlternativePaymentType["AstropayDirect"] = "astropaydirect";
    AlternativePaymentType["Aura"] = "aura";
    AlternativePaymentType["BalotoCash"] = "baloto";
    AlternativePaymentType["Banamex"] = "banamex";
    AlternativePaymentType["BancaAvVillas"] = "bancaavvillas";
    AlternativePaymentType["BancaCajaSocial"] = "bancacajasocial";
    AlternativePaymentType["BancoGnbSudameris"] = "bancagnbsudameris";
    AlternativePaymentType["BancoConsorcio"] = "bancoconsorcio";
    AlternativePaymentType["BancoCooperativoCoopcentral"] = "bancocooperativocoopcentral";
    AlternativePaymentType["BancoCorpbanca"] = "bancocorpbanca";
    AlternativePaymentType["BancoDeBogota"] = "bancodebogota";
    AlternativePaymentType["BancoDeChileEdwardsCiti"] = "bancodechile";
    AlternativePaymentType["BancoDeChileCash"] = "bancodechilecash";
    AlternativePaymentType["BancoDeOccidente"] = "bancodeoccidente";
    AlternativePaymentType["BancoDeOccidenteCash"] = "bancodeoccidentecash";
    AlternativePaymentType["BancoDoBrasil"] = "bancodobrasil";
    AlternativePaymentType["BancoFalabellaChile"] = "bancofalabellachile";
    AlternativePaymentType["BancoFalabellaColumbia"] = "bancofalabellacolumbia";
    AlternativePaymentType["BancoInternational"] = "bancointernational";
    AlternativePaymentType["BancoPichincha"] = "bancopichincha";
    AlternativePaymentType["BancoPopular"] = "bancopopular";
    AlternativePaymentType["BancoProcredit"] = "bancoprocredit";
    AlternativePaymentType["BancoRipley"] = "bancoripley";
    AlternativePaymentType["BancoSantander"] = "bancosantander";
    AlternativePaymentType["BancoSantanderBanefe"] = "bancosantanderbanefe";
    AlternativePaymentType["BancoSecurity"] = "bancosecurity";
    AlternativePaymentType["Bancobice"] = "bancobice";
    AlternativePaymentType["BancoEstado"] = "bancoestado";
    AlternativePaymentType["Bancolombia"] = "bancolombia";
    AlternativePaymentType["Bancomer"] = "bancomer";
    AlternativePaymentType["BancontactMrCash"] = "bancontact";
    AlternativePaymentType["Bancoomeva"] = "bancoomeva";
    AlternativePaymentType["BankIslam"] = "bankislam";
    AlternativePaymentType["BankTransfer"] = "banktransfer";
    AlternativePaymentType["BbvaChile"] = "bbvachile";
    AlternativePaymentType["BbvaColumbia"] = "bbvacolumbia";
    AlternativePaymentType["BciTbanc"] = "bcitbanc";
    AlternativePaymentType["Bitpay"] = "bitpay";
    AlternativePaymentType["BoletoBancario"] = "boletobancario_";
    AlternativePaymentType["Bradesco"] = "bradesco";
    AlternativePaymentType["Cabal"] = "cabal_";
    AlternativePaymentType["CartaoMercadolivre"] = "cartaomercadolivre";
    AlternativePaymentType["Carulla"] = "carulla";
    AlternativePaymentType["Cencosud"] = "cencosud";
    AlternativePaymentType["ChinaUnionPay"] = "unionpay";
    AlternativePaymentType["CimbClicks"] = "cimbclicks";
    AlternativePaymentType["Citibank"] = "citibank";
    AlternativePaymentType["Cmr"] = "cmr";
    AlternativePaymentType["Colpatria"] = "colpatria";
    AlternativePaymentType["Coopeuch"] = "coopeuch";
    AlternativePaymentType["Corpbanca"] = "corpbanca";
    AlternativePaymentType["DanskeBank"] = "danskebank";
    AlternativePaymentType["Davivienda"] = "davivienda";
    AlternativePaymentType["Dragonpay"] = "dragonpay";
    AlternativePaymentType["Easypay"] = "easypay";
    AlternativePaymentType["Efecty"] = "efecty";
    AlternativePaymentType["Elo"] = "elo";
    AlternativePaymentType["EmpresaDeEnergiaDelQuindio"] = "empresadeenergia";
    AlternativePaymentType["Enets"] = "enets";
    AlternativePaymentType["Entercash"] = "entercash";
    AlternativePaymentType["EPayPetronas"] = "epaypetronas";
    AlternativePaymentType["Eps"] = "EPS";
    AlternativePaymentType["EstonianOnlineBankTransfer"] = "estonianbanks";
    AlternativePaymentType["FinlandOnlineBankTransfer"] = "finlandonlinebt";
    AlternativePaymentType["Giropay"] = "giropay";
    AlternativePaymentType["Handelsbanken"] = "handelsbanken";
    AlternativePaymentType["HelmBank"] = "helm";
    AlternativePaymentType["Hipercard"] = "hipercard";
    AlternativePaymentType["HongLeongBank"] = "hongleongbank";
    AlternativePaymentType["Ideal"] = "ideal";
    AlternativePaymentType["IndonesiaAtm"] = "indonesiaatm";
    AlternativePaymentType["InstantTransfer"] = "instanttransfer";
    AlternativePaymentType["InternationalPayOut"] = "intpayout";
    AlternativePaymentType["ItauBrazil"] = "itaubrazil";
    AlternativePaymentType["ItauChile"] = "itauchile";
    AlternativePaymentType["LatvianBt"] = "latvianbt";
    AlternativePaymentType["Link"] = "link";
    AlternativePaymentType["LithuanianOnlineBankTransfer"] = "lituanianbt";
    AlternativePaymentType["Magna"] = "magna";
    AlternativePaymentType["Maxima"] = "maxima";
    AlternativePaymentType["Maybank2u"] = "maybank2u";
    AlternativePaymentType["Multibanco"] = "multibanco";
    AlternativePaymentType["Mybank"] = "mybank";
    AlternativePaymentType["MyclearFpx"] = "myclearfpx";
    AlternativePaymentType["Naranja"] = "naranja";
    AlternativePaymentType["NarvesenLietuvosSpauda"] = "narvesen";
    AlternativePaymentType["Nativa"] = "nativa";
    AlternativePaymentType["Nordea"] = "nordea";
    AlternativePaymentType["Osuuspankki"] = "osuuspankki";
    AlternativePaymentType["Oxxo"] = "oxxo";
    AlternativePaymentType["PagoFacil"] = "pagofacil";
    AlternativePaymentType["PaypostLietuvosPastas"] = "paypost";
    AlternativePaymentType["Paysafecard"] = "paysafecard";
    AlternativePaymentType["PaysbuyCash"] = "paysbuy";
    AlternativePaymentType["Paysera"] = "paysera";
    AlternativePaymentType["Payu"] = "payu";
    AlternativePaymentType["Perlas"] = "perlas";
    AlternativePaymentType["Poli"] = "poli";
    AlternativePaymentType["PolishPayout"] = "polishpayout";
    AlternativePaymentType["Poppankki"] = "poppankki";
    AlternativePaymentType["Postfinance"] = "postfinance";
    AlternativePaymentType["Presto"] = "presto";
    AlternativePaymentType["ProvinciaNet"] = "provincianet";
    AlternativePaymentType["Przelewy24"] = "p24";
    AlternativePaymentType["Pse"] = "pse";
    AlternativePaymentType["Qiwi"] = "qiwi";
    AlternativePaymentType["QiwiPayout"] = "qiwipayout";
    AlternativePaymentType["RapiPago"] = "rapipago";
    AlternativePaymentType["Redpagos"] = "redpagos";
    AlternativePaymentType["RhbBank"] = "rhbbank";
    AlternativePaymentType["Saastopankki"] = "sasstopankki";
    AlternativePaymentType["Safetypay"] = "safetypay";
    AlternativePaymentType["SantanderBrazil"] = "santanderbr";
    AlternativePaymentType["SantanderMexico"] = "santandermx";
    AlternativePaymentType["SantanderRio"] = "santanderrio";
    AlternativePaymentType["Scotiabank"] = "scotiabank";
    AlternativePaymentType["SepaDirectdebitMerchantMandateModelC"] = "sepamm";
    AlternativePaymentType["SepaDirectdebitPpproMandateModelA"] = "sepapm";
    AlternativePaymentType["SepaPayout"] = "sepapayout";
    AlternativePaymentType["Servipag"] = "servipag";
    AlternativePaymentType["Singpost"] = "singpost";
    AlternativePaymentType["Skrill"] = "skrill";
    AlternativePaymentType["Sofortuberweisung"] = "sofort";
    AlternativePaymentType["Spankki"] = "spankki";
    AlternativePaymentType["Surtimax"] = "surtimax";
    AlternativePaymentType["TarjetaShopping"] = "tarjeta";
    AlternativePaymentType["Teleingreso"] = "teleingreso";
    AlternativePaymentType["Trustly"] = "trustly";
    AlternativePaymentType["Trustpay"] = "trustpay";
    AlternativePaymentType["Webmoney"] = "webmoney";
    AlternativePaymentType["Webpay"] = "webpay";
    AlternativePaymentType["WechatPay"] = "wechatpay";
    AlternativePaymentType["Zimpler"] = "zimpler";
    AlternativePaymentType["UkDirectDebit"] = "ukdirectdebit";
    AlternativePaymentType["TestPay"] = "testpay";
    AlternativePaymentType["Paypal"] = "paypal";
    AlternativePaymentType["Paybybankapp"] = "paybybankapp";
    AlternativePaymentType["Alipay"] = "alipay";
})(AlternativePaymentType || (exports.AlternativePaymentType = AlternativePaymentType = {}));
var ApplicationCryptogramType;
(function (ApplicationCryptogramType) {
    ApplicationCryptogramType[ApplicationCryptogramType["TC"] = 0] = "TC";
    ApplicationCryptogramType[ApplicationCryptogramType["ARQC"] = 1] = "ARQC";
})(ApplicationCryptogramType || (exports.ApplicationCryptogramType = ApplicationCryptogramType = {}));
var AuthenticationRequestType;
(function (AuthenticationRequestType) {
    AuthenticationRequestType["PaymentTransaction"] = "PAYMENT_TRANSACTION";
    AuthenticationRequestType["RecurringTransaction"] = "RECURRING_TRANSACTION";
    AuthenticationRequestType["InstalmentTransaction"] = "INSTALMENT_TRANSACTION";
    AuthenticationRequestType["AddCard"] = "ADD_CARD";
    AuthenticationRequestType["MaintainCard"] = "MAINTAIN_CARD";
    AuthenticationRequestType["CardholderVerification"] = "CARDHOLDER_VERIFICATION";
})(AuthenticationRequestType || (exports.AuthenticationRequestType = AuthenticationRequestType = {}));
var AuthenticationSource;
(function (AuthenticationSource) {
    AuthenticationSource["Browser"] = "BROWSER";
    AuthenticationSource["StoredRecurring"] = "STORED_RECURRING";
    AuthenticationSource["MobileSdk"] = "MOBILE_SDK";
    AuthenticationSource["MerchantInitiated"] = "MERCHANT_INITIATED";
})(AuthenticationSource || (exports.AuthenticationSource = AuthenticationSource = {}));
var BankPaymentType;
(function (BankPaymentType) {
    BankPaymentType["FASTERPAYMENTS"] = "FASTERPAYMENTS";
    BankPaymentType["SEPA"] = "SEPA";
})(BankPaymentType || (exports.BankPaymentType = BankPaymentType = {}));
var CardDataInputCapability;
(function (CardDataInputCapability) {
    CardDataInputCapability["Unknown"] = "UNKNOWN";
    CardDataInputCapability["NoTerminalManual"] = "NO_TERMINAL_MANUAL";
    CardDataInputCapability["MagstripeReadOnly"] = "MAGSTRIPE_READ_ONLY";
    CardDataInputCapability["Ocr"] = "OCR";
    CardDataInputCapability["IccChipReadOnly"] = "ICC_CHIP_READ_ONLY";
    CardDataInputCapability["KeyedEntryOnly"] = "KEYED_ENTRY_ONLY";
    CardDataInputCapability["MagstripeContactlessOnly"] = "MAGSTRIPE_CONTACTLESS_ONLY";
    CardDataInputCapability["MagstripeKeyedEntryOnly"] = "MAGSTRIPE_KEYED_ENTRY_ONLY";
    CardDataInputCapability["MagstripeIccKeyedEntryOnly"] = "MAGSTRIPE_ICC_KEYED_ENTRY_ONLY";
    CardDataInputCapability["MagstripeIccOnly"] = "MAGSTRIPE_ICC_ONLY";
    CardDataInputCapability["IccKeyedEntryOnly"] = "ICC_KEYED_ENTRY_ONLY";
    CardDataInputCapability["IccChipConctactContactless"] = "ICC_CHIP_CONTACT_CONTACTLESS";
    CardDataInputCapability["IccContactlessOnly"] = "ICC_CONTACTLESS_ONLY";
    CardDataInputCapability["OtherCapabilityForMastercard"] = "OTHER_CAPABILITY_FOR_MASTERCARD";
    CardDataInputCapability["MagstripeSignatureForAmexOnly"] = "MAGSTRIPE_SIGNATURE_FOR_AMEX_ONLY";
})(CardDataInputCapability || (exports.CardDataInputCapability = CardDataInputCapability = {}));
var CardDataOutputCapability;
(function (CardDataOutputCapability) {
    CardDataOutputCapability["None"] = "NONE";
    CardDataOutputCapability["MagneticStripeWrite"] = "MAGNETIC_STRIPE_WRITE";
    CardDataOutputCapability["Icc"] = "ICC";
    CardDataOutputCapability["Other"] = "OTHER";
})(CardDataOutputCapability || (exports.CardDataOutputCapability = CardDataOutputCapability = {}));
var CardHolderAuthenticationCapability;
(function (CardHolderAuthenticationCapability) {
    CardHolderAuthenticationCapability["NoCapability"] = "NO_CAPABILITY";
    CardHolderAuthenticationCapability["PinEntry"] = "PIN_ENTRY";
    CardHolderAuthenticationCapability["SignatureAnalysis"] = "SIGNATURE_ANALYSIS";
    CardHolderAuthenticationCapability["SignatureAnalysisInoperative"] = "SIGNATURE_ANALYSIS_INOPERATIVE";
    CardHolderAuthenticationCapability["MposSoftwareBasedPinEntryCapability"] = "MPOS_SOFTWARE_BASED_PIN_ENTRY_CAPABILITY";
    CardHolderAuthenticationCapability["Other"] = "OTHER";
    CardHolderAuthenticationCapability["Unknown"] = "UNKNOWN";
})(CardHolderAuthenticationCapability || (exports.CardHolderAuthenticationCapability = CardHolderAuthenticationCapability = {}));
var CardHolderAuthenticationEntity;
(function (CardHolderAuthenticationEntity) {
    CardHolderAuthenticationEntity["NotAuthenticated"] = "NOT_AUTHENTICATED";
    CardHolderAuthenticationEntity["IccOfflinePin"] = "ICC_OFFLINE_PIN";
    CardHolderAuthenticationEntity["CardAcceptanceDevice"] = "CARD_ACCEPTANCE_DEVICE";
    CardHolderAuthenticationEntity["AuthorizingAgentOnlinePin"] = "AUTHORIZING_AGENT_ONLINE_PIN";
    CardHolderAuthenticationEntity["MerchantCardAcceptorSignature"] = "MERCHANT_CARD_ACCEPTOR_SIGNATURE";
    CardHolderAuthenticationEntity["Other"] = "OTHER";
})(CardHolderAuthenticationEntity || (exports.CardHolderAuthenticationEntity = CardHolderAuthenticationEntity = {}));
var CardType;
(function (CardType) {
    CardType["VISA"] = "VISA";
    CardType["MASTERCARD"] = "MASTERCARD";
    CardType["DISCOVER"] = "DISCOVER";
    CardType["AMEX"] = "AMEX";
    CardType["JCB"] = "JCB";
    CardType["DINERS"] = "DINERS";
})(CardType || (exports.CardType = CardType = {}));
var CaptureMode;
(function (CaptureMode) {
    CaptureMode["AUTO"] = "AUTO";
    CaptureMode["LATER"] = "LATER";
    CaptureMode["MULTIPLE"] = "MULTIPLE";
})(CaptureMode || (exports.CaptureMode = CaptureMode = {}));
var ChallengeRequestIndicator;
(function (ChallengeRequestIndicator) {
    ChallengeRequestIndicator["NoPreference"] = "NO_PREFERENCE";
    ChallengeRequestIndicator["NoChallengeRequested"] = "NO_CHALLENGE_REQUESTED";
    ChallengeRequestIndicator["ChallengePreferred"] = "CHALLENGE_PREFERRED";
    ChallengeRequestIndicator["ChallengeMandated"] = "CHALLENGE_MANDATED";
    ChallengeRequestIndicator["NoChallengeRequestedTransactionRiskAnalysisPerformed"] = "NO_CHALLENGE_REQUESTED_TRANSACTION_RISK_ANALYSIS_PERFORMED";
    ChallengeRequestIndicator["NoChallengeRequestedDataShareOnly"] = "NO_CHALLENGE_REQUESTED_DATA_SHARE_ONLY";
    ChallengeRequestIndicator["NoChallengeRequestedScaAlreadyPerformed"] = "NO_CHALLENGE_REQUESTED_SCA_ALREADY_PERFORMED";
    ChallengeRequestIndicator["NoChallengeRequestedWhitelist"] = "NO_CHALLENGE_REQUESTED_WHITELIST";
    ChallengeRequestIndicator["ChallengeRequestedPromptForWhitelist"] = "CHALLENGE_REQUESTED_PROMPT_FOR_WHITELIST";
})(ChallengeRequestIndicator || (exports.ChallengeRequestIndicator = ChallengeRequestIndicator = {}));
var ChallengeWindowSize;
(function (ChallengeWindowSize) {
    ChallengeWindowSize["Windowed250x400"] = "WINDOWED_250X400";
    ChallengeWindowSize["Windowed390x400"] = "WINDOWED_390X400";
    ChallengeWindowSize["Windowed500x600"] = "WINDOWED_500X600";
    ChallengeWindowSize["Windowed600x400"] = "WINDOWED_600X400";
    ChallengeWindowSize["FullScreen"] = "FULL_SCREEN";
})(ChallengeWindowSize || (exports.ChallengeWindowSize = ChallengeWindowSize = {}));
var Channel;
(function (Channel) {
    Channel["CardNotPresent"] = "CNP";
    Channel["CardPresent"] = "CP";
})(Channel || (exports.Channel = Channel = {}));
var CheckType;
(function (CheckType) {
    CheckType["Personal"] = "PERSONAL";
    CheckType["Business"] = "BUSINESS";
    CheckType["Payroll"] = "PAYROLL";
})(CheckType || (exports.CheckType = CheckType = {}));
var ColorDepth;
(function (ColorDepth) {
    ColorDepth["OneBit"] = "ONE_BIT";
    ColorDepth["TwoBits"] = "TWO_BITS";
    ColorDepth["FourBits"] = "FOUR_BITS";
    ColorDepth["EightBits"] = "EIGHT_BITS";
    ColorDepth["FifteenBits"] = "FIFTEEN_BITS";
    ColorDepth["SixteenBits"] = "SIXTEEN_BITS";
    ColorDepth["TwentyFourBits"] = "TWENTY_FOUR_BITS";
    ColorDepth["ThirtyTwoBits"] = "THIRTY_TWO_BITS";
    ColorDepth["FortyEightBits"] = "FORTY_EIGHT_BITS";
})(ColorDepth || (exports.ColorDepth = ColorDepth = {}));
var CreditDebitIndicator;
(function (CreditDebitIndicator) {
    CreditDebitIndicator["Credit"] = "Credit";
    CreditDebitIndicator["Debit"] = "Debit";
})(CreditDebitIndicator || (exports.CreditDebitIndicator = CreditDebitIndicator = {}));
var CurrencyType;
(function (CurrencyType) {
    CurrencyType[CurrencyType["CURRENCY"] = 0] = "CURRENCY";
    CurrencyType[CurrencyType["POINTS"] = 1] = "POINTS";
    CurrencyType[CurrencyType["CASH_BENEFITS"] = 2] = "CASH_BENEFITS";
    CurrencyType[CurrencyType["FOODSTAMPS"] = 3] = "FOODSTAMPS";
    CurrencyType[CurrencyType["VOUCHER"] = 4] = "VOUCHER";
})(CurrencyType || (exports.CurrencyType = CurrencyType = {}));
var CustomerAuthenticationMethod;
(function (CustomerAuthenticationMethod) {
    CustomerAuthenticationMethod["NotAuthenticated"] = "NOT_AUTHENTICATED";
    CustomerAuthenticationMethod["MerchantSystem"] = "MERCHANT_SYSTEM_AUTHENTICATION";
    CustomerAuthenticationMethod["FederatedId"] = "FEDERATED_ID_AUTHENTICATION";
    CustomerAuthenticationMethod["IssuerCredential"] = "ISSUER_CREDENTIAL_AUTHENTICATION";
    CustomerAuthenticationMethod["ThirdParty"] = "THIRD_PARTY_AUTHENTICATION";
    CustomerAuthenticationMethod["Fido"] = "FIDO_AUTHENTICATION";
})(CustomerAuthenticationMethod || (exports.CustomerAuthenticationMethod = CustomerAuthenticationMethod = {}));
var CustomerDocumentType;
(function (CustomerDocumentType) {
    CustomerDocumentType["NATIONAL"] = "NATIONAL";
    CustomerDocumentType["CPF"] = "CPF";
    CustomerDocumentType["CPNJ"] = "CPNJ";
    CustomerDocumentType["CURP"] = "CURP";
    CustomerDocumentType["SSN"] = "SSN";
    CustomerDocumentType["DRIVER_LICENSE"] = "DRIVER_LICENSE";
    CustomerDocumentType["PASSPORT"] = "PASSPORT";
})(CustomerDocumentType || (exports.CustomerDocumentType = CustomerDocumentType = {}));
var CvnPresenceIndicator;
(function (CvnPresenceIndicator) {
    CvnPresenceIndicator[CvnPresenceIndicator["Present"] = 1] = "Present";
    CvnPresenceIndicator[CvnPresenceIndicator["Illegible"] = 2] = "Illegible";
    CvnPresenceIndicator[CvnPresenceIndicator["NotOnCard"] = 3] = "NotOnCard";
    CvnPresenceIndicator[CvnPresenceIndicator["NotRequested"] = 4] = "NotRequested";
})(CvnPresenceIndicator || (exports.CvnPresenceIndicator = CvnPresenceIndicator = {}));
var DataServiceCriteria;
(function (DataServiceCriteria) {
    DataServiceCriteria["Amount"] = "amount";
    DataServiceCriteria["BankAccountNumber"] = "bankAccountNumber";
    DataServiceCriteria["CaseId"] = "caseId";
    DataServiceCriteria["CardNumberFirstSix"] = "cardNumberFirstSix";
    DataServiceCriteria["CardNumberLastFour"] = "cardNumberLastFour";
    DataServiceCriteria["CaseNumber"] = "caseNumber";
    DataServiceCriteria["Country"] = "country";
    DataServiceCriteria["Currency"] = "currency";
    DataServiceCriteria["DepositReference"] = "depositReference";
    DataServiceCriteria["EndDepositDate"] = "endDepositDate";
    DataServiceCriteria["EndStageDate"] = "endStageDate";
    DataServiceCriteria["Hierarchy"] = "hierarchy";
    DataServiceCriteria["LocalTransactionEndTime"] = "localTransactionEndTime";
    DataServiceCriteria["LocalTransactionStartTime"] = "localTransactionStartTime";
    DataServiceCriteria["MerchantId"] = "merchantId";
    DataServiceCriteria["OrderId"] = "orderId";
    DataServiceCriteria["StartDepositDate"] = "startDepositDate";
    DataServiceCriteria["StartStageDate"] = "startStageDate";
    DataServiceCriteria["SystemHierarchy"] = "systemHierarchy";
    DataServiceCriteria["Timezone"] = "timezone";
    DataServiceCriteria["StartBatchDate"] = "startBatchDate";
    DataServiceCriteria["EndBatchDate"] = "endBatchDate";
})(DataServiceCriteria || (exports.DataServiceCriteria = DataServiceCriteria = {}));
var DecoupledFlowRequest;
(function (DecoupledFlowRequest) {
    DecoupledFlowRequest["DecoupledPreferred"] = "DECOUPLED_PREFERRED";
    DecoupledFlowRequest["DoNotUseDecoupled"] = "DO_NOT_USE_DECOUPLED";
})(DecoupledFlowRequest || (exports.DecoupledFlowRequest = DecoupledFlowRequest = {}));
var DeliveryTimeFrame;
(function (DeliveryTimeFrame) {
    DeliveryTimeFrame["ElectronicDelivery"] = "ELECTRONIC_DELIVERY";
    DeliveryTimeFrame["SameDay"] = "SAME_DAY";
    DeliveryTimeFrame["Overnight"] = "OVERNIGHT";
    DeliveryTimeFrame["TwoDaysOrMore"] = "TWO_DAYS_OR_MORE";
})(DeliveryTimeFrame || (exports.DeliveryTimeFrame = DeliveryTimeFrame = {}));
var DeviceType;
(function (DeviceType) {
    /// <summary>
    /// Indicates PAX device.
    /// </summary>
    DeviceType[DeviceType["PAX_DEVICE"] = 0] = "PAX_DEVICE";
    /// <summary>
    /// Indicates PAX D200 device.
    /// </summary>
    DeviceType[DeviceType["PAX_D200"] = 1] = "PAX_D200";
    /// <summary>
    /// INdicates PAX D210 device.
    /// </summary>
    DeviceType[DeviceType["PAX_D210"] = 2] = "PAX_D210";
    /// <summary>
    /// Indicates a Pax S300 device.
    /// </summary>
    DeviceType[DeviceType["PAX_S300"] = 3] = "PAX_S300";
    /// <summary>
    /// Indicates PAX PX5 device.
    /// </summary>
    DeviceType[DeviceType["PAX_PX5"] = 4] = "PAX_PX5";
    /// <summary>
    /// Indicates PAX PX7 device.
    /// </summary>
    DeviceType[DeviceType["PAX_PX7"] = 5] = "PAX_PX7";
    /// <summary>
    /// Indicates a HeeartSIP iSC250 device.
    /// </summary>
    DeviceType[DeviceType["HPA_ISC250"] = 6] = "HPA_ISC250";
    /// <summary>
    /// Indicates a HeartSIP Lane 3000 device
    /// </summary>
    DeviceType[DeviceType["HPA_LANE3000"] = 7] = "HPA_LANE3000";
    /// <summary>
    /// Indicates a UPA device
    /// </summary>
    DeviceType[DeviceType["UPA_DEVICE"] = 8] = "UPA_DEVICE";
    /// <summary>
    /// Indicates a genius terminal
    /// </summary>
    DeviceType[DeviceType["GENIUS"] = 9] = "GENIUS";
    /// <summary>
    /// Indicates a Nucleus terminal
    /// </summary>
    DeviceType[DeviceType["NUCLEUS_SATURN_1000"] = 10] = "NUCLEUS_SATURN_1000";
    /// <summary>
    /// Indicates a genius verifone P400
    /// </summary>
    DeviceType[DeviceType["GENIUS_VERIFONE_P400"] = 11] = "GENIUS_VERIFONE_P400";
})(DeviceType || (exports.DeviceType = DeviceType = {}));
var DigitalWalletTokenFormat;
(function (DigitalWalletTokenFormat) {
    DigitalWalletTokenFormat["CARD_NUMBER"] = "CARD_NUMBER";
    DigitalWalletTokenFormat["CARD_TOKEN"] = "CARD_TOKEN";
})(DigitalWalletTokenFormat || (exports.DigitalWalletTokenFormat = DigitalWalletTokenFormat = {}));
var EcommerceChannel;
(function (EcommerceChannel) {
    EcommerceChannel["Ecom"] = "ECOM";
    EcommerceChannel["Moto"] = "MOTO";
})(EcommerceChannel || (exports.EcommerceChannel = EcommerceChannel = {}));
var EmailReceipt;
(function (EmailReceipt) {
    EmailReceipt["Never"] = "Never";
    EmailReceipt["All"] = "All";
    EmailReceipt["Approvals"] = "Approvals";
    EmailReceipt["Declines"] = "Declines";
})(EmailReceipt || (exports.EmailReceipt = EmailReceipt = {}));
var EncyptedMobileType;
(function (EncyptedMobileType) {
    EncyptedMobileType["ApplePay"] = "apple-pay";
    EncyptedMobileType["GooglePay"] = "pay-with-google";
    EncyptedMobileType["ClickToPay"] = "click-to-pay";
})(EncyptedMobileType || (exports.EncyptedMobileType = EncyptedMobileType = {}));
var EntryMethod;
(function (EntryMethod) {
    EntryMethod["Swipe"] = "SWIPE";
    EntryMethod["Proximity"] = "PROXIMITY";
    EntryMethod["Manual"] = "MANUAL";
})(EntryMethod || (exports.EntryMethod = EntryMethod = {}));
var Environment;
(function (Environment) {
    Environment["Test"] = "TEST";
    Environment["Production"] = "PRODUCTION";
    Environment["Qa"] = "QA";
})(Environment || (exports.Environment = Environment = {}));
var EmvLastChipRead;
(function (EmvLastChipRead) {
    EmvLastChipRead["SUCCESSFUL"] = "Successful";
    EmvLastChipRead["FAILED"] = "Failed";
    EmvLastChipRead["NOT_A_CHIP_TRANSACTION"] = "NotAChipTransaction";
    EmvLastChipRead["UNKNOWN"] = "Unknown";
})(EmvLastChipRead || (exports.EmvLastChipRead = EmvLastChipRead = {}));
var ExceptionCodes;
(function (ExceptionCodes) {
    // general codes
    ExceptionCodes[ExceptionCodes["AuthenticationError"] = 0] = "AuthenticationError";
    ExceptionCodes[ExceptionCodes["InvalidConfiguration"] = 1] = "InvalidConfiguration";
    // input codes
    ExceptionCodes[ExceptionCodes["InvalidAmount"] = 2] = "InvalidAmount";
    ExceptionCodes[ExceptionCodes["MissingCurrency"] = 3] = "MissingCurrency";
    ExceptionCodes[ExceptionCodes["InvalidCurrency"] = 4] = "InvalidCurrency";
    ExceptionCodes[ExceptionCodes["InvalidDate"] = 5] = "InvalidDate";
    ExceptionCodes[ExceptionCodes["MissingCheckName"] = 6] = "MissingCheckName";
    ExceptionCodes[ExceptionCodes["InvalidPhoneNumber"] = 7] = "InvalidPhoneNumber";
    ExceptionCodes[ExceptionCodes["InvalidZipCode"] = 8] = "InvalidZipCode";
    ExceptionCodes[ExceptionCodes["InvalidEmailAddress"] = 9] = "InvalidEmailAddress";
    ExceptionCodes[ExceptionCodes["InvalidInputLength"] = 10] = "InvalidInputLength";
    // gateway codes
    ExceptionCodes[ExceptionCodes["UnknownGatewayError"] = 11] = "UnknownGatewayError";
    ExceptionCodes[ExceptionCodes["InvalidOriginalTransaction"] = 12] = "InvalidOriginalTransaction";
    ExceptionCodes[ExceptionCodes["NoOpenBatch"] = 13] = "NoOpenBatch";
    ExceptionCodes[ExceptionCodes["InvalidCpcData"] = 14] = "InvalidCpcData";
    ExceptionCodes[ExceptionCodes["InvalidCardData"] = 15] = "InvalidCardData";
    ExceptionCodes[ExceptionCodes["InvalidNumber"] = 16] = "InvalidNumber";
    ExceptionCodes[ExceptionCodes["GatewayTimeout"] = 17] = "GatewayTimeout";
    ExceptionCodes[ExceptionCodes["UnexpectedGatewayResponse"] = 18] = "UnexpectedGatewayResponse";
    ExceptionCodes[ExceptionCodes["GatewayTimeoutReversalError"] = 19] = "GatewayTimeoutReversalError";
    ExceptionCodes[ExceptionCodes["GatewayError"] = 20] = "GatewayError";
    ExceptionCodes[ExceptionCodes["UnexpectedGatewayError"] = 21] = "UnexpectedGatewayError";
    // credit issuer codes
    ExceptionCodes[ExceptionCodes["IncorrectNumber"] = 22] = "IncorrectNumber";
    ExceptionCodes[ExceptionCodes["ExpiredCard"] = 23] = "ExpiredCard";
    ExceptionCodes[ExceptionCodes["InvalidPin"] = 24] = "InvalidPin";
    ExceptionCodes[ExceptionCodes["PinEntriesExceeded"] = 25] = "PinEntriesExceeded";
    ExceptionCodes[ExceptionCodes["InvalidExpiry"] = 26] = "InvalidExpiry";
    ExceptionCodes[ExceptionCodes["PinVerification"] = 27] = "PinVerification";
    ExceptionCodes[ExceptionCodes["IssuerTimeout"] = 28] = "IssuerTimeout";
    ExceptionCodes[ExceptionCodes["IncorrectCvc"] = 29] = "IncorrectCvc";
    ExceptionCodes[ExceptionCodes["CardDeclined"] = 30] = "CardDeclined";
    ExceptionCodes[ExceptionCodes["ProcessingError"] = 31] = "ProcessingError";
    ExceptionCodes[ExceptionCodes["IssuerTimeoutReversalError"] = 32] = "IssuerTimeoutReversalError";
    ExceptionCodes[ExceptionCodes["UnknownCreditError"] = 33] = "UnknownCreditError";
    ExceptionCodes[ExceptionCodes["PossibleFraudDetected"] = 34] = "PossibleFraudDetected";
    // gift codes
    ExceptionCodes[ExceptionCodes["UnknownGiftError"] = 35] = "UnknownGiftError";
    ExceptionCodes[ExceptionCodes["PartialApproval"] = 36] = "PartialApproval";
})(ExceptionCodes || (exports.ExceptionCodes = ExceptionCodes = {}));
var ExemptionReason;
(function (ExemptionReason) {
    ExemptionReason["ApplyExemption"] = "APPLY_EXEMPTION";
    ExemptionReason["EosContinue"] = "CONTINUE";
    ExemptionReason["ForceSecure"] = "FORCE_SECURE";
    ExemptionReason["Block"] = "BLOCK";
})(ExemptionReason || (exports.ExemptionReason = ExemptionReason = {}));
var ExemptStatus;
(function (ExemptStatus) {
    ExemptStatus["LowValue"] = "LOW_VALUE";
    ExemptStatus["TransactionRiskAnalysis"] = "TRANSACTION_RISK_ANALYSIS";
    ExemptStatus["TrustedMerchant"] = "TRUSTED_MERCHANT";
    ExemptStatus["SecureCorporatePayment"] = "SECURE_CORPORATE_PAYMENT";
    ExemptStatus["ScaDelegation"] = "SCA_DELEGATION";
})(ExemptStatus || (exports.ExemptStatus = ExemptStatus = {}));
var FraudFilterMode;
(function (FraudFilterMode) {
    FraudFilterMode["None"] = "NONE";
    FraudFilterMode["Off"] = "OFF";
    FraudFilterMode["Active"] = "ACTIVE";
    FraudFilterMode["Passive"] = "PASSIVE";
})(FraudFilterMode || (exports.FraudFilterMode = FraudFilterMode = {}));
var GatewayProvider;
(function (GatewayProvider) {
    GatewayProvider["GpApi"] = "GP-API";
    GatewayProvider["GpEcom"] = "GP_ECOM";
    GatewayProvider["Portico"] = "PORTICO";
})(GatewayProvider || (exports.GatewayProvider = GatewayProvider = {}));
var GiftEntryMethod;
(function (GiftEntryMethod) {
    GiftEntryMethod[GiftEntryMethod["Swipe"] = 0] = "Swipe";
    GiftEntryMethod[GiftEntryMethod["Alias"] = 1] = "Alias";
    GiftEntryMethod[GiftEntryMethod["Manual"] = 2] = "Manual";
})(GiftEntryMethod || (exports.GiftEntryMethod = GiftEntryMethod = {}));
var HppVersion;
(function (HppVersion) {
    HppVersion["Version1"] = "1";
    HppVersion["Version2"] = "2";
})(HppVersion || (exports.HppVersion = HppVersion = {}));
var InquiryType;
(function (InquiryType) {
    InquiryType["Standard"] = "STANDARD";
    InquiryType["Foodstamp"] = "FOODSTAMP";
    InquiryType["Cash"] = "CASH";
    InquiryType["Points"] = "POINTS";
})(InquiryType || (exports.InquiryType = InquiryType = {}));
var IntervalToExpire;
(function (IntervalToExpire) {
    IntervalToExpire["WEEK"] = "WEEK";
    IntervalToExpire["DAY"] = "DAY";
    IntervalToExpire["TWELVE_HOURS"] = "12_HOURS";
    IntervalToExpire["SIX_HOURS"] = "6_HOURS";
    IntervalToExpire["THREE_HOURS"] = "3_HOURS";
    IntervalToExpire["ONE_HOUR"] = "1_HOUR";
    IntervalToExpire["THIRTY_MINUTES"] = "30_MINUTES";
    IntervalToExpire["TEN_MINUTES"] = "10_MINUTES";
    IntervalToExpire["FIVE_MINUTES"] = "5_MINUTES";
})(IntervalToExpire || (exports.IntervalToExpire = IntervalToExpire = {}));
var LodgingItemType;
(function (LodgingItemType) {
    LodgingItemType["RESTAURANT"] = "RESTAURANT";
    LodgingItemType["GIFT_SHOP"] = "GIFT_SHOP";
    LodgingItemType["MINI_BAR"] = "MINI_BAR";
    LodgingItemType["PHONE"] = "PHONE";
    LodgingItemType["LAUNDRY"] = "LAUNDRY";
    LodgingItemType["OTHER"] = "OTHER";
    LodgingItemType["NO_SHOW"] = "NO_SHOW";
})(LodgingItemType || (exports.LodgingItemType = LodgingItemType = {}));
var ManualEntryMethod;
(function (ManualEntryMethod) {
    ManualEntryMethod[ManualEntryMethod["MOTO"] = 0] = "MOTO";
    ManualEntryMethod[ManualEntryMethod["MAIL"] = 1] = "MAIL";
    ManualEntryMethod[ManualEntryMethod["PHONE"] = 2] = "PHONE";
    ManualEntryMethod[ManualEntryMethod["KEYED"] = 3] = "KEYED";
})(ManualEntryMethod || (exports.ManualEntryMethod = ManualEntryMethod = {}));
var MessageCategory;
(function (MessageCategory) {
    MessageCategory["PaymentAuthentication"] = "PAYMENT_AUTHENTICATION";
    MessageCategory["NonPaymentAuthentication"] = "NON_PAYMENT_AUTHENTICATION";
})(MessageCategory || (exports.MessageCategory = MessageCategory = {}));
var MessageVersion;
(function (MessageVersion) {
    MessageVersion["Version210"] = "2.1.0";
})(MessageVersion || (exports.MessageVersion = MessageVersion = {}));
var MethodUrlCompletion;
(function (MethodUrlCompletion) {
    MethodUrlCompletion["Yes"] = "YES";
    MethodUrlCompletion["No"] = "NO";
    MethodUrlCompletion["Unavailable"] = "UNAVAILABLE";
})(MethodUrlCompletion || (exports.MethodUrlCompletion = MethodUrlCompletion = {}));
var NetGrossIndicator;
(function (NetGrossIndicator) {
    NetGrossIndicator["NET"] = "NET";
    NetGrossIndicator["GROSS"] = "GROSS";
})(NetGrossIndicator || (exports.NetGrossIndicator = NetGrossIndicator = {}));
var OrderTransactionType;
(function (OrderTransactionType) {
    OrderTransactionType["GoodsServicePurchase"] = "GOODS_SERVICE_PURCHASE";
    OrderTransactionType["CheckAcceptance"] = "CHECK_ACCEPTANCE";
    OrderTransactionType["AccountFunding"] = "ACCOUNT_FUNDING";
    OrderTransactionType["QuasiCashTransaction"] = "QUASI_CASH_TRANSACTION";
    OrderTransactionType["PrepaidActivationAndLoad"] = "PREPAID_ACTIVATION_AND_LOAD";
})(OrderTransactionType || (exports.OrderTransactionType = OrderTransactionType = {}));
var PayByLinkStatus;
(function (PayByLinkStatus) {
    PayByLinkStatus["ACTIVE"] = "ACTIVE";
    PayByLinkStatus["INACTIVE"] = "INACTIVE";
    PayByLinkStatus["CLOSED"] = "CLOSED";
    PayByLinkStatus["EXPIRED"] = "EXPIRED";
    PayByLinkStatus["PAID"] = "PAID";
})(PayByLinkStatus || (exports.PayByLinkStatus = PayByLinkStatus = {}));
var PaymentEntryMode;
(function (PaymentEntryMode) {
    PaymentEntryMode["MOTO"] = "MOTO";
    PaymentEntryMode["ECOM"] = "ECOM";
    PaymentEntryMode["IN_APP"] = "IN_APP";
    PaymentEntryMode["CHIP"] = "CHIP";
    PaymentEntryMode["SWIPE"] = "SWIPE";
    PaymentEntryMode["MANUAL"] = "MANUAL";
    PaymentEntryMode["CONTACTLESS_CHIP"] = "CONTACTLESS_CHIP";
    PaymentEntryMode["CONTACTLESS_SWIPE"] = "CONTACTLESS_SWIPE";
    PaymentEntryMode["PHONE"] = "PHONE";
    PaymentEntryMode["MAIL"] = "MAIL";
})(PaymentEntryMode || (exports.PaymentEntryMode = PaymentEntryMode = {}));
var PaymentMethodName;
(function (PaymentMethodName) {
    PaymentMethodName["APM"] = "APM";
    PaymentMethodName["DIGITAL_WALLET"] = "DIGITAL WALLET";
    PaymentMethodName["CARD"] = "CARD";
    /**
     * ACH transaction
     */
    PaymentMethodName["BANK_TRANSFER"] = "BANK TRANSFER";
    /** Open Banking transaction */
    PaymentMethodName["BANK_PAYMENT"] = "BANK PAYMENT";
    /** @var Buy Now Pay Later (BNPL) transaction */
    PaymentMethodName["BNPL"] = "BNPL";
})(PaymentMethodName || (exports.PaymentMethodName = PaymentMethodName = {}));
var PaymentMethodProgram;
(function (PaymentMethodProgram) {
    PaymentMethodProgram["ASSURED_RESERVATION"] = "ASSURED_RESERVATION";
    PaymentMethodProgram["CARD_DEPOSIT"] = "CARD_DEPOSIT";
    PaymentMethodProgram["PURCHASE"] = "PURCHASE";
    PaymentMethodProgram["OTHER"] = "OTHER";
})(PaymentMethodProgram || (exports.PaymentMethodProgram = PaymentMethodProgram = {}));
var PaymentMethodType;
(function (PaymentMethodType) {
    PaymentMethodType[PaymentMethodType["Reference"] = 1] = "Reference";
    PaymentMethodType[PaymentMethodType["Credit"] = 2] = "Credit";
    PaymentMethodType[PaymentMethodType["Debit"] = 4] = "Debit";
    PaymentMethodType[PaymentMethodType["EBT"] = 8] = "EBT";
    PaymentMethodType[PaymentMethodType["Cash"] = 16] = "Cash";
    PaymentMethodType[PaymentMethodType["ACH"] = 32] = "ACH";
    PaymentMethodType[PaymentMethodType["Gift"] = 64] = "Gift";
    PaymentMethodType[PaymentMethodType["Recurring"] = 128] = "Recurring";
    PaymentMethodType[PaymentMethodType["Other"] = 256] = "Other";
    PaymentMethodType[PaymentMethodType["APM"] = 512] = "APM";
    PaymentMethodType[PaymentMethodType["Ewic"] = 1024] = "Ewic";
    PaymentMethodType[PaymentMethodType["BankPayment"] = 2048] = "BankPayment";
    PaymentMethodType[PaymentMethodType["BNPL"] = 4096] = "BNPL";
    PaymentMethodType[PaymentMethodType["Account_Funds"] = 8192] = "Account_Funds";
})(PaymentMethodType || (exports.PaymentMethodType = PaymentMethodType = {}));
var PaymentMethodUsageMode;
(function (PaymentMethodUsageMode) {
    PaymentMethodUsageMode["SINGLE"] = "SINGLE";
    PaymentMethodUsageMode["MULTIPLE"] = "MULTIPLE";
})(PaymentMethodUsageMode || (exports.PaymentMethodUsageMode = PaymentMethodUsageMode = {}));
var PaymentProvider;
(function (PaymentProvider) {
    PaymentProvider["OPEN_BANKING"] = "OPEN_BANKING";
})(PaymentProvider || (exports.PaymentProvider = PaymentProvider = {}));
var PaymentSchedule;
(function (PaymentSchedule) {
    PaymentSchedule[PaymentSchedule["Dynamic"] = 0] = "Dynamic";
    PaymentSchedule[PaymentSchedule["FirstDayOfTheMonth"] = 1] = "FirstDayOfTheMonth";
    PaymentSchedule[PaymentSchedule["LastDayOfTheMonth"] = 2] = "LastDayOfTheMonth";
})(PaymentSchedule || (exports.PaymentSchedule = PaymentSchedule = {}));
var PaymentType;
(function (PaymentType) {
    PaymentType["REFUND"] = "REFUND";
    PaymentType["SALE"] = "SALE";
})(PaymentType || (exports.PaymentType = PaymentType = {}));
var PhoneNumberType;
(function (PhoneNumberType) {
    PhoneNumberType["HOME"] = "HOME";
    PhoneNumberType["WORK"] = "WORK";
    PhoneNumberType["SHIPPING"] = "SHIPPING";
    PhoneNumberType["MOBILE"] = "MOBILE";
})(PhoneNumberType || (exports.PhoneNumberType = PhoneNumberType = {}));
var PreOrderIndicator;
(function (PreOrderIndicator) {
    PreOrderIndicator["MerchandiseAvailable"] = "MERCHANDISE_AVAILABLE";
    PreOrderIndicator["FutureAvailability"] = "FUTURE_AVAILABILITY";
})(PreOrderIndicator || (exports.PreOrderIndicator = PreOrderIndicator = {}));
var PriorAuthenticationMethod;
(function (PriorAuthenticationMethod) {
    PriorAuthenticationMethod["FrictionlessAuthentication"] = "FRICTIONLESS_AUTHENTICATION";
    PriorAuthenticationMethod["ChallengeOccurred"] = "CHALLENGE_OCCURRED";
    PriorAuthenticationMethod["AvsVerified"] = "AVS_VERIFIED";
    PriorAuthenticationMethod["OtherIssuerMethod"] = "OTHER_ISSUER_METHOD";
})(PriorAuthenticationMethod || (exports.PriorAuthenticationMethod = PriorAuthenticationMethod = {}));
var ReasonCode;
(function (ReasonCode) {
    ReasonCode["Fraud"] = "FRAUD";
    ReasonCode["FalsePositive"] = "FALSEPOSITIVE";
    ReasonCode["OutOfStock"] = "OUTOFSTOCK";
    ReasonCode["InStock"] = "INSTOCK";
    ReasonCode["Other"] = "OTHER";
    ReasonCode["NotGiven"] = "NOTGIVEN";
})(ReasonCode || (exports.ReasonCode = ReasonCode = {}));
var RecurringSequence;
(function (RecurringSequence) {
    RecurringSequence[RecurringSequence["First"] = 0] = "First";
    RecurringSequence[RecurringSequence["Subsequent"] = 1] = "Subsequent";
    RecurringSequence[RecurringSequence["Last"] = 2] = "Last";
})(RecurringSequence || (exports.RecurringSequence = RecurringSequence = {}));
var RecurringType;
(function (RecurringType) {
    RecurringType[RecurringType["Fixed"] = 0] = "Fixed";
    RecurringType[RecurringType["Variable"] = 1] = "Variable";
})(RecurringType || (exports.RecurringType = RecurringType = {}));
var ReorderIndicator;
(function (ReorderIndicator) {
    ReorderIndicator["FirstTimeOrder"] = "FIRST_TIME_ORDER";
    ReorderIndicator["Reorder"] = "REORDER";
})(ReorderIndicator || (exports.ReorderIndicator = ReorderIndicator = {}));
var ReportType;
(function (ReportType) {
    ReportType[ReportType["FindTransactions"] = 1] = "FindTransactions";
    ReportType[ReportType["Activity"] = 2] = "Activity";
    ReportType[ReportType["BatchDetail"] = 4] = "BatchDetail";
    ReportType[ReportType["BatchHistory"] = 8] = "BatchHistory";
    ReportType[ReportType["DocumentDisputeDetail"] = 8] = "DocumentDisputeDetail";
    ReportType[ReportType["BatchSummary"] = 16] = "BatchSummary";
    ReportType[ReportType["OpenAuths"] = 32] = "OpenAuths";
    ReportType[ReportType["Search"] = 64] = "Search";
    ReportType[ReportType["TransactionDetail"] = 128] = "TransactionDetail";
    ReportType[ReportType["FindDeposits"] = 256] = "FindDeposits";
    ReportType[ReportType["DepositDetail"] = 2048] = "DepositDetail";
    ReportType[ReportType["DisputeDetail"] = 4096] = "DisputeDetail";
    ReportType[ReportType["SettlementDisputeDetail"] = 8192] = "SettlementDisputeDetail";
    ReportType[ReportType["FindTransactionsPaged"] = 32768] = "FindTransactionsPaged";
    ReportType[ReportType["FindSettlementTransactionsPaged"] = 65536] = "FindSettlementTransactionsPaged";
    ReportType[ReportType["FindDepositsPaged"] = 131072] = "FindDepositsPaged";
    ReportType[ReportType["FindDisputesPaged"] = 262144] = "FindDisputesPaged";
    ReportType[ReportType["FindSettlementDisputesPaged"] = 524288] = "FindSettlementDisputesPaged";
    ReportType[ReportType["FindStoredPaymentMethodsPaged"] = 1048576] = "FindStoredPaymentMethodsPaged";
    ReportType[ReportType["StoredPaymentMethodDetail"] = 2097152] = "StoredPaymentMethodDetail";
})(ReportType || (exports.ReportType = ReportType = {}));
var ScheduleFrequency;
(function (ScheduleFrequency) {
    ScheduleFrequency["Weekly"] = "Weekly";
    ScheduleFrequency["BiWeekly"] = "Bi-Weekly";
    ScheduleFrequency["BiMonthly"] = "Bi-Monthly";
    ScheduleFrequency["SemiMonthly"] = "Semi-Monthly";
    ScheduleFrequency["Monthly"] = "Monthly";
    ScheduleFrequency["Quarterly"] = "Quarterly";
    ScheduleFrequency["SemiAnnually"] = "Semi-Annually";
    ScheduleFrequency["Annually"] = "Annually";
})(ScheduleFrequency || (exports.ScheduleFrequency = ScheduleFrequency = {}));
var SdkInterface;
(function (SdkInterface) {
    SdkInterface["Native"] = "NATIVE";
    SdkInterface["Browser"] = "BROWSER";
    SdkInterface["Both"] = "BOTH";
})(SdkInterface || (exports.SdkInterface = SdkInterface = {}));
var SdkUiType;
(function (SdkUiType) {
    SdkUiType["Text"] = "TEXT";
    SdkUiType["SingleSelect"] = "SINGLE_SELECT";
    SdkUiType["MultiSelect"] = "MULTI_SELECT";
    SdkUiType["Oob"] = "OOB";
    SdkUiType["HtmlOther"] = "HTML_OTHER";
})(SdkUiType || (exports.SdkUiType = SdkUiType = {}));
var SearchCriteria;
(function (SearchCriteria) {
    SearchCriteria["AccountName"] = "accountName";
    SearchCriteria["AccountNumberLastFour"] = "accountNumberLastFour";
    SearchCriteria["AltPaymentStatus"] = "altPaymentStatus";
    SearchCriteria["AquirerReferenceNumber"] = "aquirerReferenceNumber";
    SearchCriteria["AuthCode"] = "authCode";
    SearchCriteria["BankRoutingNumber"] = "bankRoutingNumber";
    SearchCriteria["BatchId"] = "batchId";
    SearchCriteria["BatchSequenceNumber"] = "batchSequenceNumber";
    SearchCriteria["BrandReference"] = "brandReference";
    SearchCriteria["BuyerEmailAddress"] = "buyerEmailAddress";
    SearchCriteria["CardBrand"] = "cardBrand";
    SearchCriteria["CardHolderFirstName"] = "cardHolderFirstName";
    SearchCriteria["CardHolderLastName"] = "cardHolderLastName";
    SearchCriteria["CardHolderPoNumber"] = "cardHolderPoNumber";
    SearchCriteria["CardNumberFirstSix"] = "cardNumberFirstSix";
    SearchCriteria["CardNumberLastFour"] = "cardNumberLastFour";
    SearchCriteria["Channel"] = "channel";
    SearchCriteria["CheckFirstName"] = "checkFirstName";
    SearchCriteria["CheckLastName"] = "checkLastName";
    SearchCriteria["CheckName"] = "checkName";
    SearchCriteria["CheckNumber"] = "checkNumber";
    SearchCriteria["ClerkId"] = "clerkId";
    SearchCriteria["ClientTransactionId"] = "clientTransactionId";
    SearchCriteria["CustomerId"] = "customerId";
    SearchCriteria["DepositReference"] = "";
    SearchCriteria["DepositStatus"] = "depositStatus";
    SearchCriteria["DisplayName"] = "displayName";
    SearchCriteria["EndDate"] = "endDate";
    SearchCriteria["FullyCaptured"] = "fullyCaptured";
    SearchCriteria["GiftCurrency"] = "giftCurrency";
    SearchCriteria["GiftMaskedAlias"] = "giftMaskedAlias";
    SearchCriteria["InvoiceNumber"] = "invoiceNumber";
    SearchCriteria["IssuerResult"] = "issuerResult";
    SearchCriteria["IssuerTransactionId"] = "issuerTransactionId";
    SearchCriteria["OneTime"] = "oneTime";
    SearchCriteria["PaymentEntryMode"] = "paymentEntryMode";
    SearchCriteria["PaymentMethodKey"] = "paymentMethodKey";
    SearchCriteria["PaymentMethodType"] = "paymentMethodType";
    SearchCriteria["PaymentType"] = "paymentType";
    SearchCriteria["PaymentMethod"] = "paymentMethod";
    SearchCriteria["PaymentMethodName"] = "paymentMethodName";
    SearchCriteria["PaymentMethodUsageMode"] = "paymentMethodUsageMode";
    SearchCriteria["PaymentProvider"] = "paymentProvider";
    SearchCriteria["ReferenceNumber"] = "referenceNumber";
    SearchCriteria["SettlementAmount"] = "settlementAmount";
    SearchCriteria["ScheduleId"] = "scheduleId";
    SearchCriteria["SiteTrace"] = "siteTrace";
    SearchCriteria["StartDate"] = "startDate";
    SearchCriteria["TokenFirstSix"] = "tokenFirstSix";
    SearchCriteria["TokenLastFour"] = "tokenLastFour";
    SearchCriteria["TransactionStatus"] = "transactionStatus";
    SearchCriteria["DisputeStage"] = "disputeStage";
    SearchCriteria["DisputeStatus"] = "disputeStatus";
    SearchCriteria["DisputeDocumentId"] = "disputeDocumentId";
    SearchCriteria["UniqueDeviceId"] = "uniqueDeviceId";
    SearchCriteria["UserName"] = "username";
    SearchCriteria["Name"] = "name";
    SearchCriteria["DepositId"] = "depositId";
    SearchCriteria["FromTimeLastUpdated"] = "fromTimeLastUpdated";
    SearchCriteria["ToTimeLastUpdated"] = "toTimeLastUpdated";
    SearchCriteria["StoredPaymentMethodId"] = "storedPaymentMethodId";
    SearchCriteria["StoredPaymentMethodStatus"] = "storedPaymentMethodStatus";
    SearchCriteria["ActionType"] = "actionType";
    SearchCriteria["ActionId"] = "actionId";
    SearchCriteria["Resource"] = "resource";
    SearchCriteria["ResourceStatus"] = "resourceStatus";
    SearchCriteria["ResourceId"] = "resourceId";
    SearchCriteria["MerchantName"] = "merchantName";
    SearchCriteria["AppName"] = "appName";
    SearchCriteria["Version"] = "version";
    SearchCriteria["ResponseCode"] = "responseCode";
    SearchCriteria["HttpResponseCode"] = "httpResponseCode";
    SearchCriteria["ReturnPii"] = "returnPii";
    SearchCriteria["RiskAssessmentMode"] = "riskAssessmentMode";
    SearchCriteria["RiskAssessmentResult"] = "riskAssessmentResult";
    SearchCriteria["RiskAssessmentReasonCode"] = "riskAssessmentReasonCode";
    SearchCriteria["PayByLinkStatus"] = "payByLinkStatus";
    SearchCriteria["Description"] = "description";
    SearchCriteria["ExpirationDate"] = "expirationDate";
    SearchCriteria["AccountStatus"] = "accountStatus";
    SearchCriteria["Address"] = "address";
})(SearchCriteria || (exports.SearchCriteria = SearchCriteria = {}));
var SecCode;
(function (SecCode) {
    SecCode["PPD"] = "PPD";
    SecCode["CCD"] = "CCD";
    SecCode["POP"] = "POP";
    SecCode["WEB"] = "WEB";
    SecCode["TEL"] = "TEL";
    SecCode["EBronze"] = "EBronze";
})(SecCode || (exports.SecCode = SecCode = {}));
var Secure3dStatus;
(function (Secure3dStatus) {
    Secure3dStatus["SuccessAuthenticated"] = "SUCCESS_AUTHENTICATED";
    Secure3dStatus["SuccessAttemptMade"] = "SUCCESS_ATTEMPT_MADE";
    Secure3dStatus["NotAuthenticated"] = "NOT_AUTHENTICATED";
    Secure3dStatus["Failed"] = "FAILED";
    Secure3dStatus["NotEnrolled"] = "NOT_ENROLLED";
    Secure3dStatus["Available"] = "AVAILABLE";
    Secure3dStatus["Enrolled"] = "ENROLLED";
    Secure3dStatus["ChallengeRequired"] = "CHALLENGE_REQUIRED";
})(Secure3dStatus || (exports.Secure3dStatus = Secure3dStatus = {}));
var Secure3dVersion;
(function (Secure3dVersion) {
    Secure3dVersion["NONE"] = "NONE";
    Secure3dVersion["ONE"] = "ONE";
    Secure3dVersion["TWO"] = "TWO";
    Secure3dVersion["ANY"] = "ANY";
})(Secure3dVersion || (exports.Secure3dVersion = Secure3dVersion = {}));
var SendFileType;
(function (SendFileType) {
    SendFileType[SendFileType["Banner"] = 0] = "Banner";
    SendFileType[SendFileType["Logo"] = 1] = "Logo";
})(SendFileType || (exports.SendFileType = SendFileType = {}));
var ShaHashType;
(function (ShaHashType) {
    ShaHashType["SHA1"] = "SHA1";
    ShaHashType["SHA256"] = "SHA256";
    ShaHashType["SHA512"] = "SHA512";
})(ShaHashType || (exports.ShaHashType = ShaHashType = {}));
var ShippingMethod;
(function (ShippingMethod) {
    ShippingMethod["BillingAddress"] = "BILLING_ADDRESS";
    ShippingMethod["VerifiedAddress"] = "ANOTHER_VERIFIED_ADDRESS";
    ShippingMethod["UnverifiedAddress"] = "UNVERIFIED_ADDRESS";
    ShippingMethod["ShipToStore"] = "SHIP_TO_STORE";
    ShippingMethod["DigitalGoods"] = "DIGITAL_GOODS";
    ShippingMethod["TravelAndEventTickets"] = "TRAVEL_AND_EVENT_TICKETS";
    ShippingMethod["Other"] = "OTHER";
})(ShippingMethod || (exports.ShippingMethod = ShippingMethod = {}));
var SortDirection;
(function (SortDirection) {
    SortDirection["Asc"] = "ASC";
    SortDirection["Desc"] = "DESC";
})(SortDirection || (exports.SortDirection = SortDirection = {}));
var StoredCredentialInitiator;
(function (StoredCredentialInitiator) {
    StoredCredentialInitiator["CardHolder"] = "C";
    StoredCredentialInitiator["Merchant"] = "M";
    StoredCredentialInitiator["Payer"] = "Payer";
})(StoredCredentialInitiator || (exports.StoredCredentialInitiator = StoredCredentialInitiator = {}));
var StoredCredentialReason;
(function (StoredCredentialReason) {
    StoredCredentialReason["INCREMENTAL"] = "INCREMENTAL";
    StoredCredentialReason["RESUBMISSION"] = "RESUBMISSION";
    StoredCredentialReason["REAUTHORIZATION"] = "REAUTHORIZATION";
    StoredCredentialReason["DELAYED"] = "DELAYED";
    StoredCredentialReason["NO_SHOW"] = "NO_SHOW";
})(StoredCredentialReason || (exports.StoredCredentialReason = StoredCredentialReason = {}));
var StoredCredentialSequence;
(function (StoredCredentialSequence) {
    StoredCredentialSequence["FIRST"] = "first";
    StoredCredentialSequence["SUBSEQUENT"] = "subsequent";
    StoredCredentialSequence["LAST"] = "last";
})(StoredCredentialSequence || (exports.StoredCredentialSequence = StoredCredentialSequence = {}));
var StoredCredentialType;
(function (StoredCredentialType) {
    StoredCredentialType["ONEOFF"] = "oneoff";
    StoredCredentialType["INSTALLMENT"] = "installment";
    StoredCredentialType["RECURRING"] = "recurring";
    StoredCredentialType["UNSCHEDULED"] = "UNSCHEDULED";
    StoredCredentialType["SUBSCRIPTION"] = "SUBSCRIPTION";
    StoredCredentialType["MAINTAIN_PAYMENT_METHOD"] = "MAINTAIN_PAYMENT_METHOD";
    StoredCredentialType["MAINTAIN_PAYMENT_VERIFICATION"] = "MAINTAIN_PAYMENT_VERIFICATION";
    StoredCredentialType["ADD_PAYMENT_METHOD"] = "ADD_PAYMENT_METHOD";
    StoredCredentialType["SPLIT_OR_DELAYED_SHIPMENT"] = "SPLIT_OR_DELAYED_SHIPMENT";
    StoredCredentialType["TOP_UP"] = "TOP_UP";
    StoredCredentialType["MAIL_ORDER"] = "MAIL_ORDER";
    StoredCredentialType["TELEPHONE_ORDER"] = "TELEPHONE_ORDER";
    StoredCredentialType["WHITELIST_STATUS_CHECK"] = "WHITELIST_STATUS_CHECK";
    StoredCredentialType["OTHER_PAYMENT"] = "OTHER_PAYMENT";
    StoredCredentialType["BILLING_AGREEMENT"] = "BILLING_AGREEMENT";
})(StoredCredentialType || (exports.StoredCredentialType = StoredCredentialType = {}));
var StoredPaymentMethodSortProperty;
(function (StoredPaymentMethodSortProperty) {
    StoredPaymentMethodSortProperty["TimeCreated"] = "TIME_CREATED";
})(StoredPaymentMethodSortProperty || (exports.StoredPaymentMethodSortProperty = StoredPaymentMethodSortProperty = {}));
var TaxType;
(function (TaxType) {
    TaxType[TaxType["NotUsed"] = 0] = "NotUsed";
    TaxType[TaxType["SalesTax"] = 1] = "SalesTax";
    TaxType[TaxType["TaxExempt"] = 2] = "TaxExempt";
})(TaxType || (exports.TaxType = TaxType = {}));
var TimeZoneConversion;
(function (TimeZoneConversion) {
    TimeZoneConversion[TimeZoneConversion["UTC"] = 0] = "UTC";
    TimeZoneConversion[TimeZoneConversion["Merchant"] = 1] = "Merchant";
    TimeZoneConversion[TimeZoneConversion["Datacenter"] = 2] = "Datacenter";
})(TimeZoneConversion || (exports.TimeZoneConversion = TimeZoneConversion = {}));
var TrackNumber;
(function (TrackNumber) {
    TrackNumber[TrackNumber["UNKNOWN"] = 0] = "UNKNOWN";
    TrackNumber[TrackNumber["TRACK_ONE"] = 1] = "TRACK_ONE";
    TrackNumber[TrackNumber["TRACK_TWO"] = 2] = "TRACK_TWO";
    TrackNumber[TrackNumber["BOTH_ONE_AND_TWO"] = 3] = "BOTH_ONE_AND_TWO";
})(TrackNumber || (exports.TrackNumber = TrackNumber = {}));
var TransactionModifier;
(function (TransactionModifier) {
    TransactionModifier[TransactionModifier["None"] = 1] = "None";
    TransactionModifier[TransactionModifier["Incremental"] = 2] = "Incremental";
    TransactionModifier[TransactionModifier["Additional"] = 4] = "Additional";
    TransactionModifier[TransactionModifier["Offline"] = 8] = "Offline";
    TransactionModifier[TransactionModifier["LevelII"] = 16] = "LevelII";
    TransactionModifier[TransactionModifier["FraudDecline"] = 32] = "FraudDecline";
    TransactionModifier[TransactionModifier["ChipDecline"] = 64] = "ChipDecline";
    TransactionModifier[TransactionModifier["CashBack"] = 128] = "CashBack";
    TransactionModifier[TransactionModifier["Voucher"] = 256] = "Voucher";
    TransactionModifier[TransactionModifier["Secure3D"] = 512] = "Secure3D";
    TransactionModifier[TransactionModifier["HostedRequest"] = 1024] = "HostedRequest";
    TransactionModifier[TransactionModifier["Recurring"] = 2048] = "Recurring";
    TransactionModifier[TransactionModifier["EncryptedMobile"] = 4096] = "EncryptedMobile";
    TransactionModifier[TransactionModifier["AlternativePaymentMethod"] = 8192] = "AlternativePaymentMethod";
    TransactionModifier[TransactionModifier["DecryptedMobile"] = 16384] = "DecryptedMobile";
    TransactionModifier[TransactionModifier["LevelIII"] = 32768] = "LevelIII";
})(TransactionModifier || (exports.TransactionModifier = TransactionModifier = {}));
var TransactionSortProperty;
(function (TransactionSortProperty) {
    TransactionSortProperty["TIME_CREATED"] = "TIME_CREATED";
    TransactionSortProperty["STATUS"] = "STATUS";
    TransactionSortProperty["TYPE"] = "TYPE";
    TransactionSortProperty["DEPOSIT_ID"] = "DEPOSIT_ID";
    TransactionSortProperty["ID"] = "ID";
})(TransactionSortProperty || (exports.TransactionSortProperty = TransactionSortProperty = {}));
var TransactionType;
(function (TransactionType) {
    TransactionType[TransactionType["Decline"] = 1] = "Decline";
    TransactionType[TransactionType["Verify"] = 2] = "Verify";
    TransactionType[TransactionType["Capture"] = 4] = "Capture";
    TransactionType[TransactionType["Auth"] = 8] = "Auth";
    TransactionType[TransactionType["Refund"] = 16] = "Refund";
    TransactionType[TransactionType["Reversal"] = 32] = "Reversal";
    TransactionType[TransactionType["Sale"] = 64] = "Sale";
    TransactionType[TransactionType["Edit"] = 128] = "Edit";
    TransactionType[TransactionType["Void"] = 256] = "Void";
    TransactionType[TransactionType["AddValue"] = 512] = "AddValue";
    TransactionType[TransactionType["Balance"] = 1024] = "Balance";
    TransactionType[TransactionType["Activate"] = 2048] = "Activate";
    TransactionType[TransactionType["EncryptedMobile"] = 2048] = "EncryptedMobile";
    TransactionType[TransactionType["Alias"] = 4096] = "Alias";
    TransactionType[TransactionType["Replace"] = 8192] = "Replace";
    TransactionType[TransactionType["Reward"] = 16384] = "Reward";
    TransactionType[TransactionType["DecryptedMobile"] = 16384] = "DecryptedMobile";
    TransactionType[TransactionType["Deactivate"] = 32768] = "Deactivate";
    TransactionType[TransactionType["BatchClose"] = 65536] = "BatchClose";
    TransactionType[TransactionType["Create"] = 131072] = "Create";
    TransactionType[TransactionType["Delete"] = 262144] = "Delete";
    TransactionType[TransactionType["BenefitWithDrawal"] = 1] = "BenefitWithDrawal";
    TransactionType[TransactionType["Fetch"] = 524288] = "Fetch";
    TransactionType[TransactionType["Search"] = 1048576] = "Search";
    TransactionType[TransactionType["Hold"] = 2097152] = "Hold";
    TransactionType[TransactionType["Release"] = 8388608] = "Release";
    TransactionType[TransactionType["DccRateLookup"] = 8388608] = "DccRateLookup";
    TransactionType[TransactionType["VerifyEnrolled"] = 16777216] = "VerifyEnrolled";
    TransactionType[TransactionType["VerifySignature"] = 33554432] = "VerifySignature";
    TransactionType[TransactionType["TokenDelete"] = 67108864] = "TokenDelete";
    TransactionType[TransactionType["RiskAssess"] = 134217728] = "RiskAssess";
    TransactionType[TransactionType["InitiateAuthentication"] = 268435456] = "InitiateAuthentication";
    TransactionType[TransactionType["TokenUpdate"] = -2147483648] = "TokenUpdate";
    TransactionType[TransactionType["Tokenize"] = 2] = "Tokenize";
    /// <summary>
    ///
    /// ProPay: Create Account
    /// </summary>
    TransactionType[TransactionType["CreateAccount"] = 256] = "CreateAccount";
    /// <summary>
    /// ProPay: Edit Account
    /// </summary>
    TransactionType[TransactionType["EditAccount"] = 512] = "EditAccount";
    /// <summary>
    /// ProPay: Reset Account Password
    /// </summary>
    TransactionType[TransactionType["ResetPassword"] = 1024] = "ResetPassword";
    /// <summary>
    /// ProPay: Renew Account
    /// </summary>
    TransactionType[TransactionType["RenewAccount"] = 2048] = "RenewAccount";
    /// <summary>
    /// ProPay: Update Beneficial Ownership Information
    /// </summary>
    TransactionType[TransactionType["UpdateBeneficialOwnership"] = 4096] = "UpdateBeneficialOwnership";
    /// <summary>
    /// ProPay: Disown an account
    /// </summary>
    TransactionType[TransactionType["DisownAccount"] = 8192] = "DisownAccount";
    /// <summary>
    /// ProPay: Upload a document to a ProPay account related to a chargeback
    /// </summary>
    TransactionType[TransactionType["UploadDocumentChargeback"] = 16384] = "UploadDocumentChargeback";
    /// <summary>
    /// ProPay: Upload a document to a ProPay account
    /// </summary>
    TransactionType[TransactionType["UploadDocument"] = 32768] = "UploadDocument";
    /// <summary>
    /// ProPay: Obtain a single-sign-on key
    /// </summary>
    TransactionType[TransactionType["ObtainSSOKey"] = 65536] = "ObtainSSOKey";
    /// <summary>
    /// ProPay: Update bank account ownership information
    /// </summary>
    TransactionType[TransactionType["UpdateBankAccountOwnership"] = 131072] = "UpdateBankAccountOwnership";
    /// <summary>
    /// ProPay: Add funds to a ProPay account (EFT)
    /// </summary>
    TransactionType[TransactionType["AddFunds"] = 262144] = "AddFunds";
    /// <summary>
    /// ProPay: Sweep funds from a ProPay account (EFT)
    /// </summary>
    TransactionType[TransactionType["SweepFunds"] = 524288] = "SweepFunds";
    /// <summary>
    /// ProPay: Add a card for Flash Funds
    /// </summary>
    TransactionType[TransactionType["AddCardFlashFunds"] = 1048576] = "AddCardFlashFunds";
    TransactionType[TransactionType["Detokenize"] = 1048576] = "Detokenize";
    /// <summary>
    /// ProPay: Move money out via Flash Funds
    /// </summary>
    TransactionType[TransactionType["PushMoneyFlashFunds"] = 2097152] = "PushMoneyFlashFunds";
    TransactionType[TransactionType["DisputeAcceptance"] = 2097152] = "DisputeAcceptance";
    TransactionType[TransactionType["DisputeChallenge"] = 4194304] = "DisputeChallenge";
    /// <summary>
    /// ProPay: Disburse funds to a ProPay account
    /// </summary>
    TransactionType[TransactionType["DisburseFunds"] = 4194304] = "DisburseFunds";
    /// <summary>
    /// ProPay: SpendBack Transaction
    /// </summary>
    TransactionType[TransactionType["SpendBack"] = 8388608] = "SpendBack";
    /// <summary>
    /// ProPay: Roll back a SplitPay transaction
    /// </summary>
    TransactionType[TransactionType["ReverseSplitPay"] = 16777216] = "ReverseSplitPay";
    TransactionType[TransactionType["Confirm"] = 16777216] = "Confirm";
    /// <summary>
    /// ProPay: Split funds from an existing transaction
    /// </summary>
    TransactionType[TransactionType["SplitFunds"] = 33554432] = "SplitFunds";
    /// <summary>
    /// ProPay: Get Account details
    /// </summary>
    TransactionType[TransactionType["GetAccountDetails"] = 67108864] = "GetAccountDetails";
    /// <summary>
    /// ProPay: Get Account balance
    /// </summary>
    TransactionType[TransactionType["GetAccountBalance"] = 134217728] = "GetAccountBalance";
    /// <summary>
    /// Indicates a transaction reauthorization
    /// </summary>
    TransactionType[TransactionType["Reauth"] = 268435456] = "Reauth";
    /// <summary>
    ///
    /// </summary>
    TransactionType[TransactionType["SiteConfig"] = 536870912] = "SiteConfig";
    /// <summary>
    ///
    /// </summary>
    TransactionType[TransactionType["TimeRequest"] = 1073741824] = "TimeRequest";
    /// <summary>
    /// Get Token Information for the given token
    /// </summary>
    TransactionType[TransactionType["GetTokenInfo"] = -2147483648] = "GetTokenInfo";
    TransactionType[TransactionType["PayLinkUpdate"] = -2147483648] = "PayLinkUpdate";
    TransactionType[TransactionType["OrderDevice"] = 1] = "OrderDevice";
})(TransactionType || (exports.TransactionType = TransactionType = {}));
var ProPayAccountStatus;
(function (ProPayAccountStatus) {
    ProPayAccountStatus[ProPayAccountStatus["ReadyToProcess"] = 0] = "ReadyToProcess";
    ProPayAccountStatus[ProPayAccountStatus["FraudAccount"] = 1] = "FraudAccount";
    ProPayAccountStatus[ProPayAccountStatus["RiskwiseDeclined"] = 2] = "RiskwiseDeclined";
    ProPayAccountStatus[ProPayAccountStatus["Hold"] = 3] = "Hold";
    ProPayAccountStatus[ProPayAccountStatus["Canceled"] = 4] = "Canceled";
    ProPayAccountStatus[ProPayAccountStatus["FraudVictim"] = 5] = "FraudVictim";
    ProPayAccountStatus[ProPayAccountStatus["ClosedEula"] = 6] = "ClosedEula";
    ProPayAccountStatus[ProPayAccountStatus["ClosedExcessiveChargeback"] = 7] = "ClosedExcessiveChargeback";
})(ProPayAccountStatus || (exports.ProPayAccountStatus = ProPayAccountStatus = {}));
var MobilePaymentMethodType;
(function (MobilePaymentMethodType) {
    MobilePaymentMethodType["APPLEPAY"] = "apple-pay";
    MobilePaymentMethodType["GOOGLEPAY"] = "pay-with-google";
})(MobilePaymentMethodType || (exports.MobilePaymentMethodType = MobilePaymentMethodType = {}));
var PaymentDataSourceType;
(function (PaymentDataSourceType) {
    PaymentDataSourceType["APPLEPAY"] = "ApplePay";
    PaymentDataSourceType["APPLEPAYAPP"] = "ApplePayApp";
    PaymentDataSourceType["APPLEPAYWEB"] = "ApplePayWeb";
    PaymentDataSourceType["GOOGLEPAYAPP"] = "GooglePayApp";
    PaymentDataSourceType["GOOGLEPAYWEB"] = "GooglePayWeb";
    PaymentDataSourceType["DISCOVER3DSECURE"] = "Discover 3DSecure";
})(PaymentDataSourceType || (exports.PaymentDataSourceType = PaymentDataSourceType = {}));
var PropayTermsVersion;
(function (PropayTermsVersion) {
    PropayTermsVersion[PropayTermsVersion["merchantUS"] = 1] = "merchantUS";
    PropayTermsVersion[PropayTermsVersion["paymentUS"] = 2] = "paymentUS";
    PropayTermsVersion[PropayTermsVersion["merchantCA"] = 3] = "merchantCA";
    PropayTermsVersion[PropayTermsVersion["merchantUK"] = 4] = "merchantUK";
    PropayTermsVersion[PropayTermsVersion["merchantAU"] = 5] = "merchantAU";
})(PropayTermsVersion || (exports.PropayTermsVersion = PropayTermsVersion = {}));
//# sourceMappingURL=Enums.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecurringEntity = void 0;
/* eslint-disable indent */
const __1 = require("../");
class RecurringEntity {
    /// <summary>
    /// All resource should be supplied a merchant-/application-defined ID.
    /// </summary>
    id;
    /// <summary>
    /// All resources should be supplied a gateway-defined ID.
    /// </summary>
    key;
    /// <summary>
    /// Searches for a specific record by `id`.
    /// </summary>
    /// <param name="id">The ID of the record to find</summary>
    /// <returns>`TResult` or `null` if the record cannot be found.</returns>
    /// <exception cref="UnsupportedTransactionError">
    /// Thrown when gateway does not support retrieving recurring records.
    /// </exception>
    static find(id, configName = "default") {
        const client = __1.ServicesContainer.instance().getRecurringClient(configName);
        if (!client.supportsRetrieval) {
            throw new __1.UnsupportedTransactionError();
        }
        const identifier = RecurringEntity.getIdentifierName(this);
        return __1.RecurringService.search(this)
            .addSearchCriteria(identifier, id)
            .execute(configName)
            .then((response) => {
            if (!response || response.length === 0) {
                return;
            }
            const entity = response[0] || response;
            if (entity) {
                return __1.RecurringService.get(entity, configName);
            }
            return;
        });
    }
    /// <summary>
    /// Lists all records of type `TResult`.
    /// </summary>
    /// <exception cref="UnsupportedTransactionError">
    /// Thrown when gateway does not support retrieving recurring records.
    /// </exception>
    static findAll(configName = "default") {
        const client = __1.ServicesContainer.instance().getRecurringClient();
        if (client.supportsRetrieval) {
            return __1.RecurringService.search(this).execute(configName);
        }
        throw new __1.UnsupportedTransactionError();
    }
    static getIdentifierName(fn) {
        if (fn.name === "Customer") {
            return "customerIdentifier";
        }
        else if (fn.name === "RecurringPaymentMethod") {
            return "paymentMethodIdentifier";
        }
        return "scheduleIdentifier";
    }
    /// <summary>
    /// Creates a resource
    /// </summary>
    /// <returns>TResult</returns>
    create(configName = "default") {
        return __1.RecurringService.create(this, configName);
    }
    /// <summary>
    /// Delete a record from the gateway.
    /// </summary>
    /// <param name="force">Indicates if the deletion should be forced</summary>
    /// <exception cref="ApiException">Thrown when the record cannot be deleted.</exception>
    delete(configName = "default") {
        return __1.RecurringService.delete(this, configName);
    }
    /// <summary>
    /// The current record should be updated.
    /// </summary>
    /// <remarks>
    /// Any modified properties will be persisted with the gateway.
    /// </remarks>
    /// <exception cref="ApiException">Thrown when the record cannot be updated.</exception>
    saveChanges(configName = "default") {
        return __1.RecurringService.edit(this, configName);
    }
}
exports.RecurringEntity = RecurringEntity;
//# sourceMappingURL=RecurringEntity.js.map
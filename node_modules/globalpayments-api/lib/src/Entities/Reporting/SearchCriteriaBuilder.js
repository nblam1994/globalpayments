"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchCriteriaBuilder = void 0;
const src_1 = require("../../../src");
class SearchCriteriaBuilder {
    reportBuilder;
    accountId;
    accountName;
    accountNumberLastFour;
    altPaymentStatus;
    amount;
    aquirerReferenceNumber;
    authCode;
    bankAccountNumber;
    bankRoutingNumber;
    batchId;
    batchSequenceNumber;
    brandReference;
    buyerEmailAddress;
    cardBrand;
    cardHolderFirstName;
    cardHolderLastName;
    cardHolderPoNumber;
    cardNumberFirstSix;
    cardNumberLastFour;
    cardTypes;
    channel;
    checkFirstName;
    checkLastName;
    checkName;
    checkNumber;
    clerkId;
    clientTransactionId;
    country;
    currency;
    customerId;
    depositId;
    depositReference;
    depositStatus;
    displayName;
    disputeId;
    disputeDocumentId;
    disputeStage;
    disputeStatus;
    endBatchDate;
    endDate;
    fromTimeLastUpdated;
    toTimeLastUpdated;
    endDepositDate;
    endStageDate;
    fullyCaptured;
    giftCurrency;
    giftMaskedAlias;
    hierarchy;
    invoiceNumber;
    issuerResult;
    issuerTransactionId;
    localTransactionEndTime;
    localTransactionStartTime;
    merchantId;
    name;
    oneTime;
    oderId;
    paymentEntryMode;
    paymentType;
    paymentMethodName;
    paymentProvider;
    paymentMethod;
    paymentMethodUsageMode;
    paymentMethodKey;
    paymentMethodType;
    referenceNumber;
    transactionType;
    settlementAmount;
    settlementDisputeId;
    storedPaymentMethodId;
    storedPaymentMethodStatus;
    scheduleId;
    siteTrace;
    startBatchDate;
    startDate;
    startDepositDate;
    startStageDate;
    systemHierarchy;
    tokenFirstSix;
    tokenLastFour;
    transactionStatus;
    uniqueDeviceId;
    username;
    timezone;
    actionId;
    actionType;
    resource;
    resourceStatus;
    resourceId;
    merchantName;
    appName;
    version;
    responseCode;
    httpResponseCode;
    payByLinkId;
    description;
    expirationDate;
    payByLinkStatus;
    address;
    bankPaymentId;
    returnPii;
    riskAssessmentMode;
    riskAssessmentReasonCode;
    constructor(reportBuilder) {
        this.reportBuilder = reportBuilder;
    }
    andWith(criteria, value) {
        if (this.hasOwnProperty(criteria)) {
            this[criteria] = value;
        }
        return this;
    }
    execute(configName = "default") {
        if (!this.reportBuilder) {
            throw new src_1.ArgumentError(`ReportBuilder is null in ${this.constructor.name}`);
        }
        return this.reportBuilder.execute(configName);
    }
}
exports.SearchCriteriaBuilder = SearchCriteriaBuilder;
//# sourceMappingURL=SearchCriteriaBuilder.js.map
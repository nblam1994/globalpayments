"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlternativePaymentResponse = void 0;
class AlternativePaymentResponse {
    /**
     * bank account details
     */
    bankAccount;
    /**
     * Account holder name of the customerâ€™s account
     */
    accountHolderName;
    /**
     * 2 character ISO country code
     */
    country;
    /**
     * URL to redirect the customer to - only available in PENDING asynchronous transactions.
     * Sent there so merchant can redirect consumer to complete an interrupted payment.
     */
    redirectUrl;
    /**
     * This parameter reflects what the customer will see on the proof of payment
     * (for example, bank statement record and similar). Also known as the payment descriptor
     */
    paymentPurpose;
    /**
     *
     */
    paymentMethod;
    /**
     * The provider reference
     */
    providerReference;
    /**
     * The APM provider name
     */
    providerName;
    ack;
    sessionToken;
    correlationReference;
    versionReference;
    buildReference;
    timeCreatedReference;
    transactionReference;
    secureAccountReference;
    reasonCode;
    pendingReason;
    grossAmount;
    paymentTimeReference;
    paymentType;
    paymentStatus;
    type;
    protectionEligibilty;
    authStatus;
    authAmount;
    authAck;
    authCorrelationReference;
    authVersionReference;
    authBuildReference;
    authPendingReason;
    authProtectionEligibilty;
    authProtectionEligibiltyType;
    authReference;
    feeAmount;
    /* start region Alipay */
    nextAction;
    secondsToExpire;
    qrCodeImage;
}
exports.AlternativePaymentResponse = AlternativePaymentResponse;
//# sourceMappingURL=AlternativePaymentResponse.js.map
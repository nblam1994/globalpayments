"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedule = void 0;
const _1 = require("./");
class Schedule extends _1.RecurringEntity {
    /// <summary>
    /// The schedule's amount
    /// </summary>
    amount;
    /// <summary>
    /// The date/time the schedule was cancelled.
    /// </summary>
    cancellationDate;
    /// <summary>
    /// The schedule's currency.
    /// </summary>
    currency;
    /// <summary>
    /// The identifier of the customer associated
    /// with the schedule.
    /// </summary>
    customerKey;
    /// <summary>
    /// The description of the schedule.
    /// </summary>
    description;
    /// <summary>
    /// The device ID associated with a schedule's
    /// transactions.
    /// </summary>
    deviceId;
    /// <summary>
    /// Indicates if email notifications should be sent.
    /// </summary>
    emailNotification;
    /// <summary>
    /// Indicates when email notifications should be sent.
    /// </summary>
    emailReceipt;
    /// <summary>
    /// The end date of a schedule, if any.
    /// </summary>
    endDate;
    /// <summary>
    /// The schedule's frequency.
    /// </summary>
    /// <seealso>ScheduleFrequency</seealso>
    frequency;
    /// <summary>
    /// Indicates if the schedule has started processing.
    /// </summary>
    hasStarted;
    /// <summary>
    /// The invoice number associated with the schedule.
    /// </summary>
    invoiceNumber;
    /// <summary>
    /// The schedule's name.
    /// </summary>
    name;
    /// <summary>
    /// The date/time when the schedule should process next.
    /// </summary>
    nextProcessingDate;
    /// <summary>
    /// The number of payments made to date on the schedule.
    /// </summary>
    numberOfPayments;
    /// <summary>
    /// The purchase order (PO) number associated with the schedule.
    /// </summary>
    poNumber;
    /// <summary>
    /// The identifier of the payment method associated with
    /// the schedule.
    /// </summary>
    paymentKey;
    /// <summary>
    /// Indicates when in the month a recurring schedule should run.
    /// </summary>
    paymentSchedule;
    /// <summary>
    /// The number of times a failed schedule payment should be
    /// reprocessed.
    /// </summary>
    reprocessingCount;
    /// <summary>
    /// The start date of a schedule.
    /// </summary>
    startDate;
    /// <summary>
    /// The schedule's status.
    /// </summary>
    status;
    /// <summary>
    /// The schedule's tax amount.
    /// </summary>
    taxAmount;
    /// <summary>
    /// The total amount for the schedule (`Amount` + `TaxAmount`).
    /// </summary>
    get totalAmount() {
        return (parseFloat(this.amount.toString()) + parseFloat(this.taxAmount.toString()));
    }
    constructor(customerKey, paymentKey) {
        super();
        if (customerKey) {
            this.customerKey = customerKey;
        }
        if (paymentKey) {
            this.paymentKey = paymentKey;
        }
    }
    /// <summary>
    /// Sets the schedule's amount.
    /// </summary>
    /// <param name="value">The amount</param>
    /// <returns>Schedule</returns>
    withAmount(value) {
        if (value) {
            this.amount = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's currency.
    /// </summary>
    /// <param name="value">The currency</param>
    /// <returns>Schedule</returns>
    withCurrency(value) {
        if (value) {
            this.currency = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's customer.
    /// </summary>
    /// <param name="value">The customer's key</param>
    /// <returns>Schedule</returns>
    withCustomerKey(value) {
        if (value) {
            this.customerKey = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's description.
    /// </summary>
    /// <param name="value">The description</param>
    /// <returns>Schedule</returns>
    withDescription(value) {
        if (value) {
            this.description = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's device ID.
    /// </summary>
    /// <param name="value">The device ID</param>
    /// <returns>Schedule</returns>
    withDeviceId(value) {
        if (value) {
            this.deviceId = value;
        }
        return this;
    }
    /// <summary>
    /// Sets whether the schedule should send email notifications.
    /// </summary>
    /// <param name="value">The email notification flag</param>
    /// <returns>Schedule</returns>
    withEmailNotification(value) {
        if (value) {
            this.emailNotification = value;
        }
        return this;
    }
    /// <summary>
    /// Sets when the schedule should email receipts.
    /// </summary>
    /// <param name="value">When the schedule should email receipts</param>
    /// <returns>Schedule</returns>
    withEmailReceipt(value) {
        if (value) {
            this.emailReceipt = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's end date.
    /// </summary>
    /// <param name="value">The end date</param>
    /// <returns>Schedule</returns>
    withEndDate(value) {
        if (value) {
            this.endDate = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's frequency.
    /// </summary>
    /// <param name="value">The frequency</param>
    /// <returns>Schedule</returns>
    withFrequency(value) {
        if (value) {
            this.frequency = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's invoice number.
    /// </summary>
    /// <param name="value">The invoice number</param>
    /// <returns>Schedule</returns>
    withInvoiceNumber(value) {
        if (value) {
            this.invoiceNumber = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's name.
    /// </summary>
    /// <param name="value">The name</param>
    /// <returns>Schedule</returns>
    withName(value) {
        if (value) {
            this.name = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's number of payments.
    /// </summary>
    /// <param name="value">The number of payments</param>
    /// <returns>Schedule</returns>
    withNumberOfPayments(value) {
        if (value) {
            this.numberOfPayments = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's purchase order (PO) number.
    /// </summary>
    /// <param name="value">The purchase order (PO) number</param>
    /// <returns>Schedule</returns>
    withPoNumber(value) {
        if (value) {
            this.poNumber = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's payment method.
    /// </summary>
    /// <param name="value">The payment method's key</param>
    /// <returns>Schedule</returns>
    withPaymentKey(value) {
        if (value) {
            this.paymentKey = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's recurring schedule.
    /// </summary>
    /// <param name="value">The recurring schedule</param>
    /// <returns>Schedule</returns>
    withPaymentSchedule(value) {
        if (value) {
            this.paymentSchedule = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's reprocessing count.
    /// </summary>
    /// <param name="value">The reprocessing count</param>
    /// <returns>Schedule</returns>
    withReprocessingCount(value) {
        if (value) {
            this.reprocessingCount = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's start date.
    /// </summary>
    /// <param name="value">The start date</param>
    /// <returns>Schedule</returns>
    withStartDate(value) {
        if (value) {
            this.startDate = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's status.
    /// </summary>
    /// <param name="value">The new status</param>
    /// <returns>Schedule</returns>
    withStatus(value) {
        if (value) {
            this.status = value;
        }
        return this;
    }
    /// <summary>
    /// Sets the schedule's tax amount.
    /// </summary>
    /// <param name="value">The tax amount</param>
    /// <returns>Schedule</returns>
    withTaxAmount(value) {
        if (value) {
            this.taxAmount = value;
        }
        return this;
    }
}
exports.Schedule = Schedule;
//# sourceMappingURL=Schedule.js.map
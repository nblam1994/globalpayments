"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaskedValueCollection = void 0;
class MaskedValueCollection {
    maskValues = {};
    getValues() {
        return this.maskValues;
    }
    hideValue(key, value, unmaskedLastChars = 0, unmaskedFirstChars = 0) {
        this.addValue(key, value, unmaskedLastChars, unmaskedFirstChars);
        return this.getValues();
    }
    addValue(key, value, unmaskedLastChars = 0, unmaskedFirstChars = 0) {
        if (!this.validateValue(value) || this.maskValues[key] === value) {
            return false;
        }
        this.maskValues[key] = this.disguise(value, unmaskedLastChars, unmaskedFirstChars);
        return true;
    }
    validateValue(value) {
        if (!value || Array.isArray(value) || typeof value === "object") {
            return false;
        }
        return true;
    }
    disguise(value, unmaskedLastChars = 0, unmaskedFirstChars = 0, maskSymbol = "X") {
        value = String(value);
        unmaskedLastChars = Math.abs(Math.floor(unmaskedLastChars));
        maskSymbol = String(maskSymbol);
        // not enough chars to unmask?
        if (unmaskedLastChars >= value.length) {
            unmaskedLastChars = 0;
        }
        // at least half must be masked?
        if (unmaskedLastChars > value.length / 2) {
            unmaskedLastChars = Math.round(unmaskedLastChars / 2);
        }
        // leading unmasked chars
        if (unmaskedLastChars < 0) {
            const unmasked = value.slice(0, unmaskedLastChars);
            return unmasked + maskSymbol.repeat(value.length - unmasked.length);
        }
        const unmaskedFirstValue = value.slice(0, unmaskedFirstChars);
        const unmaskedLastValue = unmaskedLastChars
            ? value.slice(-unmaskedLastChars)
            : "";
        return (unmaskedFirstValue +
            maskSymbol.repeat(value.length - unmaskedFirstChars - unmaskedLastChars) +
            unmaskedLastValue);
    }
}
exports.MaskedValueCollection = MaskedValueCollection;
//# sourceMappingURL=MaskedValueCollection.js.map
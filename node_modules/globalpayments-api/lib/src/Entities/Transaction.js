"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = void 0;
const __1 = require("../");
class Transaction {
    authorizedAmount;
    /**
     * The address verification service (AVS) address response code.
     */
    avsAddressResponse;
    balanceAmount;
    pointsBalanceAmount;
    cardBrandTransactionId;
    commercialIndicator;
    responseCode;
    responseMessage;
    transactionDescriptor;
    referenceNumber;
    recurringDataCode;
    cvnResponseMessage;
    cvnResponseCode;
    cavvResponseCode;
    multiCapture;
    multiCapturePaymentCount;
    multiCaptureSequence;
    cardLast4;
    cardType;
    avsResponseMessage;
    avsResponseCode;
    availableBalance;
    transactionReference;
    token;
    giftCard;
    dccRateData;
    clientTransactionId;
    timestamp;
    batchId;
    batchSeqNbr;
    payFacData;
    payerDetails;
    fingerprint;
    fingerprintIndicator;
    tokenUsageMode;
    cardDetails;
    threeDSecure;
    /**
     * Used for ACH transactions
     */
    accountNumberLast4;
    accountType;
    cardIssuerResponse;
    get transactionId() {
        return this.transactionReference?.transactionId;
    }
    set transactionId(id) {
        if (!this.transactionReference) {
            this.transactionReference = new __1.TransactionReference();
        }
        this.transactionReference.transactionId = id;
    }
    get paymentMethodType() {
        if (this.transactionReference) {
            return this.transactionReference.paymentMethodType;
        }
        return __1.PaymentMethodType.Credit;
    }
    set paymentMethodType(paymentMethodType) {
        if (!(this.transactionReference instanceof __1.TransactionReference)) {
            this.transactionReference = new __1.TransactionReference();
        }
        this.transactionReference.paymentMethodType = paymentMethodType;
    }
    get authorizationCode() {
        if (this.transactionReference) {
            return this.transactionReference.authCode;
        }
        return null;
    }
    get alternativePaymentResponse() {
        if (this.transactionReference) {
            return this.transactionReference.alternativePaymentResponse;
        }
        return null;
    }
    set alternativePaymentResponse(value) {
        if (!(this.transactionReference instanceof __1.TransactionReference)) {
            this.transactionReference = new __1.TransactionReference();
        }
        this.transactionReference.alternativePaymentResponse = value;
    }
    set authorizationCode(authCode) {
        if (!(this.transactionReference instanceof __1.TransactionReference)) {
            this.transactionReference = new __1.TransactionReference();
        }
        this.transactionReference.authCode = authCode;
    }
    static fromId(transactionId, orderId, paymentMethodType = __1.PaymentMethodType.Credit) {
        const transaction = new Transaction();
        transaction.transactionReference = new __1.TransactionReference();
        transaction.transactionReference.transactionId = transactionId;
        if (orderId &&
            (typeof orderId === "string" ||
                Object.prototype.toString.call(orderId) === "[object String]")) {
            transaction.transactionReference.orderId = orderId;
        }
        else if (orderId) {
            paymentMethodType = orderId;
        }
        transaction.transactionReference.paymentMethodType = paymentMethodType;
        return transaction;
    }
    /**
     * Allows for a follow-up request to add an additional authorization
     *
     * @param string|number amount Amount to authorize
     *
     * @return AuthorizationBuilder
     */
    additionalAuth(amount) {
        return new __1.ManagementBuilder(__1.TransactionType.Auth)
            .withPaymentMethod(this.transactionReference)
            .withAmount(amount);
    }
    /**
     * Allows for a follow-up request to add the transaction to an open batch
     *
     * @param string|number amount Amount to capture
     *
     * @return ManagementBuilder
     */
    capture(amount) {
        const builder = new __1.ManagementBuilder(__1.TransactionType.Capture)
            .withPaymentMethod(this.transactionReference)
            .withAmount(amount);
        if (this.multiCapture) {
            builder.withMultiCapture(this.multiCaptureSequence, this.multiCapturePaymentCount);
        }
        return builder;
    }
    /**
     * Allows for a follow-up request to edit the transaction
     *
     * @return ManagementBuilder
     */
    edit() {
        let builder = new __1.ManagementBuilder(__1.TransactionType.Edit).withPaymentMethod(this.transactionReference);
        if (this.commercialIndicator) {
            builder = builder.withModifier(__1.TransactionModifier.LevelII);
        }
        if (this.cardType) {
            builder.cardType = this.cardType;
        }
        return builder;
    }
    hold() {
        return new __1.ManagementBuilder(__1.TransactionType.Hold).withPaymentMethod(this.transactionReference);
    }
    /**
     * Allows for a follow-up request to refund the transaction
     *
     * @param {string|number} amount Amount to refund
     *
     * @return ManagementBuilder
     */
    refund(amount = null) {
        return new __1.ManagementBuilder(__1.TransactionType.Refund)
            .withPaymentMethod(this.transactionReference)
            .withAmount(amount);
    }
    release() {
        return new __1.ManagementBuilder(__1.TransactionType.Release).withPaymentMethod(this.transactionReference);
    }
    /**
     * Refresh the authorization associated with a transaction to get a more recent authcode or
     * reauthorize a transaction reversed in error.
     *
     * @param {string|number|null} amount Amount to reverse
     *
     * @return ManagementBuilder
     */
    reauthorized(amount = null) {
        return new __1.ManagementBuilder(__1.TransactionType.Reauth)
            .withPaymentMethod(this.transactionReference)
            .withAmount(amount);
    }
    /**
     * Allows for a follow-up request to reverse the transaction
     *
     * @param string|number amount Amount to reverse
     *
     * @return ManagementBuilder
     */
    reverse(amount = null) {
        return new __1.ManagementBuilder(__1.TransactionType.Reversal)
            .withPaymentMethod(this.transactionReference)
            .withAmount(amount);
    }
    /**
     * Allows for a follow-up request to void the transaction
     *
     * @return ManagementBuilder
     */
    void() {
        return new __1.ManagementBuilder(__1.TransactionType.Void).withPaymentMethod(this.transactionReference);
    }
    confirm(amount) {
        return new __1.ManagementBuilder(__1.TransactionType.Confirm)
            .withPaymentMethod(this.transactionReference)
            .withAmount(amount);
    }
}
exports.Transaction = Transaction;
//# sourceMappingURL=Transaction.js.map
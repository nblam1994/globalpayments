"use strict";
// tslint:disable:max-classes-per-file
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnsupportedTransactionError = exports.NotImplementedError = exports.GatewayError = exports.ConfigurationError = exports.BuilderError = exports.ArgumentError = exports.ApiError = void 0;
class ApiError extends Error {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, ApiError.prototype);
        this.name = this.constructor.name;
    }
}
exports.ApiError = ApiError;
class ArgumentError extends ApiError {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, ArgumentError.prototype);
        this.name = this.constructor.name;
    }
}
exports.ArgumentError = ArgumentError;
class BuilderError extends ApiError {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, BuilderError.prototype);
        this.name = this.constructor.name;
    }
}
exports.BuilderError = BuilderError;
class ConfigurationError extends ApiError {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, ConfigurationError.prototype);
        this.name = this.constructor.name;
    }
}
exports.ConfigurationError = ConfigurationError;
class GatewayError extends ApiError {
    responseCode;
    responseMessage;
    constructor(m, code, message) {
        super(m);
        Object.setPrototypeOf(this, GatewayError.prototype);
        this.name = this.constructor.name;
        if (code) {
            this.responseCode = code;
        }
        if (message) {
            this.responseMessage = message;
        }
    }
}
exports.GatewayError = GatewayError;
class NotImplementedError extends ApiError {
    constructor(m) {
        super(m);
        Object.setPrototypeOf(this, NotImplementedError.prototype);
        this.name = this.constructor.name;
    }
}
exports.NotImplementedError = NotImplementedError;
class UnsupportedTransactionError extends ApiError {
    constructor(m) {
        if (!m) {
            m = "Transaction type not supported for this payment method.";
        }
        super(m);
        Object.setPrototypeOf(this, UnsupportedTransactionError.prototype);
        this.name = this.constructor.name;
    }
}
exports.UnsupportedTransactionError = UnsupportedTransactionError;
//# sourceMappingURL=Errors.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocumentUploadData = void 0;
const fs = __importStar(require("fs"));
class DocumentUploadData {
    documentName;
    transactionReference;
    docType;
    get DocType() {
        return this.docType;
    }
    set DocType(value) {
        if (this._validDocTypes.includes(value)) {
            this.docType = value;
        }
        else {
            throw new Error("The provided file type is not supported.");
        }
    }
    document;
    docCategory;
    documentPath;
    DocumentPath(value) {
        const docPath = value;
        if (docPath != null) {
            const documentType = docPath.substring(docPath.lastIndexOf(".") + 1);
            if (this._validDocTypes.includes(documentType)) {
                this.docType = documentType;
                this.document = String(this.getByteArray(docPath));
            }
            else {
                throw new Error("The document provided is not a valid file type.");
            }
        }
        else {
            throw new Error("DocumentPath has not been set");
        }
    }
    getByteArray(filePath) {
        const fileData = fs.readFileSync(filePath);
        const buff = Buffer.from(fileData);
        const base64data = buff.toString("base64");
        return base64data;
    }
    _validDocTypes = [
        "tif",
        "tiff",
        "bmp",
        "jpg",
        "jpeg",
        "gif",
        "png",
        "doc",
        "docx",
    ];
}
exports.DocumentUploadData = DocumentUploadData;
//# sourceMappingURL=DocumentUploadData.js.map
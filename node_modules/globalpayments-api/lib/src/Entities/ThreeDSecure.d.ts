import { ISecureCheck } from "src/PaymentMethods";
import { ExemptionReason, Secure3dStatus, Secure3dVersion } from "./Enums";
import { MessageExtension } from "./MessageExtension";
import { MerchantDataCollection } from "./MerchantDataCollection";
export declare class ThreeDSecure implements ISecureCheck {
    acsTransactionId: string;
    acsEndVersion: string;
    acsStartVersion: string;
    acsInfoIndicator: string[];
    acsInterface: string;
    acsUiTemplate: string;
    algorithm: number;
    authenticationSource: string;
    authenticationType: string;
    authenticationValue: string;
    cardHolderResponseInfo: string;
    amount: number | string;
    cavv: string;
    challengeMandated: boolean;
    challengeReturnUrl: string;
    messageExtension: MessageExtension[];
    currency: string;
    decoupledResponseIndicator: string;
    directoryServerTransactionId: string;
    directoryServerEndVersion: string;
    directoryServerStartVersion: string;
    eci: number;
    enrolled: Secure3dStatus;
    exemptStatus: string;
    exemptReason: ExemptionReason;
    issuerAcsUrl: string;
    merchantData: MerchantDataCollection;
    messageCategory: string;
    messageVersion: string;
    messageType: string;
    orderId: string;
    payerAuthenticationRequest: string;
    paymentDataSource: string;
    paymentDataType: string;
    sdkInterface: string;
    sdkUiType: string;
    secureCode: string;
    serverTransactionId: string;
    status: Secure3dStatus;
    statusReason: string;
    version: Secure3dVersion;
    whitelistStatus: string;
    xid: string;
    sessionDataFieldName: string;
    liabilityShift: string;
    acsReferenceNumber: string;
    providerServerTransRef: string;
    constructor();
    getVersion(): Secure3dVersion;
    setVersion(version: Secure3dVersion): void;
    getMerchantData(): MerchantDataCollection;
    setMerchantData(merchantData: MerchantDataCollection): void;
    getAmount(): number | string;
    setAmount(value: number | string): void;
    getCurrency(): string;
    setCurrency(value: string): void;
    getOrderId(): string;
    setOrderId(value: string): void;
    merge(secureEcom: ThreeDSecure): void;
    private mergeValue;
}

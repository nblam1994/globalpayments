"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpApiTokenResponse = void 0;
// import { AccessTokenInfo } from "./AccessTokenInfo";
const GpApiAccount_1 = require("./GpApiAccount");
class GpApiTokenResponse {
    token;
    type;
    timeCreated;
    secondsToExpire;
    appId;
    appName;
    email;
    merchantId;
    merchantName;
    accounts = [];
    dataAccountName;
    disputeManagementAccountName;
    tokenizationAccountName;
    transactionProcessingAccountName;
    merchantManagementAccountName;
    merchantManagementAccountId;
    static DATA_ACCOUNT_NAME_PREFIX = "DAA_";
    static DISPUTE_MANAGEMENT_ACCOUNT_NAME_PREFIX = "DIA_";
    static TOKENIZATION_ACCOUNT_NAME_PREFIX = "TKA_";
    static TRANSACTION_PROCESSING_ACCOUNT_NAME_PREFIX = "TRA_";
    static RIKS_ASSESSMENT_ACCOUNT_NAME_PREFIX = "RAA_";
    static MERCHANT_MANAGEMENT_ACCOUNT_PREFIX = "MMA_";
    constructor(response) {
        this.mapResponseValues(JSON.parse(response));
    }
    /**
     * @param string accountPrefix
     *
     * @return null|string
     */
    getAccountName(accountPrefix) {
        for (const account of this.accounts) {
            if (account.id && account.id.substr(0, 4) === accountPrefix) {
                return account.name;
            }
        }
        return "";
    }
    /**
     * @param string accountPrefix
     *
     * @return null|string
     */
    getAccountID(accountPrefix) {
        for (const account of this.accounts) {
            if (account.id && account.id.substr(0, 4) === accountPrefix) {
                return account.id;
            }
        }
        return "";
    }
    getDataAccountName() {
        return this.getAccountName(GpApiTokenResponse.DATA_ACCOUNT_NAME_PREFIX);
    }
    getDataAccountID() {
        return this.getAccountID(GpApiTokenResponse.DATA_ACCOUNT_NAME_PREFIX);
    }
    getDisputeManagementAccountName() {
        return this.getAccountName(GpApiTokenResponse.DISPUTE_MANAGEMENT_ACCOUNT_NAME_PREFIX);
    }
    getDisputeManagementAccountID() {
        return this.getAccountID(GpApiTokenResponse.DISPUTE_MANAGEMENT_ACCOUNT_NAME_PREFIX);
    }
    getTokenizationAccountName() {
        return this.getAccountName(GpApiTokenResponse.TOKENIZATION_ACCOUNT_NAME_PREFIX);
    }
    getTokenizationAccountID() {
        return this.getAccountID(GpApiTokenResponse.TOKENIZATION_ACCOUNT_NAME_PREFIX);
    }
    getTransactionProcessingAccountName() {
        return this.getAccountName(GpApiTokenResponse.TRANSACTION_PROCESSING_ACCOUNT_NAME_PREFIX);
    }
    getTransactionProcessingAccountID() {
        return this.getAccountID(GpApiTokenResponse.TRANSACTION_PROCESSING_ACCOUNT_NAME_PREFIX);
    }
    getRiskAssessmentAccountName() {
        return this.getAccountName(GpApiTokenResponse.RIKS_ASSESSMENT_ACCOUNT_NAME_PREFIX);
    }
    getRiskAssessmentAccountID() {
        return this.getAccountID(GpApiTokenResponse.RIKS_ASSESSMENT_ACCOUNT_NAME_PREFIX);
    }
    getMerchantManagementAccountName() {
        return this.getAccountName(GpApiTokenResponse.MERCHANT_MANAGEMENT_ACCOUNT_PREFIX);
    }
    getMerchantManagementAccountID() {
        return this.getAccountID(GpApiTokenResponse.MERCHANT_MANAGEMENT_ACCOUNT_PREFIX);
    }
    getToken() {
        return this.token;
    }
    mapResponseValues(response) {
        this.token = response.token;
        this.type = response.type;
        this.appId = response.app_id;
        this.appName = response.app_name;
        this.timeCreated = response.time_created;
        this.secondsToExpire = response.seconds_to_expire;
        this.email = response.email;
        if (response.scope) {
            this.merchantId = response.scope.merchant_id;
            this.merchantName = response.scope.merchant_name;
            for (const account of response.scope.accounts) {
                this.accounts.push(new GpApiAccount_1.GpApiAccount(account.id, account.name));
            }
        }
    }
}
exports.GpApiTokenResponse = GpApiTokenResponse;
//# sourceMappingURL=GpApiTokenResponse.js.map
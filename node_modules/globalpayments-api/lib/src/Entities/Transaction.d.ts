import { AlternativePaymentResponse, Card, CardIssuerResponse, DccRateData, GiftCard, ManagementBuilder, PayerDetails, PaymentMethodType, PaymentMethodUsageMode, StoredCredentialSequence, ThreeDSecure, TransactionReference } from "../";
import { PayFacResponseData } from "./ProFac/PayFacResponseData";
export declare class Transaction {
    authorizedAmount: string;
    /**
     * The address verification service (AVS) address response code.
     */
    avsAddressResponse: string;
    balanceAmount: string;
    pointsBalanceAmount: string;
    cardBrandTransactionId: string;
    commercialIndicator: string;
    responseCode: string;
    responseMessage: string;
    transactionDescriptor: string;
    referenceNumber: string;
    recurringDataCode: string;
    cvnResponseMessage: string;
    cvnResponseCode: string;
    cavvResponseCode: string;
    multiCapture: boolean;
    multiCapturePaymentCount: number;
    multiCaptureSequence: StoredCredentialSequence;
    cardLast4: string;
    cardType: string;
    avsResponseMessage: string;
    avsResponseCode: string;
    availableBalance: string;
    transactionReference: TransactionReference;
    token: string;
    giftCard: GiftCard;
    dccRateData: DccRateData;
    clientTransactionId: string;
    timestamp: string;
    batchId: string;
    batchSeqNbr: string;
    payFacData: PayFacResponseData;
    payerDetails: PayerDetails;
    fingerprint: string;
    fingerprintIndicator: string;
    tokenUsageMode: PaymentMethodUsageMode;
    cardDetails: Card;
    threeDSecure: ThreeDSecure;
    /**
     * Used for ACH transactions
     */
    accountNumberLast4: string;
    accountType: string;
    cardIssuerResponse: CardIssuerResponse;
    get transactionId(): string;
    set transactionId(id: string);
    get paymentMethodType(): PaymentMethodType;
    set paymentMethodType(paymentMethodType: PaymentMethodType);
    get authorizationCode(): string | null;
    get alternativePaymentResponse(): AlternativePaymentResponse | null;
    set alternativePaymentResponse(value: AlternativePaymentResponse);
    set authorizationCode(authCode: string);
    static fromId(transactionId: string, orderId?: string | PaymentMethodType, paymentMethodType?: PaymentMethodType): Transaction;
    /**
     * Allows for a follow-up request to add an additional authorization
     *
     * @param string|number amount Amount to authorize
     *
     * @return AuthorizationBuilder
     */
    additionalAuth(amount?: string | number): ManagementBuilder;
    /**
     * Allows for a follow-up request to add the transaction to an open batch
     *
     * @param string|number amount Amount to capture
     *
     * @return ManagementBuilder
     */
    capture(amount?: string | number): ManagementBuilder;
    /**
     * Allows for a follow-up request to edit the transaction
     *
     * @return ManagementBuilder
     */
    edit(): ManagementBuilder;
    hold(): ManagementBuilder;
    /**
     * Allows for a follow-up request to refund the transaction
     *
     * @param {string|number} amount Amount to refund
     *
     * @return ManagementBuilder
     */
    refund(amount?: string | number | null): ManagementBuilder;
    release(): ManagementBuilder;
    /**
     * Refresh the authorization associated with a transaction to get a more recent authcode or
     * reauthorize a transaction reversed in error.
     *
     * @param {string|number|null} amount Amount to reverse
     *
     * @return ManagementBuilder
     */
    reauthorized(amount?: string | number | null): ManagementBuilder;
    /**
     * Allows for a follow-up request to reverse the transaction
     *
     * @param string|number amount Amount to reverse
     *
     * @return ManagementBuilder
     */
    reverse(amount?: string | number | null): ManagementBuilder;
    /**
     * Allows for a follow-up request to void the transaction
     *
     * @return ManagementBuilder
     */
    void(): ManagementBuilder;
    confirm(amount?: string | number | null): ManagementBuilder;
}

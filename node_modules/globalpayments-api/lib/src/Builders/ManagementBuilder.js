"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagementBuilder = void 0;
const __1 = require("../");
const TransactionBuilder_1 = require("./TransactionBuilder");
class ManagementBuilder extends TransactionBuilder_1.TransactionBuilder {
    amount;
    authAmount;
    currency;
    commercialData;
    description;
    gratuity;
    lodgingData;
    poNumber;
    reasonCode;
    taxAmount;
    taxType;
    cardType;
    constructor(type, paymentMethod) {
        super(type, paymentMethod);
        this.supplementaryData = {};
    }
    get authorizationCode() {
        if (this.paymentMethod instanceof __1.TransactionReference) {
            return this.paymentMethod.authCode;
        }
        return undefined;
    }
    get clientTransactionId() {
        if (this.paymentMethod instanceof __1.TransactionReference) {
            return this.paymentMethod.clientTransactionId;
        }
        return undefined;
    }
    get orderId() {
        if (this.paymentMethod instanceof __1.TransactionReference) {
            return this.paymentMethod.orderId;
        }
        return undefined;
    }
    get transactionId() {
        if (this.paymentMethod instanceof __1.TransactionReference) {
            return this.paymentMethod.transactionId;
        }
        return undefined;
    }
    /**
     * Executes the builder against the gateway.
     *
     * @returns Promise<Transaction>
     */
    execute(configName = "default") {
        super.execute();
        return __1.ServicesContainer.instance()
            .getClient(configName)
            .manageTransaction(this);
    }
    /**
     * Sets the current transaction's amount.
     *
     * @param amount The amount
     * @returns ManagementBuilder
     */
    withAmount(amount) {
        if (amount !== undefined) {
            this.amount = amount;
        }
        return this;
    }
    /**
     * Sets the current transaction's authorized amount; where applicable.
     *
     * @param amount The authorized amount
     * @returns ManagementBuilder
     */
    withAuthAmount(amount) {
        if (amount !== undefined) {
            this.authAmount = amount;
        }
        return this;
    }
    /**
     * Sets the currency.
     *
     * The formatting for the supplied value will currently depend on
     * the configured gateway's requirements.
     *
     * @param currency The currency
     * @returns ManagementBuilder
     */
    withCurrency(currency) {
        if (currency !== undefined) {
            this.currency = currency;
        }
        return this;
    }
    withCommercialData(cd) {
        this.commercialData = cd;
        this.transactionModifier =
            cd.commercialIndicator === __1.TransactionModifier.LevelII
                ? __1.TransactionModifier.LevelII
                : __1.TransactionModifier.LevelIII;
        return this;
    }
    /**
     * Sets the transaction's description.
     *
     * This value is not guaranteed to be sent in the authorization
     * or settlement process.
     *
     * @param description The description
     * @returns ManagementBuilder
     */
    withDescription(description) {
        if (description !== undefined) {
            this.description = description;
        }
        return this;
    }
    /**
     * Sets the gratuity amount; where applicable.
     *
     * This value is information only and does not affect
     * the authorization amount.
     *
     * @param gratuity The gratuity amount
     * @returns ManagementBuilder
     */
    withGratuity(gratuity = null) {
        if (gratuity !== undefined) {
            this.gratuity = gratuity;
        }
        return this;
    }
    /**
     * Sets the purchase order number; where applicable.
     *
     * @param poNumber The PO number
     * @returns ManagementBuilder
     */
    withPoNumber(poNumber) {
        this.transactionModifier = __1.TransactionModifier.LevelII;
        if (poNumber !== undefined) {
            this.poNumber = poNumber;
        }
        return this;
    }
    /**
     * Sets the reason code for the transaction.
     *
     * @param reasonCode The reason code
     * @returns ManagementBuilder
     */
    withReasonCode(reasonCode) {
        if (reasonCode !== undefined) {
            this.reasonCode = reasonCode;
        }
        return this;
    }
    /**
     * Sets the tax amount.
     *
     * Useful for commercial purchase card requests.
     *
     * @see AuthorizationBuilder.WithCommercialRequest
     * @param amount The tax amount
     * @returns ManagementBuilder
     */
    withTaxAmount(amount) {
        this.transactionModifier = __1.TransactionModifier.LevelII;
        if (amount !== undefined) {
            this.taxAmount = amount;
        }
        return this;
    }
    /**
     * Sets the tax type.
     *
     * Useful for commercial purchase card requests.
     *
     * @see AuthorizationBuilder.withCommercialRequest
     * @param type The tax type
     * @returns ManagementBuilder
     */
    withTaxType(type) {
        this.transactionModifier = __1.TransactionModifier.LevelII;
        if (type !== undefined) {
            this.taxType = type;
        }
        return this;
    }
    withDynamicDescriptor(dynamicDescriptor) {
        this.dynamicDescriptor = dynamicDescriptor;
        return this;
    }
    /**
     * Sets the idempotency key
     *
     * @param idempotencyKey string
     * @returns {this}
     */
    withIdempotencyKey(idempotencyKey) {
        this.idempotencyKey = idempotencyKey;
        return this;
    }
    /**
     * Sets the idempotency key
     *
     * @param idempotencyKey string
     * @returns {this}
     */
    withPaymentMethodUsageMode(paymentMethodUsageMode) {
        this.paymentMethodUsageMode = paymentMethodUsageMode;
        return this;
    }
    withMultiCapture(sequence = __1.StoredCredentialSequence.FIRST, paymentCount = 1) {
        this.multiCapture = true;
        this.multiCaptureSequence = sequence;
        this.multiCapturePaymentCount = paymentCount;
        return this;
    }
    withTagData(tagData) {
        this.tagData = tagData;
        return this;
    }
    withLodgingData(value) {
        this.lodgingData = value;
        return this;
    }
    /**
     * Sets the Dispute Id.
     *
     * @param string value
     *
     * @return $this
     */
    withDisputeId(value) {
        this.disputeId = value;
        return this;
    }
    /**
     * Sets the Dispute Documents.
     *
     * @param DisputeDocument[] $value
     *
     * @return $this
     */
    withDisputeDocuments(value) {
        this.disputeDocuments = value;
        return this;
    }
    setupValidations() {
        this.validations
            .of("transactionType", 
        /* tslint:disable:trailing-comma */
        __1.TransactionType.Capture |
            __1.TransactionType.Edit |
            __1.TransactionType.Hold |
            __1.TransactionType.Release)
            .check("transactionId")
            .isNotNull();
        this.validations
            .of("transactionType", __1.TransactionType.Edit)
            .with("transactionModifier", __1.TransactionModifier.LevelII)
            .check("taxType")
            .isNotNull();
        this.validations
            .of("transactionType", __1.TransactionType.Refund)
            .when("amount")
            .isNotNull()
            .check("currency")
            .isNotNull();
    }
    /**
     * Previous request's transaction reference
     *
     * @internal
     * @param IPaymentMethod $paymentMethod Transaction reference
     *
     * @return ManagementBuilder
     */
    withPaymentMethod(paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }
    /**
     * Set the request dccRateData
     *
     * @param DccRateData dccRateData
     *
     * @return AuthorizationBuilder
     */
    withDccRateData(value) {
        this.dccRateData = value;
        return this;
    }
}
exports.ManagementBuilder = ManagementBuilder;
//# sourceMappingURL=ManagementBuilder.js.map
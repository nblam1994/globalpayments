import { Address, AuthenticationRequestType, ChallengeRequestIndicator, MerchantDataCollection, MessageCategory, MessageVersion, MethodUrlCompletion, SdkInterface, SdkUiType, Secure3dVersion, StoredCredential, ThreeDSecure, TransactionModifier, TransactionType } from "../Entities";
import { SecureBuilder } from "./SecureBuilder";
import { MobileData, PaymentMethod, Transaction } from "../";
export declare class Secure3dBuilder extends SecureBuilder<Transaction | ThreeDSecure> {
    private _transactionType;
    applicationId: string;
    authenticationRequestType: AuthenticationRequestType;
    challengeRequestIndicator: ChallengeRequestIndicator;
    customerEmail: string;
    decoupledFlowRequest: boolean;
    decoupledFlowTimeout: number;
    decoupledNotificationUrl: string;
    encodedData: string;
    ephemeralPublicKey: string;
    maximumTimeout: number;
    merchantData: MerchantDataCollection;
    messageCategory: MessageCategory;
    merchantInitiatedRequestType: AuthenticationRequestType;
    messageVersion: MessageVersion;
    methodUrlCompletion: MethodUrlCompletion;
    payerAuthenticationResponse: string;
    sdkInterface: SdkInterface;
    sdkTransactionId: string;
    sdkUiTypes: SdkUiType[];
    threeDSecure: ThreeDSecure;
    transactionModifier: TransactionModifier;
    whitelistStatus: string;
    enableExemptionOptimization: boolean;
    mobileData: MobileData;
    storedCredential: StoredCredential;
    constructor(_transactionType: TransactionType);
    get transactionType(): TransactionType;
    getApplicationId(): string;
    getAuthenticationRequestType(): AuthenticationRequestType;
    getBillingAddress(): Address;
    getChallengeRequestIndicator(): ChallengeRequestIndicator;
    getCustomerEmail(): string;
    getEncodedData(): string;
    getEphemeralPublicKey(): string;
    getMaximumTimeout(): number;
    getMerchantData(): MerchantDataCollection;
    getMessageCategory(): MessageCategory;
    getMerchantInitiatedRequestType(): AuthenticationRequestType;
    getMessageVersion(): MessageVersion;
    getMethodUrlCompletion(): MethodUrlCompletion;
    getPayerAuthenticationResponse(): string;
    getSdkInterface(): SdkInterface;
    getSdkTransactionId(): string;
    getSdkUiTypes(): SdkUiType[];
    getServerTransactionId(): string | null;
    getThreeDSecure(): ThreeDSecure;
    getTransactionType(): TransactionType;
    getVersion(): Secure3dVersion | null;
    getDecoupledFlowRequest(): boolean;
    getDecoupledFlowTimeout(): number;
    getDecoupledNotificationUrl(): string;
    getWhitelistStatus(): string;
    hasMobileFields(): boolean;
    hasPriorAuthenticationData(): boolean;
    hasRecurringAuthData(): boolean;
    hasPayerLoginData(): boolean;
    withApplicationId(applicationId: string): this;
    withAuthenticationRequestType(value: AuthenticationRequestType): this;
    withChallengeRequestIndicator(challengeRequestIndicator: ChallengeRequestIndicator): this;
    withCustomerEmail(value: string): this;
    withDecoupledFlowRequest(decoupledFlowRequest: boolean): this;
    withDecoupledFlowTimeout(decoupledFlowTimeout: number): this;
    withDecoupledNotificationUrl(decoupledNotificationUrl: string): this;
    withEncodedData(encodedData: string): this;
    withEphemeralPublicKey(ephemeralPublicKey: string): this;
    withMaximumTimeout(maximumTimeout: number): this;
    withMerchantData(value: MerchantDataCollection): this;
    withMessageCategory(value: MessageCategory): this;
    withMerchantInitiatedRequestType(merchantInitiatedRequestType: AuthenticationRequestType): this;
    withMessageVersion(value: MessageVersion): this;
    withMethodUrlCompletion(value: MethodUrlCompletion): this;
    withPayerAuthenticationResponse(value: string): this;
    withSdkInterface(sdkInterface: SdkInterface): this;
    withSdkTransactionId(sdkTransactionId: string): this;
    withSdkUiTypes(sdkUiTypes: SdkUiType[]): this;
    withServerTransactionId(value: string): this;
    withThreeDSecure(threeDSecure: ThreeDSecure): this;
    withWhitelistStatus(whitelistStatus: boolean): this;
    withStoredCredential(storedCredential: StoredCredential): this;
    withEnableExemptionOptimization(value: boolean): this;
    withMobileData(value: MobileData): this;
    withPaymentMethod(value: PaymentMethod | null): this;
    execute(configName?: string, version?: Secure3dVersion): Promise<ThreeDSecure>;
    setupValidations(): void;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secure3dBuilder = void 0;
const Entities_1 = require("../Entities");
const SecureBuilder_1 = require("./SecureBuilder");
const __1 = require("../");
class Secure3dBuilder extends SecureBuilder_1.SecureBuilder {
    _transactionType;
    applicationId;
    authenticationRequestType;
    challengeRequestIndicator;
    customerEmail;
    decoupledFlowRequest;
    decoupledFlowTimeout;
    decoupledNotificationUrl;
    encodedData;
    ephemeralPublicKey;
    maximumTimeout;
    merchantData;
    messageCategory;
    merchantInitiatedRequestType;
    messageVersion;
    methodUrlCompletion;
    payerAuthenticationResponse;
    sdkInterface;
    sdkTransactionId;
    sdkUiTypes;
    threeDSecure;
    transactionModifier = Entities_1.TransactionModifier.None;
    whitelistStatus;
    enableExemptionOptimization;
    mobileData;
    storedCredential;
    constructor(_transactionType) {
        super();
        this._transactionType = _transactionType;
        this.authenticationSource = Entities_1.AuthenticationSource.Browser;
        this.authenticationRequestType =
            Entities_1.AuthenticationRequestType.PaymentTransaction;
        this.messageCategory = Entities_1.MessageCategory.PaymentAuthentication;
        this._transactionType = _transactionType;
    }
    get transactionType() {
        return this._transactionType;
    }
    getApplicationId() {
        return this.applicationId;
    }
    getAuthenticationRequestType() {
        return this.authenticationRequestType;
    }
    getBillingAddress() {
        return this.billingAddress;
    }
    getChallengeRequestIndicator() {
        return this.challengeRequestIndicator;
    }
    getCustomerEmail() {
        return this.customerEmail;
    }
    getEncodedData() {
        return this.encodedData;
    }
    getEphemeralPublicKey() {
        return this.ephemeralPublicKey;
    }
    getMaximumTimeout() {
        return this.maximumTimeout;
    }
    getMerchantData() {
        return this.merchantData;
    }
    getMessageCategory() {
        return this.messageCategory;
    }
    getMerchantInitiatedRequestType() {
        return this.merchantInitiatedRequestType;
    }
    getMessageVersion() {
        return this.messageVersion;
    }
    getMethodUrlCompletion() {
        return this.methodUrlCompletion;
    }
    getPayerAuthenticationResponse() {
        return this.payerAuthenticationResponse;
    }
    getSdkInterface() {
        return this.sdkInterface;
    }
    getSdkTransactionId() {
        return this.sdkTransactionId;
    }
    getSdkUiTypes() {
        return this.sdkUiTypes;
    }
    getServerTransactionId() {
        return this.threeDSecure?.serverTransactionId || null;
    }
    getThreeDSecure() {
        return this.threeDSecure;
    }
    getTransactionType() {
        return this._transactionType;
    }
    getVersion() {
        return this.threeDSecure?.getVersion() || null;
    }
    getDecoupledFlowRequest() {
        return this.decoupledFlowRequest;
    }
    getDecoupledFlowTimeout() {
        return this.decoupledFlowTimeout;
    }
    getDecoupledNotificationUrl() {
        return this.decoupledNotificationUrl;
    }
    getWhitelistStatus() {
        return this.whitelistStatus;
    }
    hasMobileFields() {
        return (this.applicationId !== "" ||
            this.ephemeralPublicKey !== "" ||
            this.maximumTimeout !== 0 ||
            this.sdkTransactionId !== "" ||
            this.encodedData !== "" ||
            this.sdkInterface !== null ||
            this.sdkUiTypes !== null);
    }
    hasPriorAuthenticationData() {
        return (this.getPriorAuthenticationMethod() !== null ||
            this.getPriorAuthenticationTransactionId() !== "" ||
            this.getPriorAuthenticationTimestamp() !== null ||
            this.getPriorAuthenticationData() !== "");
    }
    hasRecurringAuthData() {
        return (this.getMaxNumberOfInstallments() !== null ||
            this.getRecurringAuthorizationFrequency() !== null ||
            this.getRecurringAuthorizationExpiryDate() !== null);
    }
    hasPayerLoginData() {
        return (this.getCustomerAuthenticationData() !== "" ||
            this.getCustomerAuthenticationTimestamp() !== null ||
            this.getCustomerAuthenticationMethod() !== null);
    }
    withApplicationId(applicationId) {
        this.applicationId = applicationId;
        return this;
    }
    withAuthenticationRequestType(value) {
        this.authenticationRequestType = value;
        return this;
    }
    withChallengeRequestIndicator(challengeRequestIndicator) {
        this.challengeRequestIndicator = challengeRequestIndicator;
        return this;
    }
    withCustomerEmail(value) {
        this.customerEmail = value;
        return this;
    }
    withDecoupledFlowRequest(decoupledFlowRequest) {
        this.decoupledFlowRequest = decoupledFlowRequest;
        return this;
    }
    withDecoupledFlowTimeout(decoupledFlowTimeout) {
        this.decoupledFlowTimeout = decoupledFlowTimeout;
        return this;
    }
    withDecoupledNotificationUrl(decoupledNotificationUrl) {
        this.decoupledNotificationUrl = decoupledNotificationUrl;
        return this;
    }
    withEncodedData(encodedData) {
        this.encodedData = encodedData;
        return this;
    }
    withEphemeralPublicKey(ephemeralPublicKey) {
        this.ephemeralPublicKey = ephemeralPublicKey;
        return this;
    }
    withMaximumTimeout(maximumTimeout) {
        this.maximumTimeout = maximumTimeout;
        return this;
    }
    withMerchantData(value) {
        this.merchantData = value;
        if (this.merchantData !== null) {
            if (this.threeDSecure === null) {
                this.threeDSecure = new Entities_1.ThreeDSecure();
            }
            this.threeDSecure.setMerchantData(value);
        }
        return this;
    }
    withMessageCategory(value) {
        this.messageCategory = value;
        return this;
    }
    withMerchantInitiatedRequestType(merchantInitiatedRequestType) {
        this.merchantInitiatedRequestType = merchantInitiatedRequestType;
        return this;
    }
    withMessageVersion(value) {
        this.messageVersion = value;
        return this;
    }
    withMethodUrlCompletion(value) {
        this.methodUrlCompletion = value;
        return this;
    }
    withPayerAuthenticationResponse(value) {
        this.payerAuthenticationResponse = value;
        return this;
    }
    withSdkInterface(sdkInterface) {
        this.sdkInterface = sdkInterface;
        return this;
    }
    withSdkTransactionId(sdkTransactionId) {
        this.sdkTransactionId = sdkTransactionId;
        return this;
    }
    withSdkUiTypes(sdkUiTypes) {
        this.sdkUiTypes = sdkUiTypes;
        return this;
    }
    withServerTransactionId(value) {
        if (!this.threeDSecure) {
            this.threeDSecure = new Entities_1.ThreeDSecure();
        }
        this.threeDSecure.serverTransactionId = value;
        return this;
    }
    withThreeDSecure(threeDSecure) {
        this.threeDSecure = threeDSecure;
        return this;
    }
    withWhitelistStatus(whitelistStatus) {
        this.whitelistStatus = whitelistStatus == true ? "TRUE" : "FALSE";
        return this;
    }
    withStoredCredential(storedCredential) {
        this.storedCredential = storedCredential;
        return this;
    }
    withEnableExemptionOptimization(value) {
        this.enableExemptionOptimization = value;
        return this;
    }
    withMobileData(value) {
        this.mobileData = value;
        return this;
    }
    withPaymentMethod(value) {
        this.paymentMethod = value;
        if (this.paymentMethod?.isSecure3d) {
            const secureEcom = this.paymentMethod.threeDSecure;
            if (secureEcom !== null) {
                this.threeDSecure = secureEcom;
            }
        }
        return this;
    }
    async execute(configName = "default", version = Entities_1.Secure3dVersion.ANY) {
        // TODO: Implement validations
        // parent::execute();
        super.execute();
        // Setup return object
        let rvalue = this.threeDSecure;
        if (!rvalue) {
            rvalue = new Entities_1.ThreeDSecure();
            rvalue.setVersion(version);
        }
        // Working version
        if (rvalue.getVersion()) {
            version = rvalue.getVersion();
        }
        // Get the provider
        const provider = __1.ServicesContainer.instance().getSecure3d(configName, version);
        if (version === Entities_1.Secure3dVersion.ONE &&
            (provider instanceof __1.GpApiConnector ||
                provider instanceof __1.GpEcomConnector)) {
            throw new Entities_1.BuilderError(`3D Secure ${version} is no longer supported!`);
        }
        if (provider) {
            let canDowngrade = false;
            if (provider.getVersion() === Entities_1.Secure3dVersion.TWO &&
                version === Entities_1.Secure3dVersion.ANY &&
                !(provider instanceof __1.GpEcomConnector ||
                    provider instanceof __1.GpApiConnector)) {
                try {
                    const oneProvider = __1.ServicesContainer.instance().getSecure3d(configName, Entities_1.Secure3dVersion.ONE);
                    canDowngrade = !!oneProvider;
                }
                catch (exc) {
                    // NOT CONFIGURED
                }
            }
            // Process the request, capture any exceptions which might have been thrown
            let response = null;
            try {
                response = await provider.processSecure3d(this);
                if (!response && canDowngrade) {
                    return await this.execute(configName, Entities_1.Secure3dVersion.ONE);
                }
            }
            catch (exc) {
                // Check for not enrolled
                if (exc.responseCode !== null) {
                    if (exc.responseCode === "110" &&
                        provider.getVersion() === Entities_1.Secure3dVersion.ONE) {
                        return rvalue;
                    }
                    if (provider instanceof __1.GpApiConnector) {
                        throw exc;
                    }
                }
                else if (canDowngrade &&
                    this._transactionType === Entities_1.TransactionType.VerifyEnrolled) {
                    return await this.execute(configName, Entities_1.Secure3dVersion.ONE);
                }
                else {
                    // Throw exception
                    throw exc;
                }
            }
            // Check the response
            if (response) {
                switch (this._transactionType) {
                    case Entities_1.TransactionType.VerifyEnrolled:
                        if (response.threeDSecure) {
                            rvalue = response.threeDSecure;
                            if (["True", "Y", true].includes(rvalue.enrolled)) {
                                rvalue.setAmount(this.getAmount());
                                rvalue.setCurrency(this.getCurrency());
                                rvalue.setOrderId(response.orderId);
                                rvalue.setVersion(provider.getVersion());
                            }
                            else if (canDowngrade) {
                                return this.execute(configName, Entities_1.Secure3dVersion.ONE);
                            }
                        }
                        else if (canDowngrade) {
                            return this.execute(configName, Entities_1.Secure3dVersion.ONE);
                        }
                        break;
                    case Entities_1.TransactionType.InitiateAuthentication:
                    case Entities_1.TransactionType.VerifySignature:
                        rvalue.merge(response.threeDSecure);
                        break;
                }
            }
        }
        return rvalue;
    }
    setupValidations() {
        this.validations
            .of("transactionType", Entities_1.TransactionType.VerifyEnrolled)
            .check("paymentMethod")
            .isNotNull();
        this.validations
            .of("transactionType", Entities_1.TransactionType.VerifyEnrolled)
            .when("paymentMethod")
            .isNotNull()
            .check("paymentMethod")
            .isInstanceOf("Secure3d");
        this.validations
            .of("transactionType", Entities_1.TransactionType.VerifySignature)
            .with("version", Entities_1.Secure3dVersion.ONE)
            .check("threeDSecure")
            .isNotNull()
            .with("version", Entities_1.Secure3dVersion.ONE)
            .check("payerAuthenticationResponse")
            .isNotNull();
        this.validations
            .of("transactionType", Entities_1.TransactionType.VerifySignature)
            .when("version")
            .isEqualTo(Entities_1.Secure3dVersion.TWO)
            .check("threeDSecure.serverTransactionId")
            .isNotNull();
        this.validations
            .of("transactionType", Entities_1.TransactionType.InitiateAuthentication)
            .check("threeDSecure")
            .isNotNull();
        this.validations
            .of("transactionType", Entities_1.TransactionType.InitiateAuthentication)
            .when("paymentMethod")
            .isNotNull()
            .check("paymentMethod")
            .isInstanceOf("Secure3d");
        this.validations
            .of("transactionType", Entities_1.TransactionType.InitiateAuthentication)
            .when("merchantInitiatedRequestType")
            .isNotNull()
            .check("merchantInitiatedRequestType")
            .isNotEqualTo(Entities_1.AuthenticationRequestType.PaymentTransaction);
        this.validations
            .of("transactionType", Entities_1.TransactionType.InitiateAuthentication)
            .when("accountAgeIndicator")
            .isNotNull()
            .check("accountAgeIndicator")
            .isNotEqualTo(Entities_1.AgeIndicator.NoAccount);
        this.validations
            .of("transactionType", Entities_1.TransactionType.InitiateAuthentication)
            .when("passwordChangeIndicator")
            .isNotNull()
            .check("passwordChangeIndicator")
            .isNotEqualTo(Entities_1.AgeIndicator.NoAccount);
        this.validations
            .of("transactionType", Entities_1.TransactionType.InitiateAuthentication)
            .when("shippingAddressUsageIndicator")
            .isNotNull()
            .check("shippingAddressUsageIndicator")
            .isNotEqualTo(Entities_1.AgeIndicator.NoAccount)
            .when("shippingAddressUsageIndicator")
            .isNotNull()
            .check("shippingAddressUsageIndicator")
            .isNotEqualTo(Entities_1.AgeIndicator.NoAccount);
    }
}
exports.Secure3dBuilder = Secure3dBuilder;
//# sourceMappingURL=Secure3dBuilder.js.map
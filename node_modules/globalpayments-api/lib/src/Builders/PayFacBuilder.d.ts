import { CreditCardData } from "../PaymentMethods";
import { DocumentUploadData } from "../Entities/DocumentUploadData";
import { AccountPermissions } from "../Entities/ProFac/AccountPermissions";
import { BankAccountData } from "../Entities/ProFac/BankAccountData";
import { BankAccountOwnershipData } from "../Entities/ProFac/BankAccountOwnershipData";
import { BeneficialOwnerData } from "../Entities/ProFac/BeneficialOwnerData";
import { BusinessData } from "../Entities/ProFac/BusinessData";
import { DeviceData } from "../Entities/ProFac/DeviceData";
import { FlashFundsPaymentCardData } from "../Entities/ProFac/FlashFundsPaymentCardData";
import { GrossBillingInformation } from "../Entities/ProFac/GrossBillingInformation";
import { RenewAccountData } from "../Entities/ProFac/RenewAccountData";
import { SignificantOwnerData } from "../Entities/ProFac/SignificantOwnerData";
import { ThreatRiskData } from "../Entities/ProFac/ThreatRiskData";
import { UserPersonalData } from "../Entities/ProFac/UserPersonalData";
import { SSORequestData } from "../Entities/SSORequestData";
import { Address, BaseBuilder, Transaction, TransactionModifier, TransactionType } from "../";
import { OrderDevice } from "../Entities/ProFac/OrderDevice";
export declare class PayFacBuilder extends BaseBuilder<Transaction> {
    protected setupValidations(): void;
    transactionType: TransactionType;
    transactionModifier: TransactionModifier;
    bankAccountData: BankAccountData;
    beneficialOwnerData: BeneficialOwnerData;
    deviceData: DeviceData;
    timeZone: string;
    businessData: BusinessData;
    significantOwnerData: SignificantOwnerData;
    threatRiskData: ThreatRiskData;
    userPersonalData: UserPersonalData;
    creditCardInformation: CreditCardData;
    aCHInformation: BankAccountData;
    mailingAddressInformation: Address;
    secondaryBankInformation: BankAccountData;
    grossBillingInformation: GrossBillingInformation;
    negativeLimit: string;
    renewalAccountData: RenewAccountData;
    accountNumber: string;
    password: string;
    accountPermissions: AccountPermissions;
    primaryBankAccountOwner: BankAccountOwnershipData;
    secondaryBankAccountOwner: BankAccountOwnershipData;
    documentUploadData: DocumentUploadData;
    sSORequestData: SSORequestData;
    amount: string;
    receivingAccountNumber: string;
    allowPending: boolean;
    cCAmount: string;
    requireCCRefund: boolean;
    transNum: string;
    externalID: string;
    sourceEmail: string;
    gatewayTransactionId: string;
    cardBrandTransactionId: string;
    globaltransId: string;
    globalTransSource: string;
    orderDevice: OrderDevice;
    orderDeviceData: DeviceData;
    constructor(type: TransactionType, modifer?: TransactionModifier);
    execute(configName?: string): Promise<Transaction>;
    withBankAccountData(bankAccountData: BankAccountData): this;
    withBeneficialOwnerData(beneficialOwnerData: BeneficialOwnerData): this;
    withDeviceData(deviceData: DeviceData): this;
    withTimeZone(timezone: string): this;
    withBusinessData(businessData: BusinessData): this;
    withSignificantOwnerData(significantOwnerData: SignificantOwnerData): this;
    withThreatRiskData(threatRiskData: ThreatRiskData): this;
    withUserPersonalData(userPersonalData: UserPersonalData): this;
    withCreditCardData(creditCardInformation: CreditCardData): this;
    withACHData(achInformation: BankAccountData): this;
    withMailingAddress(mailingAddressInformation: Address): this;
    withSecondaryBankAccountData(secondaryBankInformation: BankAccountData): this;
    withGrossBillingSettleData(grossBillingInformation: GrossBillingInformation): this;
    withAccountNumber(accountNumber: string): this;
    withPassword(password: string): this;
    withAccountPermissions(accountPermissions: AccountPermissions): this;
    withPrimaryBankAccountOwner(primaryBankAccountOwner: BankAccountOwnershipData): this;
    withSecondaryBankAccountOwner(secondaryBankAccountOwner: BankAccountOwnershipData): this;
    withDocumentUploadData(docUploadData: DocumentUploadData): this;
    withSSORequestData(ssoRequestData: SSORequestData): this;
    withNegativeLimit(negativeLimit: string): this;
    withRenewalAccountData(renewalAccountData: RenewAccountData): this;
    withAmount(amount: string): this;
    withFlashFundsPaymentCardData(cardData: FlashFundsPaymentCardData): this;
    withReceivingAccountNumber(receivingAccountNumber: string): this;
    withAllowPending(allowPending: boolean): this;
    withCCAmount(ccAmount: string): this;
    withRequireCCRefund(requireCCRefund: boolean): this;
    withTransNum(transNum: string): this;
    withGatewayTransactionId(gatewayTransactionId: string): this;
    withCardBrandTransactionId(cardBrandTransactionId: string): this;
    withGlobaltransId(globaltransId: string): this;
    withGlobalTransSource(globalTransSource: string): this;
    withExternalID(externalId: string): this;
    withSourceEmail(sourceEmail: string): this;
    withOrderDevice(orderDevice: OrderDevice): this;
    withOrderDeviceData(orderDeviceData: DeviceData): this;
}

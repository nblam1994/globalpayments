"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpEcomRequestBuilder = void 0;
const elementtree_1 = require("@azz/elementtree");
const src_1 = require("../../../../src");
class GpEcomRequestBuilder {
    buildSupplementaryData(supplementaryData, request) {
        const supplementaryDataElem = (0, elementtree_1.SubElement)(request, "supplementaryData");
        for (const key of Object.keys(supplementaryData)) {
            const item = (0, elementtree_1.SubElement)(supplementaryDataElem, "item", { type: key });
            const items = !Array.isArray(supplementaryData[key])
                ? supplementaryData[key].split(" ")
                : supplementaryData[key];
            items.map((itemSplitted, index) => {
                (0, elementtree_1.SubElement)(item, "field" + index).append((0, elementtree_1.CData)(itemSplitted));
            });
        }
    }
    buildEnvelope(transaction) {
        return new elementtree_1.ElementTree(transaction).write();
    }
    numberFormat(amount) {
        const f = parseFloat(amount.toString()) * 100;
        return parseFloat(f.toFixed(2)).toString();
    }
    generateHash(config, timestamp, orderId, amount, currency, paymentData, verify = false) {
        const data = [timestamp, config.merchantId, orderId];
        if (false === verify) {
            data.push(amount);
            data.push(currency);
        }
        data.push(paymentData);
        return src_1.GenerationUtils.generateHash(data.join("."), config.sharedSecret);
    }
    buildCustomer(customer) {
        const payer = (0, elementtree_1.Element)("payer", {
            ref: customer.key || src_1.StringUtils.uuid(),
            type: "Retail",
        });
        (0, elementtree_1.SubElement)(payer, "title").append((0, elementtree_1.CData)(customer.title));
        (0, elementtree_1.SubElement)(payer, "firstname").append((0, elementtree_1.CData)(customer.firstName));
        (0, elementtree_1.SubElement)(payer, "surname").append((0, elementtree_1.CData)(customer.lastName));
        (0, elementtree_1.SubElement)(payer, "company").append((0, elementtree_1.CData)(customer.company));
        if (customer.address) {
            const address = (0, elementtree_1.SubElement)(payer, "address");
            (0, elementtree_1.SubElement)(address, "line1").append((0, elementtree_1.CData)(customer.address.streetAddress1));
            (0, elementtree_1.SubElement)(address, "line2").append((0, elementtree_1.CData)(customer.address.streetAddress2));
            (0, elementtree_1.SubElement)(address, "line3").append((0, elementtree_1.CData)(customer.address.streetAddress3));
            (0, elementtree_1.SubElement)(address, "city").append((0, elementtree_1.CData)(customer.address.city));
            (0, elementtree_1.SubElement)(address, "county").append((0, elementtree_1.CData)(customer.address.province));
            (0, elementtree_1.SubElement)(address, "postcode").append((0, elementtree_1.CData)(customer.address.postalCode));
            if (customer.address.country) {
                (0, elementtree_1.SubElement)(address, "country", { code: "GB" }).append((0, elementtree_1.CData)(customer.address.country));
            }
        }
        const phone = (0, elementtree_1.SubElement)(payer, "phonenumbers");
        (0, elementtree_1.SubElement)(phone, "home").append((0, elementtree_1.CData)(customer.homePhone));
        (0, elementtree_1.SubElement)(phone, "work").append((0, elementtree_1.CData)(customer.workPhone));
        (0, elementtree_1.SubElement)(phone, "fax").append((0, elementtree_1.CData)(customer.fax));
        (0, elementtree_1.SubElement)(phone, "mobile").append((0, elementtree_1.CData)(customer.mobilePhone));
        (0, elementtree_1.SubElement)(payer, "email").append((0, elementtree_1.CData)(customer.email));
        return payer;
    }
}
exports.GpEcomRequestBuilder = GpEcomRequestBuilder;
//# sourceMappingURL=GpEcomRequestBuilder.js.map
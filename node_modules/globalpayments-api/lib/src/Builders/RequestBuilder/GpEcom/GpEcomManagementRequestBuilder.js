"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpEcomManagementRequestBuilder = void 0;
const elementtree_1 = require("@azz/elementtree");
const src_1 = require("../../../../src");
const GpEcomRequestBuilder_1 = require("./GpEcomRequestBuilder");
class GpEcomManagementRequestBuilder extends GpEcomRequestBuilder_1.GpEcomRequestBuilder {
    /**
     * @param $builder
     * @return bool
     */
    canProcess(builder) {
        if (builder instanceof src_1.ManagementBuilder) {
            return true;
        }
        return false;
    }
    buildRequest(builder, config) {
        const timestamp = builder.timestamp || src_1.GenerationUtils.generateTimestamp();
        const orderId = builder.orderId || src_1.GenerationUtils.generateTimestamp();
        const transactionType = src_1.GpEcomMapping.mapManageRequestType(builder);
        const request = (0, elementtree_1.Element)("request", {
            timestamp,
            type: transactionType,
        });
        if (config.merchantId) {
            (0, elementtree_1.SubElement)(request, "merchantid").append((0, elementtree_1.CData)(config.merchantId));
        }
        if (config.accountId !== null) {
            (0, elementtree_1.SubElement)(request, "account").append((0, elementtree_1.CData)(config.accountId));
        }
        if (builder.alternativePaymentType === null) {
            (0, elementtree_1.SubElement)(request, "channel").append((0, elementtree_1.CData)(config.channel) || "");
        }
        if (builder.amount) {
            const amountAttrs = builder.currency
                ? { currency: builder.currency }
                : {};
            (0, elementtree_1.SubElement)(request, "amount", amountAttrs).append((0, elementtree_1.CData)(this.numberFormat(builder.amount)));
        }
        else if (builder.transactionType === src_1.TransactionType.Capture) {
            throw new src_1.BuilderError("Amount cannot be null for capture");
        }
        (0, elementtree_1.SubElement)(request, "orderid").append((0, elementtree_1.CData)(orderId));
        const ref = builder.paymentMethod;
        (0, elementtree_1.SubElement)(request, "pasref").append((0, elementtree_1.CData)(ref.transactionId));
        if (builder.transactionType === src_1.TransactionType.Refund) {
            if (builder.authorizationCode) {
                (0, elementtree_1.SubElement)(request, "authcode").append((0, elementtree_1.CData)(builder.authorizationCode) || "");
            }
            (0, elementtree_1.SubElement)(request, "refundhash").append((0, elementtree_1.CData)(src_1.GenerationUtils.generateHash(config.rebatePassword) || ""));
        }
        // reason code
        if (builder.reasonCode) {
            (0, elementtree_1.SubElement)(request, "reasoncode").append((0, elementtree_1.CData)(builder.reasonCode.toString()));
        }
        if (builder.alternativePaymentType !== null) {
            (0, elementtree_1.SubElement)(request, "paymentmethod").append((0, elementtree_1.CData)(builder.alternativePaymentType || ""));
            if (builder.transactionType == src_1.TransactionType.Confirm) {
                const paymentMethodDetails = (0, elementtree_1.SubElement)(request, "paymentmethoddetails");
                const apmResponse = builder.paymentMethod.alternativePaymentResponse;
                if (builder.alternativePaymentType == src_1.AlternativePaymentType.Paypal &&
                    apmResponse) {
                    (0, elementtree_1.SubElement)(paymentMethodDetails, "Token").append((0, elementtree_1.CData)(apmResponse.sessionToken));
                    (0, elementtree_1.SubElement)(paymentMethodDetails, "PayerID").append((0, elementtree_1.CData)(apmResponse.providerReference));
                }
            }
        }
        if (builder.description) {
            const comments = (0, elementtree_1.SubElement)(request, "comments");
            (0, elementtree_1.SubElement)(comments, "comment", { id: 1 }).append((0, elementtree_1.CData)(builder.description));
        }
        (0, elementtree_1.SubElement)(request, "sha1hash").append((0, elementtree_1.CData)(this.generateHash(config, timestamp, orderId, builder.amount ? this.numberFormat(builder.amount) : "", builder.currency, "")));
        return new src_1.Request(config.serviceUrl, "POST", this.buildEnvelope(request));
    }
    buildRequestFromJson(jsonRequest, config) {
        jsonRequest;
        config;
        // do nothing currently
    }
}
exports.GpEcomManagementRequestBuilder = GpEcomManagementRequestBuilder;
//# sourceMappingURL=GpEcomManagementRequestBuilder.js.map
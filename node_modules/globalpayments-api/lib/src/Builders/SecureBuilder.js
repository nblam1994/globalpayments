"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecureBuilder = void 0;
const Entities_1 = require("../../src/Entities");
const BaseBuilder_1 = require("./BaseBuilder");
class SecureBuilder extends BaseBuilder_1.BaseBuilder {
    amount;
    currency;
    orderCreateDate;
    orderTransactionType;
    orderId;
    referenceNumber;
    addressMatchIndicator;
    shippingAddress;
    shippingMethod;
    shippingNameMatchesCardHolderName;
    shippingAddressCreateDate;
    shippingAddressUsageIndicator;
    giftCardAmount;
    giftCardCount;
    giftCardCurrency;
    deliveryEmail;
    deliveryTimeframe;
    preOrderAvailabilityDate;
    preOrderIndicator;
    reorderIndicator;
    customerAccountId;
    accountAgeIndicator;
    accountChangeDate;
    accountCreateDate;
    accountChangeIndicator;
    passwordChangeDate;
    passwordChangeIndicator;
    phoneList;
    homeCountryCode;
    homeNumber;
    workCountryCode;
    workNumber;
    mobileCountryCode;
    mobileNumber;
    paymentAccountCreateDate;
    paymentAgeIndicator;
    previousSuspiciousActivity;
    numberOfPurchasesInLastSixMonths;
    numberOfTransactionsInLast24Hours;
    numberOfAddCardAttemptsInLast24Hours;
    numberOfTransactionsInLastYear;
    browserData;
    priorAuthenticationData;
    priorAuthenticationMethod;
    priorAuthenticationTransactionId;
    priorAuthenticationTimestamp;
    maxNumberOfInstallments;
    recurringAuthorizationExpiryDate;
    recurringAuthorizationFrequency;
    customerAuthenticationData;
    customerAuthenticationMethod;
    customerAuthenticationTimestamp;
    idempotencyKey;
    authenticationSource;
    paymentMethod;
    billingAddress;
    /**************************************GETTERS**************************************/
    /** @returns string|number */
    getAmount() {
        return this.amount;
    }
    /** @returns string */
    getCurrency() {
        return this.currency;
    }
    /** @returns AuthenticationSource */
    getAuthenticationSource() {
        return this.authenticationSource;
    }
    /** @returns Date */
    getOrderCreateDate() {
        return this.orderCreateDate;
    }
    /** @returns string */
    getOrderId() {
        return this.orderId;
    }
    /** @returns OrderTransactionType */
    getOrderTransactionType() {
        return this.orderTransactionType;
    }
    /** @returns string */
    getReferenceNumber() {
        return this.referenceNumber;
    }
    /** @returns boolean */
    isAddressMatchIndicator() {
        return this.addressMatchIndicator;
    }
    /** @returns Address */
    getShippingAddress() {
        return this.shippingAddress;
    }
    /** @returns ShippingMethod */
    getShippingMethod() {
        return this.shippingMethod;
    }
    /** @returns boolean */
    getShippingNameMatchesCardHolderName() {
        return this.shippingNameMatchesCardHolderName;
    }
    /** @returns Date */
    getShippingAddressCreateDate() {
        return this.shippingAddressCreateDate;
    }
    /** @returns AgeIndicator */
    getShippingAddressUsageIndicator() {
        return this.shippingAddressUsageIndicator;
    }
    /** @returns number */
    getGiftCardCount() {
        return this.giftCardCount;
    }
    /** @returns string */
    getGiftCardCurrency() {
        return this.giftCardCurrency;
    }
    /** @returns number */
    getGiftCardAmount() {
        return this.giftCardAmount;
    }
    /** @returns string */
    getDeliveryEmail() {
        return this.deliveryEmail;
    }
    /** @returns DeliveryTimeFrame */
    getDeliveryTimeframe() {
        return this.deliveryTimeframe;
    }
    /** @returns Date */
    getPreOrderAvailabilityDate() {
        return this.preOrderAvailabilityDate;
    }
    /** @returns PreOrderIndicator */
    getPreOrderIndicator() {
        return this.preOrderIndicator;
    }
    /** @returns ReorderIndicator */
    getReorderIndicator() {
        return this.reorderIndicator;
    }
    /** @returns string */
    getCustomerAccountId() {
        return this.customerAccountId;
    }
    /** @returns AgeIndicator */
    getAccountAgeIndicator() {
        return this.accountAgeIndicator;
    }
    /** @returns Date */
    getAccountChangeDate() {
        return this.accountChangeDate;
    }
    /** @returns Date */
    getAccountCreateDate() {
        return this.accountCreateDate;
    }
    /** @returns AgeIndicator */
    getAccountChangeIndicator() {
        return this.accountChangeIndicator;
    }
    /** @returns Date */
    getPasswordChangeDate() {
        return this.passwordChangeDate;
    }
    /** @returns AgeIndicator */
    getPasswordChangeIndicator() {
        return this.passwordChangeIndicator;
    }
    /** @returns string */
    getHomeCountryCode() {
        return this.homeCountryCode;
    }
    /** @returns string */
    getHomeNumber() {
        return this.homeNumber;
    }
    /** @returns string */
    getWorkCountryCode() {
        return this.workCountryCode;
    }
    /** @returns string */
    getWorkNumber() {
        return this.workNumber;
    }
    /** @returns string */
    getMobileCountryCode() {
        return this.mobileCountryCode;
    }
    /** @returns string */
    getMobileNumber() {
        return this.mobileNumber;
    }
    /** @returns Date */
    getPaymentAccountCreateDate() {
        return this.paymentAccountCreateDate;
    }
    /** @returns AgeIndicator */
    getPaymentAgeIndicator() {
        return this.paymentAgeIndicator;
    }
    /** @returns boolean */
    getPreviousSuspiciousActivity() {
        return this.previousSuspiciousActivity;
    }
    /** @returns number */
    getNumberOfPurchasesInLastSixMonths() {
        return this.numberOfPurchasesInLastSixMonths;
    }
    /** @returns number */
    getNumberOfTransactionsInLast24Hours() {
        return this.numberOfTransactionsInLast24Hours;
    }
    /** @returns number */
    getNumberOfAddCardAttemptsInLast24Hours() {
        return this.numberOfAddCardAttemptsInLast24Hours;
    }
    /** @returns number */
    getNumberOfTransactionsInLastYear() {
        return this.numberOfTransactionsInLastYear;
    }
    /** @returns BrowserData */
    getBrowserData() {
        return this.browserData;
    }
    /** @returns string */
    getPriorAuthenticationData() {
        return this.priorAuthenticationData;
    }
    /** @returns PriorAuthenticationMethod */
    getPriorAuthenticationMethod() {
        return this.priorAuthenticationMethod;
    }
    /** @returns string */
    getPriorAuthenticationTransactionId() {
        return this.priorAuthenticationTransactionId;
    }
    /** @returns Date */
    getPriorAuthenticationTimestamp() {
        return this.priorAuthenticationTimestamp;
    }
    /** @returns number */
    getMaxNumberOfInstallments() {
        return this.maxNumberOfInstallments;
    }
    /** @returns Date */
    getRecurringAuthorizationExpiryDate() {
        return this.recurringAuthorizationExpiryDate;
    }
    /** @returns number */
    getRecurringAuthorizationFrequency() {
        return this.recurringAuthorizationFrequency;
    }
    /** @returns string */
    getCustomerAuthenticationData() {
        return this.customerAuthenticationData;
    }
    /** @returns CustomerAuthenticationMethod */
    getCustomerAuthenticationMethod() {
        return this.customerAuthenticationMethod;
    }
    /** @returns Date */
    getCustomerAuthenticationTimestamp() {
        return this.customerAuthenticationTimestamp;
    }
    /**
     * @param {TransactionType} transactionType
     * @returns {this}
     */
    withTransactionType(transactionType) {
        this.transactionType = transactionType;
        return this;
    }
    /**
     * @param {string | number} value
     * @returns {this}
     */
    withAmount(value) {
        this.amount = value;
        return this;
    }
    /**
     * @param {string} value
     * @returns {this}
     */
    withCurrency(value) {
        this.currency = value;
        return this;
    }
    /**
     * @param {AuthenticationSource} value
     * @returns {this}
     */
    withAuthenticationSource(value) {
        this.authenticationSource = value;
        return this;
    }
    /**
     * @param {string} value
     * @returns {this}
     */
    withOrderCreateDate(value) {
        this.orderCreateDate = value;
        return this;
    }
    /**
     * @param {string} referenceNumber
     * @returns {this}
     */
    withReferenceNumber(referenceNumber) {
        this.referenceNumber = referenceNumber;
        return this;
    }
    /**
     * @param {boolean} value
     * @returns {this}
     */
    withAddressMatchIndicator(value) {
        this.addressMatchIndicator = value;
        return this;
    }
    /**
     * @param {Address} address
     * @param {string} type
     * @returns {this}
     */
    withAddress(address, type = Entities_1.AddressType.Billing) {
        if (type === Entities_1.AddressType.Billing) {
            this.billingAddress = address;
        }
        else {
            this.shippingAddress = address;
        }
        return this;
    }
    /**
     * @param {number} giftCardAmount
     * @returns {this}
     */
    withGiftCardAmount(giftCardAmount) {
        this.giftCardAmount = giftCardAmount;
        return this;
    }
    /**
     * @param {number} giftCardCount
     * @returns {this}
     */
    withGiftCardCount(giftCardCount) {
        this.giftCardCount = giftCardCount;
        return this;
    }
    /**
     * @param {string} giftCardCurrency
     * @returns {this}
     */
    withGiftCardCurrency(giftCardCurrency) {
        this.giftCardCurrency = giftCardCurrency;
        return this;
    }
    /**
     * @param {string} deliveryEmail
     * @returns {this}
     */
    withDeliveryEmail(deliveryEmail) {
        this.deliveryEmail = deliveryEmail;
        return this;
    }
    /**
     * @param {DeliveryTimeFrame} deliveryTimeframe
     * @returns {this}
     */
    withDeliveryTimeFrame(deliveryTimeframe) {
        this.deliveryTimeframe = deliveryTimeframe;
        return this;
    }
    /**
     * @param {ShippingMethod} shippingMethod
     * @returns {this}
     */
    withShippingMethod(shippingMethod) {
        this.shippingMethod = shippingMethod;
        return this;
    }
    /**
     * @param {boolean} shippingNameMatchesCardHolderName
     * @returns {this}
     */
    withShippingNameMatchesCardHolderName(shippingNameMatchesCardHolderName) {
        this.shippingNameMatchesCardHolderName = shippingNameMatchesCardHolderName;
        return this;
    }
    /**
     * @param {Date} shippingAddressCreateDate
     * @returns {this}
     */
    withShippingAddressCreateDate(shippingAddressCreateDate) {
        this.shippingAddressCreateDate = shippingAddressCreateDate;
        return this;
    }
    /**
     * @param {any} shippingAddressUsageIndicator
     * @returns {this}
     */
    withShippingAddressUsageIndicator(shippingAddressUsageIndicator) {
        this.shippingAddressUsageIndicator = shippingAddressUsageIndicator;
        return this;
    }
    /**
     * @param {any} preOrderAvailabilityDate
     * @returns {this}
     */
    withPreOrderAvailabilityDate(preOrderAvailabilityDate) {
        this.preOrderAvailabilityDate = preOrderAvailabilityDate;
        return this;
    }
    /**
     * @param {any} preOrderIndicator
     * @returns {this}
     */
    withPreOrderIndicator(preOrderIndicator) {
        this.preOrderIndicator = preOrderIndicator;
        return this;
    }
    /**
     * @param {ReorderIndicator} reorderIndicator
     * @returns {this}
     */
    withReorderIndicator(reorderIndicator) {
        this.reorderIndicator = reorderIndicator;
        return this;
    }
    /**
     * @param {OrderTransactionType} orderTransactionType
     * @returns {this}
     */
    withOrderTransactionType(orderTransactionType) {
        this.orderTransactionType = orderTransactionType;
        return this;
    }
    /**
     * @param {string} value
     * @returns {this}
     */
    withOrderId(value) {
        this.orderId = value;
        return this;
    }
    /**
     * @param {string} customerAccountId
     * @returns {this}
     */
    withCustomerAccountId(customerAccountId) {
        this.customerAccountId = customerAccountId;
        return this;
    }
    /**
     * @param {AgeIndicator} ageIndicator
     * @returns {this}
     */
    withAccountAgeIndicator(ageIndicator) {
        this.accountAgeIndicator = ageIndicator;
        return this;
    }
    /**
     * @param {Date} accountChangeDate
     * @returns {this}
     */
    withAccountChangeDate(accountChangeDate) {
        this.accountChangeDate = accountChangeDate;
        return this;
    }
    /**
     * @param {Date} accountCreateDate
     * @returns {this}
     */
    withAccountCreateDate(accountCreateDate) {
        this.accountCreateDate = accountCreateDate;
        return this;
    }
    /**
     * @param {AgeIndicator} accountChangeIndicator
     * @returns {this}
     */
    withAccountChangeIndicator(accountChangeIndicator) {
        this.accountChangeIndicator = accountChangeIndicator;
        return this;
    }
    /**
     * @param {Date} passwordChangeDate
     * @returns {this}
     */
    withPasswordChangeDate(passwordChangeDate) {
        this.passwordChangeDate = passwordChangeDate;
        return this;
    }
    /**
     * @param {AgeIndicator} passwordChangeIndicator
     * @returns {this}
     */
    withPasswordChangeIndicator(passwordChangeIndicator) {
        this.passwordChangeIndicator = passwordChangeIndicator;
        return this;
    }
    /**
     * @param {string} phoneCountryCode
     * @param {string} number
     * @param {PhoneNumberType} type
     *
     * @returns {this}
     */
    withPhoneNumber(phoneCountryCode, number, type) {
        const phoneNumber = new Entities_1.PhoneNumber(phoneCountryCode, number, type);
        this.phoneList[type] = phoneNumber;
        switch (phoneNumber.type) {
            case Entities_1.PhoneNumberType.HOME:
                this.homeNumber = number;
                this.homeCountryCode = phoneCountryCode;
                break;
            case Entities_1.PhoneNumberType.WORK:
                this.workNumber = number;
                this.workCountryCode = phoneCountryCode;
                break;
            case Entities_1.PhoneNumberType.MOBILE:
                this.mobileNumber = number;
                this.mobileCountryCode = phoneCountryCode;
                break;
            default:
                break;
        }
        return this;
    }
    /**
     * @deprecated  Will be replaced with method withPhoneNumber($phoneCountryCode, $number, $type)
     * @param {string} countryCode
     * @param {string} number
     *
     * @returns {this}
     */
    withHomeNumber(countryCode, number) {
        this.homeCountryCode = countryCode;
        this.homeNumber = number;
        return this;
    }
    /**
     * @deprecated  Will be replaced with method withPhoneNumber($phoneCountryCode, $number, $type)
     *
     * @param {string} countryCode
     * @param {string} number
     * @returns {this}
     */
    withWorkNumber(countryCode, number) {
        this.workCountryCode = countryCode;
        this.workNumber = number;
        return this;
    }
    /**
     * @deprecated  Will be replaced with method withPhoneNumber($phoneCountryCode, $number, $type)
     *
     * @param {string} countryCode
     * @param {string} number
     * @returns {this}
     */
    withMobileNumber(countryCode, number) {
        this.mobileCountryCode = countryCode;
        this.mobileNumber = number;
        return this;
    }
    /**
     * @param {Date} paymentAccountCreateDate
     * @returns {this}
     */
    withPaymentAccountCreateDate(paymentAccountCreateDate) {
        this.paymentAccountCreateDate = paymentAccountCreateDate;
        return this;
    }
    /**
     * @param {AgeIndicator} paymentAgeIndicator
     * @returns {this}
     */
    withPaymentAccountAgeIndicator(paymentAgeIndicator) {
        this.paymentAgeIndicator = paymentAgeIndicator;
        return this;
    }
    /**
     * @param {any} previousSuspiciousActivity
     * @returns {this}
     */
    withPreviousSuspiciousActivity(previousSuspiciousActivity) {
        this.previousSuspiciousActivity = previousSuspiciousActivity;
        return this;
    }
    /**
     * @param {string} numberOfPurchasesInLastSixMonths
     * @returns {this}
     */
    withNumberOfPurchasesInLastSixMonths(numberOfPurchasesInLastSixMonths) {
        this.numberOfPurchasesInLastSixMonths = numberOfPurchasesInLastSixMonths;
        return this;
    }
    /**
     * @param {number} numberOfTransactionsInLast24Hours
     * @returns {this}
     */
    withNumberOfTransactionsInLast24Hours(numberOfTransactionsInLast24Hours) {
        this.numberOfTransactionsInLast24Hours = numberOfTransactionsInLast24Hours;
        return this;
    }
    /**
     * @param {number} numberOfAddCardAttemptsInLast24Hours
     * @returns {this}
     */
    withNumberOfAddCardAttemptsInLast24Hours(numberOfAddCardAttemptsInLast24Hours) {
        this.numberOfAddCardAttemptsInLast24Hours =
            numberOfAddCardAttemptsInLast24Hours;
        return this;
    }
    /**
     * @param {number} numberOfTransactionsInLastYear
     * @returns {this}
     */
    withNumberOfTransactionsInLastYear(numberOfTransactionsInLastYear) {
        this.numberOfTransactionsInLastYear = numberOfTransactionsInLastYear;
        return this;
    }
    /**
     * @param {BrowserData} value
     * @returns {this}
     */
    withBrowserData(value) {
        this.browserData = value;
        return this;
    }
    /**
     * @param {string} priorAuthenticationData
     * @returns {this}
     */
    withPriorAuthenticationData(priorAuthenticationData) {
        this.priorAuthenticationData = priorAuthenticationData;
        return this;
    }
    /**
     * @param {PriorAuthenticationMethod} priorAuthenticationMethod
     * @returns {this}
     */
    withPriorAuthenticationMethod(priorAuthenticationMethod) {
        this.priorAuthenticationMethod = priorAuthenticationMethod;
        return this;
    }
    /**
     * @param {string} priorAuthenticationTransactionId
     * @returns {this}
     */
    withPriorAuthenticationTransactionId(priorAuthenticationTransactionId) {
        this.priorAuthenticationTransactionId = priorAuthenticationTransactionId;
        return this;
    }
    /**
     * @param {Date} priorAuthenticationTimestamp
     * @returns {this}
     */
    withPriorAuthenticationTimestamp(priorAuthenticationTimestamp) {
        this.priorAuthenticationTimestamp = priorAuthenticationTimestamp;
        return this;
    }
    /**
     * @param {number} maxNumberOfInstallments
     * @returns {this}
     */
    withMaxNumberOfInstallments(maxNumberOfInstallments) {
        this.maxNumberOfInstallments = maxNumberOfInstallments;
        return this;
    }
    /**
     * @param {Date} recurringAuthorizationExpiryDate
     * @returns {this}
     */
    withRecurringAuthorizationExpiryDate(recurringAuthorizationExpiryDate) {
        this.recurringAuthorizationExpiryDate = recurringAuthorizationExpiryDate;
        return this;
    }
    /**
     * @param {number} recurringAuthorizationFrequency
     * @returns {this}
     */
    withRecurringAuthorizationFrequency(recurringAuthorizationFrequency) {
        this.recurringAuthorizationFrequency = recurringAuthorizationFrequency;
        return this;
    }
    /**
     * @param {string} customerAuthenticationData
     * @returns {this}
     */
    withCustomerAuthenticationData(customerAuthenticationData) {
        this.customerAuthenticationData = customerAuthenticationData;
        return this;
    }
    /**
     * @param {CustomerAuthenticationMethod} customerAuthenticationMethod
     * @returns {this}
     */
    withCustomerAuthenticationMethod(customerAuthenticationMethod) {
        this.customerAuthenticationMethod = customerAuthenticationMethod;
        return this;
    }
    /**
     * @param {Date} customerAuthenticationTimestamp
     * @returns {this}
     */
    withCustomerAuthenticationTimestamp(customerAuthenticationTimestamp) {
        this.customerAuthenticationTimestamp = customerAuthenticationTimestamp;
        return this;
    }
    /**
     * @param {string} value
     * @returns {SecureBuilder}
     */
    withIdempotencyKey(value) {
        this.idempotencyKey = value;
        return this;
    }
}
exports.SecureBuilder = SecureBuilder;
//# sourceMappingURL=SecureBuilder.js.map
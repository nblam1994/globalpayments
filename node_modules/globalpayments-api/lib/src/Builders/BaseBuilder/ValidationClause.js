"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationClause = void 0;
const Entities_1 = require("../../Entities");
class ValidationClause {
    parent;
    target;
    callback;
    message;
    precondition;
    constructor(parent, target, precondition = false) {
        this.parent = parent;
        this.target = target;
        this.precondition = precondition;
    }
    isNotNull(message) {
        this.callback = (builder) => {
            let value = builder[this.target.property];
            if (this.target.property.includes(".")) {
                const keys = this.target.property.split(".");
                for (const key of keys) {
                    value = value ? value[key] : builder[key];
                }
            }
            return undefined !== value && null !== value;
        };
        this.message = message
            ? message
            : `${this.target.property} cannot be null for this transaction type.`;
        if (this.precondition) {
            return this.target;
        }
        return this.parent
            .of(this.target.enumName, this.target.type)
            .with(this.target.constraintProperty, this.target.constraint);
    }
    isNull(message) {
        this.callback = (builder) => {
            const value = builder[this.target.property];
            return undefined === value || null === value;
        };
        this.message = message
            ? message
            : `${this.target.property} cannot be set for this transaction type.`;
        if (this.precondition) {
            return this.target;
        }
        return this.parent
            .of(this.target.enumName, this.target.type)
            .with(this.target.constraintProperty, this.target.constraint);
    }
    isNotEmpty(message) {
        this.callback = (builder) => {
            const value = builder[this.target.property];
            return !!value;
        };
        this.message = message
            ? message
            : `${this.target.property} cannot be empty for this transaction type.`;
        if (this.precondition) {
            return this.target;
        }
        return this.parent
            .of(this.target.enumName, this.target.type)
            .with(this.target.constraintProperty, this.target.constraint);
    }
    isNotEqualTo(expected, message) {
        this.callback = (builder) => {
            const value = builder[this.target.property];
            return expected !== value;
        };
        this.message = message
            ? message
            : `${this.target.property} cannot be ${expected} for this transaction type.`;
        if (this.precondition) {
            return this.target;
        }
        return this.parent
            .of(this.target.enumName, this.target.type)
            .with(this.target.constraintProperty, this.target.constraint);
    }
    isEqualTo(expected, message) {
        this.callback = (builder) => {
            const value = builder[this.target.property];
            return expected === value;
        };
        this.message = message
            ? message
            : `${this.target.property} cannot be different than ${expected} for this transaction type.`;
        if (this.precondition) {
            return this.target;
        }
        return this.parent
            .of(this.target.enumName, this.target.type)
            .with(this.target.constraintProperty, this.target.constraint);
    }
    isInstanceOf(clazz, message = null) {
        this.callback = (builder) => {
            // this will result in checking isInterfaceRequired (e.g paymentMethod.isSecure3d)
            if (!builder[this.target.property]["is" + clazz]) {
                throw new Entities_1.BuilderError(`${this.target.property} must be an instance of the ${clazz.name} class.`);
            }
            return true;
        };
        this.message =
            message !== null
                ? message
                : `${this.target.property} must be an instance of the ${clazz.name} class.`;
        if (this.precondition) {
            return this.target;
        }
        return this.parent.of(this.target.enumName, this.target.type);
    }
}
exports.ValidationClause = ValidationClause;
//# sourceMappingURL=ValidationClause.js.map
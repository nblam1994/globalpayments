import { DccRateData, DisputeDocument, LodgingData, PaymentMethod, PaymentMethodUsageMode, ReasonCode, StoredCredentialSequence, TaxType, Transaction, TransactionReference } from "../";
import { TransactionBuilder } from "./TransactionBuilder";
import { CommercialData } from "../Entities/CommercialData";
export declare class ManagementBuilder extends TransactionBuilder<Transaction> {
    amount: string | number | null;
    authAmount: string | number;
    currency: string;
    commercialData?: CommercialData;
    description: string;
    gratuity: string | number | null;
    lodgingData: LodgingData;
    poNumber: string;
    reasonCode?: ReasonCode;
    taxAmount: string | number;
    taxType: TaxType;
    cardType?: string;
    constructor(type: number, paymentMethod?: PaymentMethod);
    get authorizationCode(): string | undefined;
    get clientTransactionId(): string | undefined;
    get orderId(): string | undefined;
    get transactionId(): string | undefined;
    /**
     * Executes the builder against the gateway.
     *
     * @returns Promise<Transaction>
     */
    execute(configName?: string): Promise<Transaction>;
    /**
     * Sets the current transaction's amount.
     *
     * @param amount The amount
     * @returns ManagementBuilder
     */
    withAmount(amount?: string | number | null): this;
    /**
     * Sets the current transaction's authorized amount; where applicable.
     *
     * @param amount The authorized amount
     * @returns ManagementBuilder
     */
    withAuthAmount(amount?: string | number): this;
    /**
     * Sets the currency.
     *
     * The formatting for the supplied value will currently depend on
     * the configured gateway's requirements.
     *
     * @param currency The currency
     * @returns ManagementBuilder
     */
    withCurrency(currency?: string): this;
    withCommercialData(cd: CommercialData): this;
    /**
     * Sets the transaction's description.
     *
     * This value is not guaranteed to be sent in the authorization
     * or settlement process.
     *
     * @param description The description
     * @returns ManagementBuilder
     */
    withDescription(description?: string): this;
    /**
     * Sets the gratuity amount; where applicable.
     *
     * This value is information only and does not affect
     * the authorization amount.
     *
     * @param gratuity The gratuity amount
     * @returns ManagementBuilder
     */
    withGratuity(gratuity?: string | number | null): this;
    /**
     * Sets the purchase order number; where applicable.
     *
     * @param poNumber The PO number
     * @returns ManagementBuilder
     */
    withPoNumber(poNumber?: string): this;
    /**
     * Sets the reason code for the transaction.
     *
     * @param reasonCode The reason code
     * @returns ManagementBuilder
     */
    withReasonCode(reasonCode?: ReasonCode): this;
    /**
     * Sets the tax amount.
     *
     * Useful for commercial purchase card requests.
     *
     * @see AuthorizationBuilder.WithCommercialRequest
     * @param amount The tax amount
     * @returns ManagementBuilder
     */
    withTaxAmount(amount?: string | number): this;
    /**
     * Sets the tax type.
     *
     * Useful for commercial purchase card requests.
     *
     * @see AuthorizationBuilder.withCommercialRequest
     * @param type The tax type
     * @returns ManagementBuilder
     */
    withTaxType(type?: TaxType): this;
    withDynamicDescriptor(dynamicDescriptor: string): this;
    /**
     * Sets the idempotency key
     *
     * @param idempotencyKey string
     * @returns {this}
     */
    withIdempotencyKey(idempotencyKey: string): this;
    /**
     * Sets the idempotency key
     *
     * @param idempotencyKey string
     * @returns {this}
     */
    withPaymentMethodUsageMode(paymentMethodUsageMode: PaymentMethodUsageMode): this;
    withMultiCapture(sequence?: StoredCredentialSequence, paymentCount?: number): this;
    withTagData(tagData: string): this;
    withLodgingData(value: LodgingData): this;
    /**
     * Sets the Dispute Id.
     *
     * @param string value
     *
     * @return $this
     */
    withDisputeId(value: string): this;
    /**
     * Sets the Dispute Documents.
     *
     * @param DisputeDocument[] $value
     *
     * @return $this
     */
    withDisputeDocuments(value: DisputeDocument[]): this;
    protected setupValidations(): void;
    /**
     * Previous request's transaction reference
     *
     * @internal
     * @param IPaymentMethod $paymentMethod Transaction reference
     *
     * @return ManagementBuilder
     */
    withPaymentMethod(paymentMethod: PaymentMethod | TransactionReference): ManagementBuilder;
    /**
     * Set the request dccRateData
     *
     * @param DccRateData dccRateData
     *
     * @return AuthorizationBuilder
     */
    withDccRateData(value: DccRateData): this;
}

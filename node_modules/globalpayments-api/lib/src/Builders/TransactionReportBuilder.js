"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionReportBuilder = void 0;
const __1 = require("../");
const ReportBuilder_1 = require("./ReportBuilder");
class TransactionReportBuilder extends ReportBuilder_1.ReportBuilder {
    deviceId;
    endDate;
    startDate;
    transactionId;
    searchCriteria;
    depositOrderBy;
    disputeOrderBy;
    constructor(type) {
        super(type);
        this.searchBuilder = new __1.SearchCriteriaBuilder(this);
    }
    setupValidations() {
        this.validations
            .of("reportType", __1.ReportType.TransactionDetail)
            .check("transactionId")
            .isNotNull()
            .check("transactionId")
            .isNotEmpty()
            .check("deviceId")
            .isNull()
            .check("startDate")
            .isNull()
            .check("endDate")
            .isNull();
        this.validations
            .of("reportType", __1.ReportType.Activity)
            .check("transactionId")
            .isNull();
        this.validations
            .of("reportType", __1.ReportType.DocumentDisputeDetail)
            .check("searchBuilder.disputeDocumentId")
            .isNotNull()
            .check("searchBuilder.disputeId")
            .isNotNull();
    }
    withDeviceId(deviceId) {
        if (deviceId !== undefined) {
            this.deviceId = deviceId;
        }
        return this;
    }
    withDisputeId(disputeId) {
        this.searchBuilder.disputeId = disputeId;
        return this;
    }
    withEndDate(endDate) {
        if (endDate !== undefined) {
            this.endDate = endDate;
        }
        return this;
    }
    withStartDate(startDate) {
        if (startDate !== undefined) {
            this.startDate = startDate;
        }
        return this;
    }
    withStoredPaymentMethodId(storedPaymentMethodId) {
        if (storedPaymentMethodId !== undefined) {
            this.searchBuilder.storedPaymentMethodId = storedPaymentMethodId;
        }
        return this;
    }
    withTransactionId(transactionId) {
        if (transactionId !== undefined) {
            this.transactionId = transactionId;
        }
        return this;
    }
    withDepositId(depositId) {
        this.searchBuilder.depositId = depositId;
        return this;
    }
    withSettlementDisputeId(settlementDisputeId) {
        this.searchBuilder.settlementDisputeId = settlementDisputeId;
        return this;
    }
    where(criteria, value) {
        if (criteria !== undefined && value !== undefined) {
            if (this.searchCriteria == undefined) {
                this.searchCriteria = {};
            }
            this.searchCriteria[criteria] = value;
            this.searchBuilder.andWith(criteria, value);
        }
        return this.searchBuilder;
    }
    orderBy(sortProperty, sortDirection = __1.SortDirection.Desc) {
        this.order = sortDirection;
        switch (this.reportType) {
            case __1.ReportType.FindStoredPaymentMethodsPaged:
                this.storedPaymentMethodOrderBy = sortProperty;
                break;
            case __1.ReportType.FindTransactions:
            case __1.ReportType.FindTransactionsPaged:
            case __1.ReportType.FindSettlementTransactionsPaged:
                this.transactionOrderBy = sortProperty;
                break;
            case __1.ReportType.FindDeposits:
            case __1.ReportType.FindDepositsPaged:
                this.depositOrderBy = sortProperty;
                break;
            case __1.ReportType.FindDisputesPaged:
            case __1.ReportType.FindSettlementDisputesPaged:
                this.disputeOrderBy = sortProperty;
                break;
            default:
                throw new __1.NotImplementedError();
        }
        return this;
    }
}
exports.TransactionReportBuilder = TransactionReportBuilder;
//# sourceMappingURL=TransactionReportBuilder.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PayFacBuilder = void 0;
const __1 = require("../");
class PayFacBuilder extends __1.BaseBuilder {
    setupValidations() { }
    transactionType;
    transactionModifier;
    /// <summary>
    /// Primary Bank Account Information - Optional. Used to add a bank account to which funds can be settled
    /// </summary>
    bankAccountData;
    /// <summary>
    /// Merchant Beneficiary Owner Information - Required for all merchants validating KYC based off of personal data
    /// </summary>
    beneficialOwnerData;
    /// <summary>
    /// User for Portico Device Ordering. Must set TimeZone property as well when ordering Portico devices
    /// </summary>
    deviceData;
    /// <summary>
    /// Required for partners ordering Portico devices. Valid values: [ UTC, PT, MST, MT, CT, ET, HST, AT, AST, AKST, ACT, EET, EAT, MET, NET, PLT, IST, BST, VST, CTT, JST, ACT, AET, SST, NST, MIT, CNT, AGT, CAT ]
    /// </summary>
    timeZone;
    /// <summary>
    /// Business Data - Required for business validated accounts. May also be required for personal validated accounts
    /// </summary>
    businessData;
    /// <summary>
    /// Significant Owner Information - May be required for some partners based on ProPay Risk decision
    /// </summary>
    significantOwnerData;
    /// <summary>
    /// Threat Risk Assessment Information - May be required based on ProPay Risk decision
    /// </summary>
    threatRiskData;
    /// <summary>
    /// User/Merchant Personal Data
    /// </summary>
    userPersonalData;
    creditCardInformation;
    aCHInformation;
    mailingAddressInformation;
    secondaryBankInformation;
    grossBillingInformation;
    negativeLimit;
    renewalAccountData;
    accountNumber;
    password;
    accountPermissions;
    primaryBankAccountOwner;
    secondaryBankAccountOwner;
    documentUploadData;
    sSORequestData;
    amount;
    receivingAccountNumber;
    allowPending;
    cCAmount;
    requireCCRefund;
    transNum;
    externalID;
    sourceEmail;
    gatewayTransactionId;
    cardBrandTransactionId;
    globaltransId;
    globalTransSource;
    orderDevice;
    orderDeviceData;
    constructor(type, modifer = __1.TransactionModifier.None) {
        super();
        this.transactionType = type;
        this.transactionModifier = modifer;
    }
    execute(configName = "default") {
        super.execute();
        return __1.ServicesContainer.instance()
            .getXmlClient(configName)
            .processPayFac(this);
    }
    withBankAccountData(bankAccountData) {
        this.bankAccountData = bankAccountData;
        return this;
    }
    withBeneficialOwnerData(beneficialOwnerData) {
        this.beneficialOwnerData = beneficialOwnerData;
        return this;
    }
    withDeviceData(deviceData) {
        this.deviceData = deviceData;
        return this;
    }
    /// <summary>
    /// Required for partners ordering Portico devices. Valid values: [ UTC, PT, MST, MT, CT, ET, HST, AT, AST, AKST, ACT, EET, EAT, MET, NET, PLT, IST, BST, VST, CTT, JST, ACT, AET, SST, NST, MIT, CNT, AGT, CAT ]
    /// </summary>
    withTimeZone(timezone) {
        this.timeZone = timezone;
        return this;
    }
    withBusinessData(businessData) {
        this.businessData = businessData;
        return this;
    }
    withSignificantOwnerData(significantOwnerData) {
        this.significantOwnerData = significantOwnerData;
        return this;
    }
    withThreatRiskData(threatRiskData) {
        this.threatRiskData = threatRiskData;
        return this;
    }
    withUserPersonalData(userPersonalData) {
        this.userPersonalData = userPersonalData;
        return this;
    }
    withCreditCardData(creditCardInformation) {
        this.creditCardInformation = creditCardInformation;
        return this;
    }
    withACHData(achInformation) {
        this.aCHInformation = achInformation;
        return this;
    }
    withMailingAddress(mailingAddressInformation) {
        this.mailingAddressInformation = mailingAddressInformation;
        return this;
    }
    withSecondaryBankAccountData(secondaryBankInformation) {
        this.secondaryBankInformation = secondaryBankInformation;
        return this;
    }
    withGrossBillingSettleData(grossBillingInformation) {
        this.grossBillingInformation = grossBillingInformation;
        return this;
    }
    withAccountNumber(accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }
    withPassword(password) {
        this.password = password;
        return this;
    }
    withAccountPermissions(accountPermissions) {
        this.accountPermissions = accountPermissions;
        return this;
    }
    withPrimaryBankAccountOwner(primaryBankAccountOwner) {
        this.primaryBankAccountOwner = primaryBankAccountOwner;
        return this;
    }
    withSecondaryBankAccountOwner(secondaryBankAccountOwner) {
        this.secondaryBankAccountOwner = secondaryBankAccountOwner;
        return this;
    }
    withDocumentUploadData(docUploadData) {
        this.documentUploadData = docUploadData;
        return this;
    }
    withSSORequestData(ssoRequestData) {
        this.sSORequestData = ssoRequestData;
        return this;
    }
    withNegativeLimit(negativeLimit) {
        this.negativeLimit = negativeLimit;
        return this;
    }
    withRenewalAccountData(renewalAccountData) {
        this.renewalAccountData = renewalAccountData;
        return this;
    }
    withAmount(amount) {
        this.amount = amount;
        return this;
    }
    withFlashFundsPaymentCardData(cardData) {
        this.FlashFundsPaymentCardData = cardData;
        return this;
    }
    withReceivingAccountNumber(receivingAccountNumber) {
        this.receivingAccountNumber = receivingAccountNumber;
        return this;
    }
    withAllowPending(allowPending) {
        this.allowPending = allowPending;
        return this;
    }
    withCCAmount(ccAmount) {
        this.cCAmount = ccAmount;
        return this;
    }
    withRequireCCRefund(requireCCRefund) {
        this.requireCCRefund = requireCCRefund;
        return this;
    }
    withTransNum(transNum) {
        this.transNum = transNum;
        return this;
    }
    withGatewayTransactionId(gatewayTransactionId) {
        this.gatewayTransactionId = gatewayTransactionId;
        return this;
    }
    withCardBrandTransactionId(cardBrandTransactionId) {
        this.cardBrandTransactionId = cardBrandTransactionId;
        return this;
    }
    withGlobaltransId(globaltransId) {
        this.globaltransId = globaltransId;
        return this;
    }
    withGlobalTransSource(globalTransSource) {
        this.globalTransSource = globalTransSource;
        return this;
    }
    withExternalID(externalId) {
        this.externalID = externalId;
        return this;
    }
    withSourceEmail(sourceEmail) {
        this.sourceEmail = sourceEmail;
        return this;
    }
    withOrderDevice(orderDevice) {
        this.orderDevice = orderDevice;
        return this;
    }
    withOrderDeviceData(orderDeviceData) {
        this.orderDeviceData = orderDeviceData;
        return this;
    }
}
exports.PayFacBuilder = PayFacBuilder;
//# sourceMappingURL=PayFacBuilder.js.map
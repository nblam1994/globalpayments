"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpApiConfig = void 0;
const Entities_1 = require("../../../src/Entities");
const GatewayConfig_1 = require("./GatewayConfig");
const src_1 = require("../../../src");
class GpApiConfig extends GatewayConfig_1.GatewayConfig {
    appId;
    appKey;
    accessTokenInfo;
    country = "US";
    channel;
    secondsToExpire;
    intervalToExpire;
    methodNotificationUrl;
    challengeNotificationUrl;
    merchantContactUrl;
    permissions;
    merchantId;
    deviceCurrency;
    constructor() {
        super(Entities_1.GatewayProvider.GpApi);
    }
    configureContainer(services) {
        if (!this.serviceUrl) {
            this.serviceUrl =
                this.environment == Entities_1.Environment.Production
                    ? Entities_1.ServiceEndpoints.GP_API_PRODUCTION
                    : Entities_1.ServiceEndpoints.GP_API_TEST;
        }
        const gateway = new src_1.GpApiConnector(this);
        gateway.serviceUrl = this.serviceUrl;
        gateway.requestLogger = this.requestLogger;
        services.gatewayConnector = gateway;
        services.reportingService = gateway;
        services.setSecure3dProvider(src_1.Secure3dVersion.ONE, gateway);
        services.setSecure3dProvider(src_1.Secure3dVersion.TWO, gateway);
    }
    validate() {
        super.validate();
        if (!this.accessTokenInfo && (!this.appId || !this.appKey)) {
            throw new Entities_1.ConfigurationError("AccessTokenInfo or AppId and AppKey cannot be null");
        }
    }
}
exports.GpApiConfig = GpApiConfig;
//# sourceMappingURL=GpApiConfig.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PorticoConfig = void 0;
const Entities_1 = require("../../../src/Entities");
const GatewayConfig_1 = require("./GatewayConfig");
const Gateways_1 = require("../../../src/Gateways/");
class PorticoConfig extends GatewayConfig_1.GatewayConfig {
    siteId;
    licenseId;
    deviceId;
    username;
    password;
    developerId;
    versionNumber;
    secretApiKey;
    uniqueDeviceId;
    //ProPay
    certificationStr;
    terminalId;
    selfSignedCertLocation;
    proPayUS = true;
    constructor() {
        super(Entities_1.GatewayProvider.Portico);
    }
    getPayPlanEndpoint() {
        if ((this.secretApiKey &&
            this.secretApiKey.toLowerCase().indexOf("cert") !== -1) ||
            (!this.secretApiKey && this.environment == Entities_1.Environment.Test)) {
            return "/Portico.PayPlan.v2/";
        }
        return "/PayPlan.v2/";
    }
    // Common
    curlOptions;
    configureContainer(services) {
        // parent::configureContainer(services); // must implement data services first
        if (!this.serviceUrl) {
            this.serviceUrl =
                this.environment == Entities_1.Environment.Test
                    ? Entities_1.ServiceEndpoints.PORTICO_TEST
                    : Entities_1.ServiceEndpoints.PORTICO_PRODUCTION;
        }
        const gateway = new Gateways_1.PorticoConnector(this);
        gateway.siteId = this.siteId;
        gateway.licenseId = this.licenseId;
        gateway.deviceId = this.deviceId;
        gateway.username = this.username;
        gateway.password = this.password;
        gateway.secretApiKey = this.secretApiKey;
        gateway.developerId = this.developerId;
        gateway.versionNumber = this.versionNumber;
        gateway.timeout = this.timeout;
        gateway.serviceUrl =
            this.serviceUrl + "/Hps.Exchange.PosGateway/PosGatewayService.asmx";
        gateway.uniqueDeviceId = this.uniqueDeviceId;
        gateway.requestLogger = this.requestLogger;
        services.gatewayConnector = gateway;
        if (!this.dataClientId) {
            services.reportingService = gateway;
        }
        const payplan = new Gateways_1.PayPlanConnector();
        payplan.secretApiKey = this.secretApiKey;
        payplan.developerId = this.developerId;
        payplan.versionNumber = this.versionNumber;
        payplan.timeout = this.timeout;
        payplan.serviceUrl = this.serviceUrl + this.getPayPlanEndpoint();
        services.recurringConnector = payplan;
        if (this.certificationStr) {
            if (this.environment === Entities_1.Environment.Test) {
                this.serviceUrl = this.proPayUS
                    ? Entities_1.ServiceEndpoints.PROPAY_TEST
                    : Entities_1.ServiceEndpoints.PROPAY_TEST_CANADIAN;
            }
            else {
                this.serviceUrl = this.proPayUS
                    ? Entities_1.ServiceEndpoints.PROPAY_PRODUCTION
                    : Entities_1.ServiceEndpoints.PROPAY_PRODUCTION_CANADIAN;
            }
            const payFac = new Gateways_1.ProPayConnector();
            payFac.certStr = this.certificationStr;
            payFac.termID = this.terminalId;
            payFac.timeout = this.timeout;
            payFac.serviceUrl = this.serviceUrl;
            payFac.selfSignedCert = this.selfSignedCertLocation;
            services.setPayFacProvider(payFac);
        }
    }
    validate() {
        super.validate();
        // portico api key
        if (this.secretApiKey) {
            if (this.siteId ||
                this.licenseId ||
                this.deviceId ||
                this.username ||
                this.password) {
                throw new Entities_1.ConfigurationError("Configuration contains both secret api key and legacy credentials. These are mutually exclusive.");
            }
        }
        // portico legacy
        if (this.siteId ||
            this.licenseId ||
            this.deviceId ||
            this.username ||
            this.password) {
            if (!(this.siteId &&
                this.licenseId &&
                this.deviceId &&
                this.username &&
                this.password)) {
                throw new Entities_1.ConfigurationError("Site, License, Device, Username and Password should all have a values for this configuration.");
            }
        }
    }
}
exports.PorticoConfig = PorticoConfig;
//# sourceMappingURL=PorticoConfig.js.map
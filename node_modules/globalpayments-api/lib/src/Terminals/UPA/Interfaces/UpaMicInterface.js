"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpaMicInterface = void 0;
const src_1 = require("../../../../src");
class UpaMicInterface {
    config;
    gatewayConfig;
    connector;
    constructor(config) {
        this.config = config;
        this.gatewayConfig = config.gatewayConfig;
    }
    connect() {
        this.connector = src_1.ServicesContainer.instance().getClient(this.config.getConfigName());
        if (this.gatewayConfig instanceof src_1.GpApiConfig &&
            !this.gatewayConfig.accessTokenInfo.accessToken &&
            this.connector instanceof src_1.GpApiConnector) {
            this.connector.signIn();
        }
    }
    disconnect() {
        // TODO: Implement disconnect() method.
    }
    send(message) {
        this.connect();
        try {
            let out;
            if (this.gatewayConfig instanceof src_1.GpApiConfig) {
                const requestData = {
                    merchant_id: this.gatewayConfig.accessTokenInfo.merchantId,
                    account_id: this.gatewayConfig.accessTokenInfo.transactionProcessingAccountID,
                    account_name: this.gatewayConfig.accessTokenInfo.transactionProcessingAccountName,
                    channel: this.gatewayConfig.channel,
                    country: this.gatewayConfig.country,
                    currency: this.gatewayConfig.deviceCurrency,
                    reference: message.getRequestField("requestId") ||
                        src_1.GenerationUtils.generateOrderId(),
                    request: message.getJsonRequest(),
                    notifications: {
                        status_url: this.gatewayConfig.methodNotificationUrl,
                    },
                };
                if (this.connector instanceof src_1.GpApiConnector) {
                    out = this.connector.processPassThrough(JSON.stringify(requestData));
                    return out.then((response) => this.parseResponse(response));
                }
            }
        }
        catch (e) {
            throw new src_1.GatewayError(`Device error: ${e.message}`, e.message);
        }
    }
    parseResponse(gatewayResponse) {
        const gatewayResponseParsed = gatewayResponse;
        gatewayResponseParsed.provider = this.gatewayConfig.gatewayProvider;
        return gatewayResponse;
    }
    arrayCastRecursive(array) {
        if (Array.isArray(array)) {
            array.forEach((value, key) => {
                if (Array.isArray(value)) {
                    array[key] = this.arrayCastRecursive(value);
                }
                if (typeof value === "object" && value !== null) {
                    array[key] = this.arrayCastRecursive(value);
                }
            });
        }
        if (typeof array === "object" && array !== null) {
            return this.arrayCastRecursive(Object.entries(array));
        }
        return array;
    }
}
exports.UpaMicInterface = UpaMicInterface;
//# sourceMappingURL=UpaMicInterface.js.map
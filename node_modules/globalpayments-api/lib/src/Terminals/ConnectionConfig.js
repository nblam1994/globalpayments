"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectionConfig = void 0;
const src_1 = require("../../src");
const Enums_1 = require("./Enums");
const UPA_1 = require("./UPA");
class ConnectionConfig extends src_1.Configuration {
    deviceType;
    connectionMode;
    parity;
    ipAddress;
    port;
    requestIdProvider;
    gatewayConfig;
    configName;
    connectionConfig() {
        this.timeout = -1;
    }
    configureContainer(services) {
        switch (this.deviceType) {
            case src_1.DeviceType.UPA_DEVICE:
                services.deviceController = new UPA_1.UpaController(this);
                break;
            default:
                break;
        }
    }
    getGatewayConfig() {
        return this.gatewayConfig;
    }
    setConfigName(configName) {
        this.configName = configName;
    }
    getConfigName() {
        return this.configName;
    }
    validate() {
        super.validate();
        if (this.connectionMode == Enums_1.ConnectionModes.TCP_IP ||
            this.connectionMode == Enums_1.ConnectionModes.HTTP) {
            if (!this.ipAddress)
                throw new src_1.ApiError("IpAddress is required for TCP or HTTP communication modes.");
            if (!this.port)
                throw new src_1.ApiError("Port is required for TCP or HTTP communication modes.");
        }
    }
}
exports.ConnectionConfig = ConnectionConfig;
//# sourceMappingURL=ConnectionConfig.js.map
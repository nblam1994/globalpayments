import { DeviceType } from "../../src";
import { IDeviceCommInterface, IDeviceInterface, IRequestIdProvider, ITerminalConfiguration, ITerminalResponse, UpaMessageId } from ".";
import { ConnectionModes } from "./Enums";
import { TerminalAuthBuilder } from "./Builders/TerminalAuthBuilder";
import { TerminalManageBuilder } from "./Builders";
import { DeviceMessage } from "./DeviceMessage";
export declare abstract class DeviceController {
    protected _interface: IDeviceInterface;
    protected _settings: ITerminalConfiguration;
    connector: IDeviceCommInterface;
    connectionMode: ConnectionModes;
    deviceType: DeviceType;
    requestIdProvider: IRequestIdProvider;
    constructor(settings: ITerminalConfiguration);
    getConnectionMode(): ConnectionModes | null;
    getDeviceType(): DeviceType | null;
    getRequestIdProvider(): IRequestIdProvider | null;
    send(message: DeviceMessage, requestType?: UpaMessageId): any;
    abstract configureConnector(): IDeviceCommInterface;
    abstract configureInterface(): IDeviceInterface;
    abstract processTransaction(builder: TerminalAuthBuilder): Promise<ITerminalResponse>;
    abstract manageTransaction(builder: TerminalManageBuilder): Promise<ITerminalResponse>;
}

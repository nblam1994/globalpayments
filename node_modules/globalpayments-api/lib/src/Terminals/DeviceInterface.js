"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceInterface = void 0;
/* eslint-disable indent */
const src_1 = require("../../src");
const Builders_1 = require("./Builders");
class DeviceInterface {
    controller;
    requestIdProvider;
    ecrId;
    constructor(controller) {
        this.controller = controller;
        this.requestIdProvider = controller.requestIdProvider;
    }
    async lineItem(leftText, rightText, runningLeftText, runningRightText) {
        // TODO add DeviceResponse
        leftText; // lint handling
        rightText; // lint handling
        runningLeftText; // lint handling
        runningRightText; // lint handling
        throw new src_1.UnsupportedTransactionError("This is not supported by the currently configured device.");
    }
    /**********START Transactions ************/
    /**
     * @return TerminalAuthBuilder
     */
    authorize(amount) {
        return new Builders_1.TerminalAuthBuilder(src_1.TransactionType.Auth, src_1.PaymentMethodType.Credit).withAmount(amount);
    }
    capture(amount) {
        return new Builders_1.TerminalManageBuilder(src_1.TransactionType.Capture, src_1.PaymentMethodType.Credit).withAmount(amount);
    }
    refund(amount) {
        return new Builders_1.TerminalAuthBuilder(src_1.TransactionType.Refund, src_1.PaymentMethodType.Credit).withAmount(amount);
    }
    refundById(amount) {
        return new Builders_1.TerminalManageBuilder(src_1.TransactionType.Refund, src_1.PaymentMethodType.Credit).withAmount(amount);
    }
    sale(amount) {
        return new Builders_1.TerminalAuthBuilder(src_1.TransactionType.Sale, src_1.PaymentMethodType.Credit).withAmount(amount);
    }
    verify() {
        return new Builders_1.TerminalAuthBuilder(src_1.TransactionType.Verify, src_1.PaymentMethodType.Credit);
    }
    void() {
        return new Builders_1.TerminalManageBuilder(src_1.TransactionType.Void, src_1.PaymentMethodType.Credit);
    }
}
exports.DeviceInterface = DeviceInterface;
//# sourceMappingURL=DeviceInterface.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerminalAuthBuilder = void 0;
const src_1 = require("../../../src");
const TerminalBuilder_1 = require("./TerminalBuilder");
class TerminalAuthBuilder extends TerminalBuilder_1.TerminalBuilder {
    address;
    allowDuplicates;
    amount;
    authCode;
    cashBackAmount;
    currency;
    customerCode;
    gratuity;
    invoiceNumber;
    poNumber;
    requestMultiUseToken;
    signatureCapture;
    taxAmount;
    taxExempt;
    taxExemptId;
    transactionId;
    shiftId;
    taxType;
    terminalRefNumber;
    allowPartialAuth;
    transactionInitiator;
    constructor(transactionType, paymentMethodType) {
        super(transactionType, paymentMethodType);
        this.transactionType = transactionType;
        this.paymentMethodType = paymentMethodType;
    }
    /**
     * @param string configName
     * @return TerminalResponse
     * @throws \GlobalPayments\Api\Entities\Exceptions\ApiException
     */
    execute(configName = "default") {
        super.execute();
        const client = src_1.ServicesContainer.instance().getDeviceController(configName);
        return client.processTransaction(this);
    }
    withAddress(address) {
        this.address = address;
        return this;
    }
    withAllowDuplicates(allowDuplicates) {
        this.allowDuplicates = allowDuplicates;
        return this;
    }
    withAmount(amount) {
        this.amount = amount;
        return this;
    }
    withCashBack(amount) {
        this.cashBackAmount = amount;
        return this;
    }
    withCurrency(value) {
        this.currency = value;
        return this;
    }
    withCustomerCode(customerCode) {
        this.customerCode = customerCode;
        return this;
    }
    withGratuity(gratuity) {
        this.gratuity = gratuity;
        return this;
    }
    withInvoiceNumber(invoiceNumber) {
        this.invoiceNumber = invoiceNumber;
        return this;
    }
    withPoNumber(poNumber) {
        this.poNumber = poNumber;
        return this;
    }
    withRequestMultiUseToken(requestMultiUseToken) {
        this.requestMultiUseToken = requestMultiUseToken;
        return this;
    }
    withSignatureCapture(signatureCapture) {
        this.signatureCapture = signatureCapture;
        return this;
    }
    withTaxAmount(taxAmount) {
        this.taxAmount = taxAmount;
        return this;
    }
    withToken(value) {
        if (this.paymentMethod == null ||
            !(this.paymentMethod instanceof src_1.CreditCardData)) {
            this.paymentMethod = new src_1.CreditCardData();
            this.paymentMethod.token = value;
        }
        return this;
    }
    /**
     * Previous request's transaction ID
     *
     * @param string transactionId
     * @return this
     */
    withTransactionId(transactionId) {
        if (transactionId === undefined) {
            return this;
        }
        if (this.paymentMethod instanceof src_1.TransactionReference) {
            this.paymentMethod.transactionId = transactionId;
            return this;
        }
        return this.withPaymentMethod(new src_1.TransactionReference(transactionId));
    }
    withPaymentMethod(paymentMethod) {
        if (paymentMethod !== undefined) {
            this.paymentMethod = paymentMethod;
        }
        return this;
    }
    withCardBrandStorage(transactionInitiator) {
        this.transactionInitiator = transactionInitiator;
        return this;
    }
    withEcrId(ecrId) {
        this.ecrId = ecrId;
        return this;
    }
    withTerminalRefNumber(terminalRefNumber) {
        this.terminalRefNumber = terminalRefNumber;
        return this;
    }
    setupValidations() {
        this.validations
            .of("transactionType", src_1.TransactionType.Auth | src_1.TransactionType.Sale | src_1.TransactionType.Refund)
            .with("transactionModifier", src_1.TransactionModifier.None)
            .check("amount")
            .isNotNull();
        this.validations
            .of("transactionType", src_1.TransactionType.Refund)
            .check("amount")
            .isNotNull();
        this.validations
            .of("transactionType", src_1.TransactionType.Refund)
            .with("paymentMethodType", src_1.PaymentMethodType.Credit)
            .check("transactionId")
            .isNotNull()
            .check("authCode")
            .isNotNull();
    }
    withTaxType(taxType, taxExemptId = "") {
        this.taxType = taxType;
        this.taxExempt = taxType === src_1.TaxType.TaxExempt ? "1" : "0";
        this.taxExemptId = taxExemptId;
        return this;
    }
    withClientTransactionId(clientTransactionId) {
        this.clientTransactionId = clientTransactionId;
        return this;
    }
    /**
     *
     * @param bool value
     * @return this
     */
    withAllowPartialAuth(value) {
        this.allowPartialAuth = value;
        return this;
    }
}
exports.TerminalAuthBuilder = TerminalAuthBuilder;
//# sourceMappingURL=TerminalAuthBuilder.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TerminalManageBuilder = void 0;
const src_1 = require("../../../src");
const TerminalBuilder_1 = require("./TerminalBuilder");
class TerminalManageBuilder extends TerminalBuilder_1.TerminalBuilder {
    amount;
    currency;
    gratuity;
    transactionId;
    terminalRefNumber;
    constructor(transactionType, paymentMethodType) {
        super(transactionType, paymentMethodType);
        this.transactionType = transactionType;
        this.paymentMethodType = paymentMethodType;
    }
    /**
     * @param string configName
     * @return TerminalResponse
     * @throws \GlobalPayments\Api\Entities\Exceptions\ApiException
     */
    execute(configName = "default") {
        super.execute();
        const client = src_1.ServicesContainer.instance().getDeviceController(configName);
        return client.manageTransaction(this);
    }
    withAmount(amount) {
        this.amount = amount;
        return this;
    }
    withCurrency(value) {
        this.currency = value;
        return this;
    }
    withGratuity(gratuity) {
        this.gratuity = gratuity;
        return this;
    }
    /**
     * Previous request's transaction ID
     *
     * @param string transactionId
     * @return this
     */
    withTransactionId(transactionId) {
        if (transactionId === undefined) {
            return this;
        }
        if (this.paymentMethod instanceof src_1.TransactionReference) {
            this.paymentMethod.transactionId = transactionId;
            return this;
        }
        this.transactionId = transactionId;
        return this;
    }
    withPaymentMethod(paymentMethod) {
        if (paymentMethod !== undefined) {
            this.paymentMethod = paymentMethod;
        }
        return this;
    }
    withTerminalRefNumber(terminalRefNumber) {
        this.terminalRefNumber = terminalRefNumber;
        return this;
    }
    withClientTransactionId(clientTransactionId) {
        this.clientTransactionId = clientTransactionId;
        return this;
    }
    setupValidations() {
        this.validations
            .of("transactionType", src_1.TransactionType.Capture)
            .with("transactionModifier", src_1.TransactionModifier.None)
            .check("amount")
            .isNotNull()
            .check("transactionId")
            .isNotNull();
        this.validations
            .of("transactionType", src_1.TransactionType.Void)
            .with("transactionModifier", src_1.TransactionModifier.None)
            .check("transactionId")
            .isNotNull();
        this.validations
            .of("transactionType", src_1.TransactionType.Refund)
            .check("transactionId")
            .isNotNull();
        this.validations
            .of("transactionType", src_1.TransactionType.Auth)
            .with("transactionModifier", src_1.TransactionModifier.Incremental)
            .check("transactionId")
            .isNotNull();
    }
}
exports.TerminalManageBuilder = TerminalManageBuilder;
//# sourceMappingURL=TerminalManageBuilder.js.map
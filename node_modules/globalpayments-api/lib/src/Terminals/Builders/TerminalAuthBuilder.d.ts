import { Address, CurrencyType, IPaymentMethod, ITerminalResponse, PaymentMethodType, StoredCredentialInitiator, TaxType, TransactionType } from "../../../src";
import { TerminalBuilder } from "./TerminalBuilder";
export declare class TerminalAuthBuilder extends TerminalBuilder {
    address: Address;
    allowDuplicates: boolean;
    amount?: number;
    authCode: string;
    cashBackAmount: number;
    currency: CurrencyType;
    customerCode: string;
    gratuity: number;
    invoiceNumber: string;
    poNumber: string;
    requestMultiUseToken: boolean;
    signatureCapture: boolean;
    taxAmount: number;
    taxExempt: string;
    taxExemptId: string;
    transactionId: string;
    shiftId: string;
    taxType: TaxType;
    terminalRefNumber?: string;
    allowPartialAuth: boolean;
    transactionInitiator: StoredCredentialInitiator;
    constructor(transactionType: TransactionType, paymentMethodType?: PaymentMethodType);
    /**
     * @param string configName
     * @return TerminalResponse
     * @throws \GlobalPayments\Api\Entities\Exceptions\ApiException
     */
    execute(configName?: string): Promise<ITerminalResponse>;
    withAddress(address: Address): this;
    withAllowDuplicates(allowDuplicates: boolean): this;
    withAmount(amount?: number): this;
    withCashBack(amount: number): this;
    withCurrency(value: CurrencyType): this;
    withCustomerCode(customerCode: string): this;
    withGratuity(gratuity: number): this;
    withInvoiceNumber(invoiceNumber: string): this;
    withPoNumber(poNumber: string): this;
    withRequestMultiUseToken(requestMultiUseToken: boolean): this;
    withSignatureCapture(signatureCapture: boolean): this;
    withTaxAmount(taxAmount: number): this;
    withToken(value: string): this;
    /**
     * Previous request's transaction ID
     *
     * @param string transactionId
     * @return this
     */
    withTransactionId(transactionId: string): this;
    withPaymentMethod(paymentMethod?: IPaymentMethod): this;
    withCardBrandStorage(transactionInitiator: StoredCredentialInitiator): this;
    withEcrId(ecrId: number): this;
    withTerminalRefNumber(terminalRefNumber: string): this;
    protected setupValidations(): void;
    withTaxType(taxType: TaxType, taxExemptId?: string): this;
    withClientTransactionId(clientTransactionId: string): this;
    /**
     *
     * @param bool value
     * @return this
     */
    withAllowPartialAuth(value: boolean): this;
}
